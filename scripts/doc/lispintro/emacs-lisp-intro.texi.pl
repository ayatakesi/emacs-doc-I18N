#!/usr/bin/perl
# This script requires libintl-perl(>=1.09).
use Locale::TextDomain ("emacs-lisp-intro.texi" => "./po/gettext/doc/lispintro");
my ($en, $ja);
while (<>) {
	($en, $ja) = (quotemeta('@appendix A Graph with Labeled Axes'), __ '@appendix A Graph with Labeled Axes'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendix Free Software and Free Manuals'), __ '@appendix Free Software and Free Manuals'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendix GNU Free Documentation License'), __ '@appendix GNU Free Documentation License'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendix Handling the Kill Ring'), __ '@appendix Handling the Kill Ring'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendix The @code{the-the} Function'), __ '@appendix The @code{the-the} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec @code{yank-pop}'), __ '@appendixsec @code{yank-pop}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec @code{yank}'), __ '@appendixsec @code{yank}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec Printing the Whole Graph'), __ '@appendixsec Printing the Whole Graph'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec The @code{current-kill} Function'), __ '@appendixsec The @code{current-kill} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec The @code{print-X-axis} Function'), __ '@appendixsec The @code{print-X-axis} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec The @code{print-Y-axis} Function'), __ '@appendixsec The @code{print-Y-axis} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec The @code{print-graph} Varlist'), __ '@appendixsec The @code{print-graph} Varlist'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsec The @file{ring.el} File'), __ '@appendixsec The @file{ring.el} File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec A @code{lambda} Expression: Useful Anonymity'), __ '@appendixsubsec A @code{lambda} Expression: Useful Anonymity'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Another Bug @dots{} Most Insidious'), __ '@appendixsubsec Another Bug @dots{} Most Insidious'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Construct a Y Axis Element'), __ '@appendixsubsec Construct a Y Axis Element'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Create a Y Axis Column'), __ '@appendixsubsec Create a Y Axis Column'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Graphing Numbers of Words and Symbols'), __ '@appendixsubsec Graphing Numbers of Words and Symbols'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Side Trip: Compute a Remainder'), __ '@appendixsubsec Side Trip: Compute a Remainder'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec Testing @code{print-graph}'), __ '@appendixsubsec Testing @code{print-graph}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec The @code{mapcar} Function'), __ '@appendixsubsec The @code{mapcar} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec The Not Quite Final Version of @code{print-Y-axis}'), __ '@appendixsubsec The Not Quite Final Version of @code{print-Y-axis}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec The Printed Graph'), __ '@appendixsubsec The Printed Graph'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@appendixsubsec X Axis Tic Marks'), __ '@appendixsubsec X Axis Tic Marks'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter @code{car}, @code{cdr}, @code{cons}: Fundamental Functions'), __ '@chapter @code{car}, @code{cdr}, @code{cons}: Fundamental Functions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter A Few Buffer-Related Functions'), __ '@chapter A Few Buffer-Related Functions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter A Few More Complex Functions'), __ '@chapter A Few More Complex Functions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Conclusion'), __ '@chapter Conclusion'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Counting Words in a @code{defun}'), __ '@chapter Counting Words in a @code{defun}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Counting via Repetition and Regexps'), __ '@chapter Counting via Repetition and Regexps'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Cutting and Storing Text'), __ '@chapter Cutting and Storing Text'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Debugging'), __ '@chapter Debugging'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter How Lists are Implemented'), __ '@chapter How Lists are Implemented'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter How To Write Function Definitions'), __ '@chapter How To Write Function Definitions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter List Processing'), __ '@chapter List Processing'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Loops and Recursion'), __ '@chapter Loops and Recursion'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Narrowing and Widening'), __ '@chapter Narrowing and Widening'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Practicing Evaluation'), __ '@chapter Practicing Evaluation'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Readying a Graph'), __ '@chapter Readying a Graph'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Regular Expression Searches'), __ '@chapter Regular Expression Searches'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Yanking Text Back'), __ '@chapter Yanking Text Back'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@chapter Your @file{.emacs} File'), __ '@chapter Your @file{.emacs} File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{car} and @code{cdr}'), __ '@section @code{car} and @code{cdr}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{cons}'), __ '@section @code{cons}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{copy-region-as-kill}'), __ '@section @code{copy-region-as-kill}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{debug-on-entry}'), __ '@section @code{debug-on-entry}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{debug-on-quit} and @code{(debug)}'), __ '@section @code{debug-on-quit} and @code{(debug)}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{debug}'), __ '@section @code{debug}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{forward-paragraph}: a Goldmine of Functions'), __ '@section @code{forward-paragraph}: a Goldmine of Functions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{forward-sentence}'), __ '@section @code{forward-sentence}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{kill-region}'), __ '@section @code{kill-region}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{lengths-list-file} in Detail'), __ '@section @code{lengths-list-file} in Detail'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{let}'), __ '@section @code{let}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{nthcdr}'), __ '@section @code{nthcdr}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{nth}'), __ '@section @code{nth}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{optional} Argument Exercise'), __ '@section @code{optional} Argument Exercise'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{save-excursion}'), __ '@section @code{save-excursion}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{setcar}'), __ '@section @code{setcar}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{setcdr}'), __ '@section @code{setcdr}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{what-line}'), __ '@section @code{what-line}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{while}'), __ '@section @code{while}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section @code{zap-to-char}'), __ '@section @code{zap-to-char}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section A Modified Mode Line'), __ '@section A Modified Mode Line'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section A Simple Extension: @code{line-to-top-of-window}'), __ '@section A Simple Extension: @code{line-to-top-of-window}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section A Simplified @code{beginning-of-buffer} Definition'), __ '@section A Simplified @code{beginning-of-buffer} Definition'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Arguments'), __ '@section Arguments'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Autoloading'), __ '@section Autoloading'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Beginning a @file{.emacs} File'), __ '@section Beginning a @file{.emacs} File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Buffer Names'), __ '@section Buffer Names'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Buffer Size and the Location of Point'), __ '@section Buffer Size and the Location of Point'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Complete Definition of @code{beginning-of-buffer}'), __ '@section Complete Definition of @code{beginning-of-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Count Several @code{defuns} Within a File'), __ '@section Count Several @code{defuns} Within a File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Count Words Recursively'), __ '@section Count Words Recursively'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Count Words in @code{defuns} in Different Files'), __ '@section Count Words in @code{defuns} in Different Files'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Debugging Exercises'), __ '@section Debugging Exercises'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Different Options for @code{interactive}'), __ '@section Different Options for @code{interactive}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Digression into C'), __ '@section Digression into C'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Evaluation'), __ '@section Evaluation'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercise'), __ '@section Exercise'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercise with Narrowing'), __ '@section Exercise with Narrowing'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercise: Counting Punctuation'), __ '@section Exercise: Counting Punctuation'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercises'), __ '@section Exercises'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercises with @code{re-search-forward}'), __ '@section Exercises with @code{re-search-forward}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Exercises with @code{yank} and @code{nthcdr}'), __ '@section Exercises with @code{yank} and @code{nthcdr}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Find a File'), __ '@section Find a File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Finding More Information'), __ '@section Finding More Information'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Generate an Error Message'), __ '@section Generate an Error Message'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Getting Buffers'), __ '@section Getting Buffers'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section If--then--else Expressions'), __ '@section If--then--else Expressions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Indent Tabs Mode'), __ '@section Indent Tabs Mode'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Initializing a Variable with @code{defvar}'), __ '@section Initializing a Variable with @code{defvar}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Install Code Permanently'), __ '@section Install Code Permanently'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Install a Function Definition'), __ '@section Install a Function Definition'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Keymaps'), __ '@section Keymaps'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Kill Ring Overview'), __ '@section Kill Ring Overview'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Lisp Lists'), __ '@section Lisp Lists'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Loading Files'), __ '@section Loading Files'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Looping Exercise'), __ '@section Looping Exercise'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Mail Aliases'), __ '@section Mail Aliases'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Make a Function Interactive'), __ '@section Make a Function Interactive'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Miscellaneous Settings for a @file{.emacs} File'), __ '@section Miscellaneous Settings for a @file{.emacs} File'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Need for Printed Axes'), __ '@section Need for Printed Axes'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Prepare the Data for Display in a Graph'), __ '@section Prepare the Data for Display in a Graph'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Recursion'), __ '@section Recursion'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Recursively Count Words in Different Files'), __ '@section Recursively Count Words in Different Files'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Review'), __ '@section Review'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Run a Program'), __ '@section Run a Program'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Save your time: @code{dolist} and @code{dotimes}'), __ '@section Save your time: @code{dolist} and @code{dotimes}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Searching Exercises'), __ '@section Searching Exercises'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Setting the Value of a Variable'), __ '@section Setting the Value of a Variable'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Site-wide Initialization Files'), __ '@section Site-wide Initialization Files'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Some Keybindings'), __ '@section Some Keybindings'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Specifying Variables using @code{defcustom}'), __ '@section Specifying Variables using @code{defcustom}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Summary'), __ '@section Summary'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Switching Buffers'), __ '@section Switching Buffers'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Symbol Names and Function Definitions'), __ '@section Symbol Names and Function Definitions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Symbols as a Chest of Drawers'), __ '@section Symbols as a Chest of Drawers'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Text and Auto Fill Mode'), __ '@section Text and Auto Fill Mode'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{@value{COUNT-WORDS}} Function'), __ '@section The @code{@value{COUNT-WORDS}} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{count-words-in-defun} Function'), __ '@section The @code{count-words-in-defun} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{defun} Macro'), __ '@section The @code{defun} Macro'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{edebug} Source Level Debugger'), __ '@section The @code{edebug} Source Level Debugger'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{graph-body-print} Function'), __ '@section The @code{graph-body-print} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{if} Special Form'), __ '@section The @code{if} Special Form'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{kill-ring-yank-pointer} Variable'), __ '@section The @code{kill-ring-yank-pointer} Variable'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{re-search-forward} Function'), __ '@section The @code{re-search-forward} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{recursive-graph-body-print} Function'), __ '@section The @code{recursive-graph-body-print} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The @code{save-restriction} Special Form'), __ '@section The @code{save-restriction} Special Form'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Definition of @code{append-to-buffer}'), __ '@section The Definition of @code{append-to-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Definition of @code{copy-to-buffer}'), __ '@section The Definition of @code{copy-to-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Definition of @code{insert-buffer}'), __ '@section The Definition of @code{insert-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Definition of @code{mark-whole-buffer}'), __ '@section The Definition of @code{mark-whole-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Lisp Interpreter'), __ '@section The Lisp Interpreter'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section The Regular Expression for @code{sentence-end}'), __ '@section The Regular Expression for @code{sentence-end}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Truth and Falsehood in Emacs Lisp'), __ '@section Truth and Falsehood in Emacs Lisp'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section Variables'), __ '@section Variables'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section What Constitutes a Word or Symbol?'), __ '@section What Constitutes a Word or Symbol?'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section What to Count?'), __ '@section What to Count?'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@section X11 Colors'), __ '@section X11 Colors'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection @code{beginning-of-buffer} with an Argument'), __ '@subsection @code{beginning-of-buffer} with an Argument'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection @code{condition-case}'), __ '@subsection @code{condition-case}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection @code{defvar} and an asterisk'), __ '@subsection @code{defvar} and an asterisk'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection @code{insert-buffer} With an @code{if} Instead of an @code{or}'), __ '@subsection @code{insert-buffer} With an @code{if} Instead of an @code{or}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection @code{save-excursion} in @code{append-to-buffer}'), __ '@subsection @code{save-excursion} in @code{append-to-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection A @code{while} Loop and a List'), __ '@subsection A @code{while} Loop and a List'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection A Loop with an Incrementing Counter'), __ '@subsection A Loop with an Incrementing Counter'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection An Argument as the Value of a Variable or List'), __ '@subsection An Argument as the Value of a Variable or List'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection An Example: @code{print-elements-of-list}'), __ '@subsection An Example: @code{print-elements-of-list}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection An Interactive @code{multiply-by-seven}'), __ '@subsection An Interactive @code{multiply-by-seven}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Arguments\' Data Types'), __ '@subsection Arguments\' Data Types'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Body of @code{mark-whole-buffer}'), __ '@subsection Body of @code{mark-whole-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Building Robots: Extending the Metaphor'), __ '@subsection Building Robots: Extending the Metaphor'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Byte Compiling'), __ '@subsection Byte Compiling'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Change a Function Definition'), __ '@subsection Change a Function Definition'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Counting'), __ '@subsection Counting'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Counting function definitions'), __ '@subsection Counting function definitions'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Error Message for a Symbol Without a Function'), __ '@subsection Error Message for a Symbol Without a Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Error Message for a Symbol Without a Value'), __ '@subsection Error Message for a Symbol Without a Value'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Evaluating Inner Lists'), __ '@subsection Evaluating Inner Lists'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Find the Length of a List: @code{length}'), __ '@subsection Find the Length of a List: @code{length}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection GNU Emacs Helps You Type Lists'), __ '@subsection GNU Emacs Helps You Type Lists'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Lisp Atoms'), __ '@subsection Lisp Atoms'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Lisp macro'), __ '@subsection Lisp macro'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Loop with a Decrementing Counter'), __ '@subsection Loop with a Decrementing Counter'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Making a List of Files'), __ '@subsection Making a List of Files'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection New Body for @code{insert-buffer}'), __ '@subsection New Body for @code{insert-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection No Deferment Solution'), __ '@subsection No Deferment Solution'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Optional Arguments'), __ '@subsection Optional Arguments'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Recursion Example Using @code{cond}'), __ '@subsection Recursion Example Using @code{cond}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Recursion in Place of a Counter'), __ '@subsection Recursion in Place of a Counter'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Recursion with a List'), __ '@subsection Recursion with a List'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Recursion without Deferments'), __ '@subsection Recursion without Deferments'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Recursive Patterns'), __ '@subsection Recursive Patterns'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Sample @code{let} Expression'), __ '@subsection Sample @code{let} Expression'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Sorting Lists'), __ '@subsection Sorting Lists'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Summing up @code{zap-to-char}'), __ '@subsection Summing up @code{zap-to-char}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Template for a @code{save-excursion} Expression'), __ '@subsection Template for a @code{save-excursion} Expression'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{append-to-buffer} Interactive Expression'), __ '@subsection The @code{append-to-buffer} Interactive Expression'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{append} Function'), __ '@subsection The @code{append} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{interactive} Expression'), __ '@subsection The @code{interactive} Expression'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{let} Expression in @code{insert-buffer}'), __ '@subsection The @code{let} Expression in @code{insert-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{message} Function'), __ '@subsection The @code{message} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{or} in the Body'), __ '@subsection The @code{or} in the Body'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{progn} Special Form'), __ '@subsection The @code{progn} Special Form'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{search-forward} Function'), __ '@subsection The @code{search-forward} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The @code{type-of-animal} Function in Detail'), __ '@subsection The @code{type-of-animal} Function in Detail'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Body of @code{append-to-buffer}'), __ '@subsection The Body of @code{append-to-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Body of @code{copy-region-as-kill}'), __ '@subsection The Body of @code{copy-region-as-kill}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Body of @code{zap-to-char}'), __ '@subsection The Body of @code{zap-to-char}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Body of the @code{insert-buffer} Function'), __ '@subsection The Body of the @code{insert-buffer} Function'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Complete @code{beginning-of-buffer}'), __ '@subsection The Complete @code{beginning-of-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Interactive Expression in @code{insert-buffer}'), __ '@subsection The Interactive Expression in @code{insert-buffer}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Parts of a @code{let} Expression'), __ '@subsection The Parts of a @code{let} Expression'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Parts of a Recursive Definition'), __ '@subsection The Parts of a Recursive Definition'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection The Whitespace Bug in @code{@value{COUNT-WORDS}}'), __ '@subsection The Whitespace Bug in @code{@value{COUNT-WORDS}}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Uninitialized Variables in a @code{let} Statement'), __ '@subsection Uninitialized Variables in a @code{let} Statement'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Using @code{setq}'), __ '@subsection Using @code{setq}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Using @code{set}'), __ '@subsection Using @code{set}'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Using the Wrong Type Object as an Argument'), __ '@subsection Using the Wrong Type Object as an Argument'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Variable Number of Arguments'), __ '@subsection Variable Number of Arguments'); s/$en/$ja/;
	($en, $ja) = (quotemeta('@subsection Whitespace in Lists'), __ '@subsection Whitespace in Lists'); s/$en/$ja/;
	print;
}
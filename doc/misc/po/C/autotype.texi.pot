# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-09-22 12:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: settitle
#: ../../autotype.texi:7
#, no-wrap
msgid "Features for Automatic Typing"
msgstr ""

#. type: include
#: ../../autotype.texi:8
#, no-wrap
msgid "docstyle.texi"
msgstr ""

#. type: copying
#: ../../autotype.texi:16
msgid ""
"Copyright @copyright{} 1994--1995, 1999, 2001--2021 Free Software "
"Foundation, Inc."
msgstr ""

#. type: quotation
#: ../../autotype.texi:24
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.3 or any later "
"version published by the Free Software Foundation; with no Invariant "
"Sections, with the Front-Cover Texts being ``A GNU Manual'', and with the "
"Back-Cover Texts as in (a) below.  A copy of the license is included in the "
"section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: quotation
#: ../../autotype.texi:27
msgid ""
"(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify "
"this GNU manual.''"
msgstr ""

#. type: dircategory
#: ../../autotype.texi:30
#, no-wrap
msgid "Emacs misc features"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:34
msgid "Autotype: (autotype)"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:34
msgid "Convenient features for text that you enter frequently in Emacs."
msgstr ""

#. type: top
#: ../../autotype.texi:39 ../../autotype.texi:54
#, no-wrap
msgid "Autotyping"
msgstr ""

#. type: center
#: ../../autotype.texi:41
#, no-wrap
msgid "Convenient features for text that you enter frequently in Emacs"
msgstr ""

#. type: center
#: ../../autotype.texi:43
#, no-wrap
msgid "Daniel Pfeiffer"
msgstr ""

#. type: center
#: ../../autotype.texi:44
#, no-wrap
msgid "additions by Dave Love"
msgstr ""

#. type: node
#: ../../autotype.texi:53
#, no-wrap
msgid "Top"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:62
msgid ""
"Under certain circumstances you will find yourself typing similar things "
"over and over again.  This is especially true of form letters and "
"programming language constructs.  Project-specific header comments, "
"flow-control constructs or magic numbers are essentially the same every "
"time.  Emacs has various features for doing tedious and repetitive typing "
"chores for you in addition to the Abbrev features (@pxref{Abbrevs,,, emacs, "
"The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:67
msgid ""
"One solution is using skeletons, flexible rules that say what to insert, and "
"how to do it.  Various programming language modes offer some ready-to-use "
"skeletons, and you can adapt them to suit your needs or taste, or define new "
"ones."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:75
msgid ""
"Another feature is automatic insertion of what you want into empty files, "
"depending on the file-name or the mode as appropriate.  You can have a file "
"or a skeleton inserted, or you can call a function.  Then there is the "
"possibility to have Un*x interpreter scripts automatically take on a magic "
"number and be executable as soon as they are saved.  Or you can have a "
"copyright notice's year updated, if necessary, every time you save a file.  "
"Similarly for time stamps in the file."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:80
msgid ""
"URLs can be inserted based on a word at point.  Flexible templates can be "
"defined for inserting and navigating between text more generally.  A sort of "
"meta-expansion facility can be used to try a set of alternative completions "
"and expansions of text at point."
msgstr ""

#. type: chapter
#: ../../autotype.texi:99 ../../autotype.texi:107 ../../autotype.texi:108
#, no-wrap
msgid "Using Skeletons"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "How to insert a skeleton into your text."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:138
#, no-wrap
msgid "Wrapping Skeletons"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Putting existing text within a skeleton."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:187
#, no-wrap
msgid "Skeletons as Abbrevs"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "An alternative for issuing skeleton commands."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:212
#, no-wrap
msgid "Inserting Pairs"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Typing one character and getting another after point."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:263
#, no-wrap
msgid "Autoinserting"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Filling up empty files as soon as you visit them."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:350
#, no-wrap
msgid "Copyrights"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Inserting and updating copyrights."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:391
#, no-wrap
msgid "Executables"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Turning interpreter scripts into executables."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:432
#, no-wrap
msgid "Timestamps"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Updating dates and times in modified files."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:481
#, no-wrap
msgid "QuickURL"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Inserting URLs based on text at point."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:506
#, no-wrap
msgid "Tempo"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Flexible template insertion."
msgstr ""

#. type: node
#: ../../autotype.texi:99 ../../autotype.texi:536
#, no-wrap
msgid "Hippie Expand"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Expansion of text trying various methods."
msgstr ""

#. type: chapter
#: ../../autotype.texi:99 ../../autotype.texi:561 ../../autotype.texi:562
#, no-wrap
msgid "Skeleton Language"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:99
msgid "Making skeleton commands insert what you want."
msgstr ""

#. type: appendix
#: ../../autotype.texi:104 ../../autotype.texi:659 ../../autotype.texi:660
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:104
msgid "The license for this documentation."
msgstr ""

#. type: menuentry
#: ../../autotype.texi:104
msgid "Concept Index::"
msgstr ""

#. type: menuentry
#: ../../autotype.texi:104
msgid "Command Index::"
msgstr ""

#. type: unnumbered
#: ../../autotype.texi:104 ../../autotype.texi:671 ../../autotype.texi:672
#, no-wrap
msgid "Variable Index"
msgstr ""

#. type: cindex
#: ../../autotype.texi:109
#, no-wrap
msgid "skeletons"
msgstr ""

#. type: cindex
#: ../../autotype.texi:110
#, no-wrap
msgid "using skeletons"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:120
msgid ""
"When you want Emacs to insert a form letter or a typical construct of the "
"programming language you are using, skeletons are a means of accomplishing "
"this.  Normally skeletons each have a command of their own, that, when "
"called, will insert the skeleton.  These commands can be issued in the usual "
"ways (@pxref{Commands,,, emacs, The GNU Emacs Manual}).  Modes that offer "
"various skeletons will often bind these to key-sequences on the @kbd{C-c} "
"prefix, as well as having an @cite{Insert} menu and maybe even predefined "
"abbrevs for them (@pxref{Skeletons as Abbrevs})."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:125
msgid ""
"The simplest kind of skeleton will simply insert some text indented "
"according to the major mode and leave the cursor at a likely place in the "
"middle.  Interactive skeletons may prompt you for a string that will be part "
"of the inserted text."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:135
msgid ""
"Skeletons may ask for input several times.  They even have a looping "
"mechanism in which you will be asked for input as long as you are willing to "
"furnish it.  An example would be multiple ``else if'' conditions.  You can "
"recognize this situation by a prompt ending in @key{RET}, @kbd{C-g} or "
"@kbd{C-h}.  This means that entering an empty string will simply assume that "
"you are finished.  Typing quit on the other hand terminates the loop but "
"also the rest of the skeleton, e.g., an ``else'' clause is skipped.  Only a "
"syntactically necessary termination still gets inserted."
msgstr ""

#. type: chapter
#: ../../autotype.texi:139
#, no-wrap
msgid "Wrapping Skeletons Around Existing Text"
msgstr ""

#. type: cindex
#: ../../autotype.texi:140
#, no-wrap
msgid "wrapping skeletons"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:147
msgid ""
"Often you will find yourself with some code that for whatever reason "
"suddenly becomes conditional.  Or you have written a bit of text and want to "
"put it in the middle of a form letter.  Skeletons provide a means for "
"accomplishing this, and can even, in the case of programming languages, "
"reindent the wrapped code for you."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:152
msgid ""
"Skeleton commands take an optional numeric prefix argument "
"(@pxref{Arguments,,, emacs, The GNU Emacs Manual}).  This is interpreted in "
"two different ways depending on whether the prefix is positive, i.e., "
"forwards oriented, or negative, i.e., backwards oriented."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:158
msgid ""
"A positive prefix means to wrap the skeleton around that many following "
"words.  This is accomplished by putting the words there where the point is "
"normally left after that skeleton is inserted (@pxref{Using Skeletons}).  "
"The point (@pxref{Point,,, emacs, The GNU Emacs Manual}) is left at the next "
"interesting spot in the skeleton instead."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:164
msgid ""
"A negative prefix means to do something similar with that many previously "
"marked interregions (@pxref{Mark,,, emacs, The GNU Emacs Manual}).  In the "
"simplest case, if you type @kbd{M--} just before issuing the skeleton "
"command, that will wrap the skeleton around the current region, just like a "
"positive argument would have wrapped it around a number of words."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:170
msgid ""
"Smaller negative arguments will wrap that many interregions into successive "
"interesting spots within the skeleton, again leaving the point at the next "
"one.  We speak about interregions rather than regions here, because we treat "
"them in the order they appear in the buffer, which coincides with successive "
"regions only if they were marked in order."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:178
msgid ""
"That is, if you marked in alphabetical order the points A B C [] (where [] "
"represents the point) and call a skeleton command with @kbd{M-- 3}, you will "
"wrap the text from A to B into the first interesting spot of the skeleton, "
"the text from B to C into the next one, the text from C to the point into "
"the third one, and leave the point in the fourth one.  If there are less "
"marks in the buffer, or if the skeleton defines less interesting points, the "
"surplus is ignored."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:184
msgid ""
"If, on the other hand, you marked in alphabetical order the points [] A C B, "
"and call a skeleton command with @kbd{M-- 3}, you will wrap the text from "
"point to A, then the text from A to C and finally the text from C to B@.  "
"This is done because the regions overlap and Emacs would be helplessly lost "
"if it tried to follow the order in which you marked these points."
msgstr ""

#. type: chapter
#: ../../autotype.texi:188
#, no-wrap
msgid "Skeletons as Abbrev Expansions"
msgstr ""

#. type: cindex
#: ../../autotype.texi:189
#, no-wrap
msgid "skeletons as abbrevs"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:194
msgid ""
"Rather than use a key binding for every skeleton command, you can also "
"define an abbreviation (@pxref{Defining Abbrevs,,, emacs, The GNU Emacs "
"Manual}) that will expand (@pxref{Expanding Abbrevs,,, emacs, The GNU Emacs "
"Manual}) into the skeleton."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:200
msgid ""
"Say you want @samp{ifst} to be an abbreviation for the C language if "
"statement.  You will tell Emacs that @samp{ifst} expands to the empty string "
"and then calls the skeleton command.  In Emacs Lisp you can say something "
"like @code{(define-abbrev c-mode-abbrev-table \"ifst\" \"\" 'c-if)}.  Or you "
"can edit the output from @kbd{M-x list-abbrevs} to make it look like this:"
msgstr ""

#. type: example
#: ../../autotype.texi:204
#, no-wrap
msgid ""
"(c-mode-abbrev-table)\n"
"\"ifst\"           0    \"\"         c-if\n"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:209
msgid ""
"(Some blank lines of no semantic significance, and other abbrev tables, have "
"been omitted.)"
msgstr ""

#. type: chapter
#: ../../autotype.texi:213
#, no-wrap
msgid "Inserting Matching Pairs of Characters"
msgstr ""

#. type: cindex
#: ../../autotype.texi:214
#, no-wrap
msgid "inserting pairs"
msgstr ""

#. type: cindex
#: ../../autotype.texi:215
#, no-wrap
msgid "pairs"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:224
msgid ""
"Various characters usually appear in pairs.  When, for example, you insert "
"an open parenthesis, no matter whether you are programming or writing prose, "
"you will surely enter a closing one later.  By entering both at the same "
"time and leaving the cursor in between, Emacs can guarantee you that such "
"parentheses are always balanced.  And if you have a non-qwerty keyboard, "
"where typing some of the stranger programming language symbols makes you "
"bend your fingers backwards, this can be quite relieving too."
msgstr ""

#. type: findex
#: ../../autotype.texi:225
#, no-wrap
msgid "skeleton-pair-insert-maybe"
msgstr ""

#. type: vindex
#: ../../autotype.texi:226
#, no-wrap
msgid "skeleton-pair"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:235
msgid ""
"This is done by binding the first key (@pxref{Rebinding,,, emacs, The GNU "
"Emacs Manual}) of the pair to @code{skeleton-pair-insert-maybe} instead of "
"@code{self-insert-command}.  The ``maybe'' comes from the fact that this "
"at-first surprising behavior is initially turned off.  To enable it, you "
"must set @code{skeleton-pair} to some non-@code{nil} value.  And even then, "
"a positive argument (@pxref{Arguments,,, emacs, The GNU Emacs Manual}) will "
"make this key behave like a self-inserting key (@pxref{Inserting Text,,, "
"emacs, The GNU Emacs Manual})."
msgstr ""

#. type: vindex
#: ../../autotype.texi:236
#, no-wrap
msgid "skeleton-pair-on-word"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:241
msgid ""
"While this breaks with the stated intention of always balancing pairs, it "
"turns out that one often doesn't want pairing to occur, when the following "
"character is part of a word.  If you want pairing to occur even then, set "
"@code{skeleton-pair-on-word} to some non-@code{nil} value."
msgstr ""

#. type: vindex
#: ../../autotype.texi:242
#, no-wrap
msgid "skeleton-pair-alist"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:253
msgid ""
"Pairing is possible for all visible characters.  By default the parenthesis "
"@samp{(}, the square bracket @samp{[}, the brace @samp{@{} and the pointed "
"bracket @samp{<} all pair with the symmetrical character, and the grave "
"accent @samp{`} pairs with the apostrophe @samp{'}.  All other characters "
"pair themselves.  This behavior can be modified by the variable "
"@code{skeleton-pair-alist}.  This is in fact an alist of skeletons "
"(@pxref{Skeleton Language}), with the first part of each sublist matching "
"the typed character.  This is the position of the interactor, but since "
"pairs don't need the @code{str} element, this is ignored."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:260
msgid ""
"Some modes have bound the command @code{skeleton-pair-insert-maybe} to "
"relevant keys.  These modes also configure the pairs as appropriate.  For "
"example, when typing @TeX{} input, you'd expect the grave accent (@samp{`}) "
"to pair with the apostrophe (@samp{'}), while in Shell script mode it must "
"pair to itself.  They can also inhibit pairing in certain contexts.  For "
"example an escaped character stands for itself."
msgstr ""

#. type: chapter
#: ../../autotype.texi:264
#, no-wrap
msgid "Autoinserting Text in Empty Files"
msgstr ""

#. type: cindex
#: ../../autotype.texi:265
#, no-wrap
msgid "autoinserting"
msgstr ""

#. type: vindex
#: ../../autotype.texi:267 ../../autotype.texi:320
#, no-wrap
msgid "auto-insert"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:274
msgid ""
"@kbd{M-x auto-insert} will put some predefined text at the beginning of the "
"buffer.  The main application for this function, as its name suggests, is to "
"have it be called automatically every time an empty, and only an empty file "
"is visited.  This is accomplished by putting @code{(auto-insert-mode t)} "
"into your init file (@pxref{Init File,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: vindex
#: ../../autotype.texi:275
#, no-wrap
msgid "auto-insert-alist"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:284
msgid ""
"What gets inserted, if anything, is determined by the variable "
"@code{auto-insert-alist}.  The @sc{car}s of this list are each either a mode "
"name, making an element applicable when a buffer is in that mode.  Or they "
"can be a string, which is a regexp matched against the buffer's file name.  "
"In that way different kinds of files that have the same mode in Emacs can be "
"distinguished.  The @sc{car}s may also be cons cells consisting of mode name "
"or regexp as above and an additional descriptive string."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:290
msgid ""
"When a matching element is found, the @sc{cdr} says what to do.  It may be a "
"string, which is a file name, whose contents are to be inserted, if that "
"file is found in the directory @code{auto-insert-directory} or under a "
"absolute file name.  Or it can be a skeleton (@pxref{Skeleton Language}) to "
"be inserted."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:297
msgid ""
"It can also be a function, which allows doing various things.  The function "
"can simply insert some text, indeed, it can be skeleton command "
"(@pxref{Using Skeletons}).  It can be a lambda function which will for "
"example conditionally call another function.  Or it can even reset the mode "
"for the buffer. If you want to perform several such actions in order, you "
"use a vector, i.e., several of the above elements between square brackets "
"(@samp{[@r{@dots{}}]})."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:301
msgid ""
"By default C and C++ headers insert a definition of a symbol derived from "
"the filename to prevent multiple inclusions.  C and C++ sources insert an "
"include of the header.  Makefiles insert the file makefile.inc if it exists."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:305
msgid ""
"TeX and bibTeX mode files insert the file tex-insert.tex if it exists, while "
"LaTeX mode files insert a typical @code{\\documentclass} frame.  HTML files "
"insert a skeleton with the usual frame."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:313
msgid ""
"Ada mode files call the Ada header skeleton command.  Emacs Lisp source "
"files insert the usual header, with a copyright of your environment variable "
"@env{$ORGANIZATION} or else the name of the current user, and prompt for "
"valid keywords describing the contents.  Files in a @file{bin} directory for "
"which Emacs could determine no specialized mode (@pxref{Choosing Modes,,, "
"emacs, The GNU Emacs Manual}) are set to Shell script mode."
msgstr ""

#. type: findex
#: ../../autotype.texi:314
#, no-wrap
msgid "define-auto-insert"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:319
msgid ""
"In Lisp (@pxref{Init File,,, emacs, The GNU Emacs Manual}) you can use the "
"function @code{define-auto-insert} to add to or modify "
"@code{auto-insert-alist}.  See its documentation with @kbd{C-h f "
"define-auto-insert}."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:323
msgid ""
"The variable @code{auto-insert} says what to do when @code{auto-insert} is "
"called non-interactively, e.g., when a newly found file is empty (see "
"above):"
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:324 ../../autotype.texi:415
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: ../../autotype.texi:326 ../../autotype.texi:417
msgid "Do nothing."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:326 ../../autotype.texi:417
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: ../../autotype.texi:329
msgid ""
"Insert something if possible, i.e., there is a matching entry in "
"@code{auto-insert-alist}."
msgstr ""

#. type: item
#: ../../autotype.texi:329 ../../autotype.texi:419
#, no-wrap
msgid "other"
msgstr ""

#. type: table
#: ../../autotype.texi:331
msgid "Insert something if possible, but mark as unmodified."
msgstr ""

#. type: vindex
#: ../../autotype.texi:333
#, no-wrap
msgid "auto-insert-query"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:340
msgid ""
"The variable @code{auto-insert-query} controls whether to ask about "
"inserting something.  When this is @code{nil}, inserting is only done with "
"@kbd{M-x auto-insert}.  When this is @code{function}, you are queried "
"whenever @code{auto-insert} is called as a function, such as when Emacs "
"visits an empty file and you have set the above-mentioned hook.  Otherwise "
"you are always queried."
msgstr ""

#. type: vindex
#: ../../autotype.texi:341
#, no-wrap
msgid "auto-insert-prompt"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:347
msgid ""
"When querying, the variable @code{auto-insert-prompt}'s value is used as a "
"prompt for a y-or-n-type question.  If this includes a @samp{%s} construct, "
"that is replaced by what caused the insertion rule to be chosen.  This is "
"either a descriptive text, the mode-name of the buffer or the regular "
"expression that matched the filename."
msgstr ""

#. type: chapter
#: ../../autotype.texi:351
#, no-wrap
msgid "Inserting and Updating Copyrights"
msgstr ""

#. type: cindex
#: ../../autotype.texi:352
#, no-wrap
msgid "copyrights"
msgstr ""

#. type: findex
#: ../../autotype.texi:354
#, no-wrap
msgid "copyright"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:359
msgid ""
"@kbd{M-x copyright} is a skeleton inserting command, that adds a copyright "
"notice at the point.  The ``by'' part is taken from your environment "
"variable @env{$ORGANIZATION} or if that isn't set you are prompted for it.  "
"If the buffer has a comment syntax (@pxref{Comments,,, emacs, The GNU Emacs "
"Manual}), this is inserted as a comment."
msgstr ""

#. type: findex
#: ../../autotype.texi:360
#, no-wrap
msgid "copyright-update"
msgstr ""

#. type: vindex
#: ../../autotype.texi:361
#, no-wrap
msgid "copyright-limit"
msgstr ""

#. type: vindex
#: ../../autotype.texi:362
#, no-wrap
msgid "copyright-current-year"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:372
msgid ""
"@kbd{M-x copyright-update} looks for a copyright notice in the first "
"@code{copyright-limit} characters of the buffer and updates it when "
"necessary.  The current year (variable @code{copyright-current-year}) is "
"added to the existing ones, in the same format as the preceding year, i.e., "
"1994, '94 or 94.  If a dash-separated year list up to last year is found, "
"that is extended to current year, else the year is added separated by a "
"comma.  Or it replaces them when this is called with a prefix argument.  If "
"a header referring to a wrong version of the GNU General Public License "
"(@pxref{Copying,,, emacs, The GNU Emacs Manual}) is found, that is updated "
"too."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:380
msgid ""
"An interesting application for this function is to have it be called "
"automatically every time a file is saved.  This is accomplished by putting "
"@code{(add-hook 'before-save-hook 'copyright-update)} into your "
"@file{~/.emacs} file (@pxref{Init File,,, emacs, The GNU Emacs Manual}).  "
"Alternative, you can do @kbd{M-x customize-variable @key{RET} "
"before-save-hook @key{RET}}.  @code{copyright-update} is conveniently listed "
"as an option in the customization buffer."
msgstr ""

#. type: vindex
#: ../../autotype.texi:381
#, no-wrap
msgid "copyright-query"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:388
msgid ""
"The variable @code{copyright-query} controls whether to update the copyright "
"or whether to ask about it.  When this is @code{nil} updating is only done "
"with @kbd{M-x copyright-update}.  When this is @code{function} you are "
"queried whenever @code{copyright-update} is called as a function, such as in "
"the @code{before-save-hook} feature mentioned above.  Otherwise you are "
"always queried."
msgstr ""

#. type: chapter
#: ../../autotype.texi:392
#, no-wrap
msgid "Making Interpreter Scripts Executable"
msgstr ""

#. type: cindex
#: ../../autotype.texi:393
#, no-wrap
msgid "executables"
msgstr ""

#. type: vindex
#: ../../autotype.texi:395
#, no-wrap
msgid "executable-prefix"
msgstr ""

#. type: vindex
#: ../../autotype.texi:396
#, no-wrap
msgid "executable-chmod"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:404
msgid ""
"Various interpreter modes such as Shell script mode or AWK mode will "
"automatically insert or update the buffer's magic number, a special comment "
"on the first line that makes the @code{exec} systemcall know how to execute "
"the script.  To this end the script is automatically made executable upon "
"saving, with @code{executable-chmod} as argument to the system @code{chmod} "
"command.  The magic number is prefixed by the value of "
"@code{executable-prefix}."
msgstr ""

#. type: vindex
#: ../../autotype.texi:405
#, no-wrap
msgid "executable-magicless-file-regexp"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:409
msgid ""
"Any file whose name matches @code{executable-magicless-file-regexp} is not "
"furnished with a magic number, nor is it made executable.  This is mainly "
"intended for resource files, which are only meant to be read in."
msgstr ""

#. type: vindex
#: ../../autotype.texi:410
#, no-wrap
msgid "executable-insert"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:414
msgid ""
"The variable @code{executable-insert} says what to do when "
"@code{executable-set-magic} is called non-interactively, e.g., when file has "
"no or the wrong magic number:"
msgstr ""

#. type: table
#: ../../autotype.texi:419
msgid "Insert or update magic number."
msgstr ""

#. type: table
#: ../../autotype.texi:421
msgid "Insert or update magic number, but mark as unmodified."
msgstr ""

#. type: findex
#: ../../autotype.texi:423
#, no-wrap
msgid "executable-set-magic"
msgstr ""

#. type: vindex
#: ../../autotype.texi:424
#, no-wrap
msgid "executable-query"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:431
msgid ""
"The variable @code{executable-query} controls whether to ask about inserting "
"or updating the magic number.  When this is @code{nil} updating is only done "
"with @kbd{M-x executable-set-magic}.  When this is @code{function} you are "
"queried whenever @code{executable-set-magic} is called as a function, such "
"as when Emacs puts a buffer in Shell script mode.  Otherwise you are always "
"queried."
msgstr ""

#. type: chapter
#: ../../autotype.texi:433
#, no-wrap
msgid "Maintaining Timestamps in Modified Files"
msgstr ""

#. type: cindex
#: ../../autotype.texi:434
#, no-wrap
msgid "timestamps"
msgstr ""

#. type: findex
#: ../../autotype.texi:436
#, no-wrap
msgid "time-stamp"
msgstr ""

#. type: vindex
#: ../../autotype.texi:437
#, no-wrap
msgid "before-save-hook"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:444
msgid ""
"The @code{time-stamp} command can be used to update automatically a template "
"in a file with a new time stamp every time you save the file.  Customize the "
"hook @code{before-save-hook} to add the function @code{time-stamp} to "
"arrange this.  It you use Custom to do this, then @code{time-stamp} is "
"conveniently listed as an option in the customization buffer."
msgstr ""

#. type: vindex
#: ../../autotype.texi:445
#, no-wrap
msgid "time-stamp-active"
msgstr ""

#. type: findex
#: ../../autotype.texi:446
#, no-wrap
msgid "time-stamp-toggle-active"
msgstr ""

#. type: vindex
#: ../../autotype.texi:447
#, no-wrap
msgid "time-stamp-format"
msgstr ""

#. type: vindex
#: ../../autotype.texi:448
#, no-wrap
msgid "time-stamp-time-zone"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:454
msgid ""
"The time stamp is updated only if the customizable variable "
"@code{time-stamp-active} is on, which it is by default; the command "
"@code{time-stamp-toggle-active} can be used to toggle it.  The format of the "
"time stamp is set by the customizable variables @code{time-stamp-format} and "
"@code{time-stamp-time-zone}."
msgstr ""

#. type: vindex
#: ../../autotype.texi:455
#, no-wrap
msgid "time-stamp-line-limit"
msgstr ""

#. type: vindex
#: ../../autotype.texi:456
#, no-wrap
msgid "time-stamp-start"
msgstr ""

#. type: vindex
#: ../../autotype.texi:457
#, no-wrap
msgid "time-stamp-end"
msgstr ""

#. type: vindex
#: ../../autotype.texi:458
#, no-wrap
msgid "time-stamp-count"
msgstr ""

#. type: vindex
#: ../../autotype.texi:459
#, no-wrap
msgid "time-stamp-inserts-lines"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:466
msgid ""
"The variables @code{time-stamp-line-limit}, @code{time-stamp-start}, "
"@code{time-stamp-end}, @code{time-stamp-count}, and "
"@code{time-stamp-inserts-lines} control finding the template.  Do not change "
"these in your init file or you will be incompatible with other people's "
"files.  If you must change them, do so only in the local variables section "
"of the file itself."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:469
msgid ""
"Normally the template must appear in the first 8 lines of a file and look "
"like one of the following:"
msgstr ""

#. type: example
#: ../../autotype.texi:473
#, no-wrap
msgid ""
"Time-stamp: <>\n"
"Time-stamp: \" \"\n"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:476
msgid "The time stamp is written between the brackets or quotes:"
msgstr ""

#. type: example
#: ../../autotype.texi:479
#, no-wrap
msgid "Time-stamp: <1998-02-18 10:20:51 gildea>\n"
msgstr ""

#. type: chapter
#: ../../autotype.texi:482
#, no-wrap
msgid "QuickURL: Inserting URLs Based on Text at Point"
msgstr ""

#. type: vindex
#: ../../autotype.texi:484
#, no-wrap
msgid "quickurl-url-file"
msgstr ""

#. type: findex
#: ../../autotype.texi:485
#, no-wrap
msgid "quickurl"
msgstr ""

#. type: cindex
#: ../../autotype.texi:486
#, no-wrap
msgid "URLs"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:494
msgid ""
"@kbd{M-x quickurl} can be used to insert a URL into a buffer based on the "
"text at point.  The URLs are stored in an external file defined by the "
"variable @code{quickurl-url-file} as a list of either cons cells of the form "
"@code{(@var{key} . @var{URL})} or lists of the form @code{(@var{key} "
"@var{URL} @var{comment})}.  These specify that @kbd{M-x quickurl} should "
"insert @var{URL} if the word @var{key} is at point, for example:"
msgstr ""

#. type: example
#: ../../autotype.texi:498
#, no-wrap
msgid ""
"((\"FSF\"      \"https://www.fsf.org/\" \"The Free Software Foundation\")\n"
" (\"emacs\"  . \"https://www.gnu.org/software/emacs/\"))\n"
msgstr ""

#. type: findex
#: ../../autotype.texi:500
#, no-wrap
msgid "quickurl-add-url"
msgstr ""

#. type: findex
#: ../../autotype.texi:501
#, no-wrap
msgid "quickurl-list"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:505
msgid ""
"@kbd{M-x quickurl-add-url} can be used to add a new @var{key}/@var{URL} "
"pair.  @kbd{M-x quickurl-list} provides interactive editing of the URL list."
msgstr ""

#. type: chapter
#: ../../autotype.texi:507
#, no-wrap
msgid "Tempo: Flexible Template Insertion"
msgstr ""

#. type: cindex
#: ../../autotype.texi:509
#, no-wrap
msgid "templates"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:514
msgid ""
"The Tempo package provides a simple way to define powerful templates, or "
"macros, if you wish.  It is mainly intended for, but not limited to, "
"programmers to be used for creating shortcuts for editing certain kinds of "
"documents."
msgstr ""

#. type: findex
#: ../../autotype.texi:515
#, no-wrap
msgid "tempo-backward-mark"
msgstr ""

#. type: findex
#: ../../autotype.texi:516
#, no-wrap
msgid "tempo-forward-mark"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:522
msgid ""
"A template is defined as a list of items to be inserted in the current "
"buffer at point.  Some can be simple strings, while others can control "
"formatting or define special points of interest in the inserted text.  "
"@kbd{M-x tempo-backward-mark} and @kbd{M-x tempo-forward-mark} can be used "
"to jump between such points."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:527
msgid ""
"More flexible templates can be created by including Lisp symbols, which will "
"be evaluated as variables, or lists, which will be evaluated as Lisp "
"expressions.  Automatic completion of specified tags to expanded templates "
"can be provided."
msgstr ""

#. type: findex
#: ../../autotype.texi:528
#, no-wrap
msgid "tempo-define-template"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:532
msgid ""
"See the documentation for @code{tempo-define-template} for the different "
"items that can be used to define a tempo template with a command for "
"inserting it."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:535
msgid ""
"See the commentary in @file{tempo.el} for more information on using the "
"Tempo package."
msgstr ""

#. type: chapter
#: ../../autotype.texi:537
#, no-wrap
msgid "``Hippie'' Expansion"
msgstr ""

#. type: findex
#: ../../autotype.texi:539
#, no-wrap
msgid "hippie-expand"
msgstr ""

#. type: kindex
#: ../../autotype.texi:540
#, no-wrap
msgid "M-/"
msgstr ""

#. type: vindex
#: ../../autotype.texi:541
#, no-wrap
msgid "hippie-expand-try-functions-list"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:545
msgid ""
"@kbd{M-x hippie-expand} is a single command providing a variety of "
"completions and expansions.  Called repeatedly, it tries all possible "
"completions in succession."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:553
msgid ""
"Which ones to try, and in which order, is determined by the contents of the "
"customizable option @code{hippie-expand-try-functions-list}.  Much "
"customization of the expansion behavior can be made by changing the order "
"of, removing, or inserting new functions in this list.  Given a positive "
"numeric argument, @kbd{M-x hippie-expand} jumps directly that number of "
"functions forward in this list.  Given some other argument (a negative "
"argument or just @kbd{C-u}) it undoes the tried completion."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:556
msgid ""
"See the commentary in @file{hippie-exp.el} for more information on the "
"possibilities."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:560
msgid ""
"Typically you would bind @code{hippie-expand} to @kbd{M-/} with "
"@code{dabbrev-expand}, the standard binding of @kbd{M-/}, providing one of "
"the expansion possibilities."
msgstr ""

#. type: cindex
#: ../../autotype.texi:563
#, no-wrap
msgid "skeleton language"
msgstr ""

#. type: findex
#: ../../autotype.texi:565
#, no-wrap
msgid "skeleton-insert"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:570
msgid ""
"Skeletons are a shorthand extension to the Lisp language, where various "
"atoms directly perform either actions on the current buffer or rudimentary "
"flow control mechanisms.  Skeletons are interpreted by the function "
"@code{skeleton-insert}."
msgstr ""

#. type: Plain text
#: ../../autotype.texi:576
msgid ""
"A skeleton is a list starting with an interactor, which is usually a "
"prompt-string, or @code{nil} when not needed, but can also be a Lisp "
"expression for complex read functions or for returning some calculated "
"value.  The rest of the list are any number of elements as described in the "
"following table:"
msgstr ""

#. type: item
#: ../../autotype.texi:578
#, no-wrap
msgid "@code{\"@var{string}\"}, @code{?@var{c}}, @code{?\\@var{c}}"
msgstr ""

#. type: vindex
#: ../../autotype.texi:579
#, no-wrap
msgid "skeleton-transformation"
msgstr ""

#. type: table
#: ../../autotype.texi:582
msgid ""
"Insert string or character.  Literal strings and characters are passed "
"through @code{skeleton-transformation} when that is non-@code{nil}."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:582
#, no-wrap
msgid "?\\n"
msgstr ""

#. type: table
#: ../../autotype.texi:590
msgid ""
"Insert a newline and align under current line, but not if this is the last "
"element of a skeleton and the newline would be inserted at end of line, or "
"this is the first element and the newline would be inserted at beginning of "
"line.  Use newline character @code{?\\n} to prevent alignment.  Use "
"@code{\"\\n\"} as the first or last string element of a skeleton to insert a "
"newline unconditionally."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:590
#, no-wrap
msgid "_"
msgstr ""

#. type: table
#: ../../autotype.texi:594
msgid ""
"Interesting point.  When wrapping skeletons around successive regions, they "
"are put at these places.  Point is left at first @code{_} where nothing is "
"wrapped."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:594
#, no-wrap
msgid "-"
msgstr ""

#. type: table
#: ../../autotype.texi:597
msgid ""
"Interesting point with no inter-region interaction; overrides interesting "
"point set by @code{_}."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:597
#, no-wrap
msgid ">"
msgstr ""

#. type: table
#: ../../autotype.texi:600
msgid ""
"Indent line according to major mode.  When following element is @code{_}, "
"and there is an interregion that will be wrapped here, indent that "
"interregion."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:600
#, no-wrap
msgid "&"
msgstr ""

#. type: table
#: ../../autotype.texi:603
msgid ""
"Logical and.  If preceding element moved point, i.e., usually inserted "
"something, do following element."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:603
#, no-wrap
msgid "|"
msgstr ""

#. type: table
#: ../../autotype.texi:606
msgid ""
"Logical xor.  If preceding element didn't move point, i.e., usually inserted "
"nothing, do following element."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:606
#, no-wrap
msgid "@@"
msgstr ""

#. type: table
#: ../../autotype.texi:608
msgid "Add position to @code{skeleton-positions}."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:608
#, no-wrap
msgid "-@var{number}"
msgstr ""

#. type: table
#: ../../autotype.texi:611
msgid ""
"Delete preceding number characters.  Depends on value of "
"@code{skeleton-untabify}."
msgstr ""

#. type: item
#: ../../autotype.texi:611
#, no-wrap
msgid "@code{()} or @code{nil}"
msgstr ""

#. type: table
#: ../../autotype.texi:613
msgid "Ignored."
msgstr ""

#. type: var{#1}
#: ../../autotype.texi:613
#, no-wrap
msgid "lisp-expression"
msgstr ""

#. type: table
#: ../../autotype.texi:615
msgid "Evaluated, and the return value is again interpreted as a skeleton element."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:615
#, no-wrap
msgid "str"
msgstr ""

#. type: table
#: ../../autotype.texi:620
msgid ""
"A special variable that, when evaluated the first time, usually prompts for "
"input according to the skeleton's interactor.  It is then set to the return "
"value resulting from the interactor.  Each subskeleton has its local copy of "
"this variable."
msgstr ""

#. type: item
#: ../../autotype.texi:620
#, no-wrap
msgid "@code{v1}, @code{v2}"
msgstr ""

#. type: table
#: ../../autotype.texi:622
msgid "Skeleton-local user variables."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:622
#, no-wrap
msgid "'@var{expression}"
msgstr ""

#. type: table
#: ../../autotype.texi:625
msgid ""
"Evaluate following Lisp expression for its side-effect, but prevent it from "
"being interpreted as a skeleton element."
msgstr ""

#. type: var{#1}
#: ../../autotype.texi:625
#, no-wrap
msgid "skeleton"
msgstr ""

#. type: table
#: ../../autotype.texi:630
msgid ""
"Subskeletons are inserted recursively, not once, but as often as the user "
"enters something at the subskeletons interactor.  Thus there must be a "
"@code{str} in the subskeleton.  They can also be used non-interactively, "
"when prompt is a lisp-expression that returns successive list-elements."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:630
#, no-wrap
msgid "resume:"
msgstr ""

#. type: table
#: ../../autotype.texi:633
msgid ""
"Ignored.  Execution resumes here if the user quits during skeleton "
"interpretation."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:633
#, no-wrap
msgid "help"
msgstr ""

#. type: table
#: ../../autotype.texi:635
msgid "Help form during interaction with the user or @code{nil}."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:635
#, no-wrap
msgid "input"
msgstr ""

#. type: table
#: ../../autotype.texi:637
msgid "Initial input (a string or a cons with index) while reading the input."
msgstr ""

#. type: code{#1}
#: ../../autotype.texi:637
#, no-wrap
msgid "quit"
msgstr ""

#. type: table
#: ../../autotype.texi:640
msgid ""
"A constant which is non-@code{nil} when the @code{resume:} section was "
"entered because the user quit."
msgstr ""

#. type: findex
#: ../../autotype.texi:642
#, no-wrap
msgid "skeleton-further-elements"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:649
msgid ""
"Some modes also use other skeleton elements they themselves defined.  For "
"example in shell script mode's skeletons you will find @code{<} which does a "
"rigid indentation backwards, or in CC mode's skeletons you find the "
"self-inserting elements @code{@{} and @code{@}}.  These are defined by the "
"buffer-local variable @code{skeleton-further-elements} which is a list of "
"variables bound while interpreting a skeleton."
msgstr ""

#. type: findex
#: ../../autotype.texi:650
#, no-wrap
msgid "define-skeleton"
msgstr ""

#. type: Plain text
#: ../../autotype.texi:657
msgid ""
"The macro @code{define-skeleton} defines a command for interpreting a "
"skeleton.  The first argument is the command name, the second is a "
"documentation string, and the rest is an interactor and any number of "
"skeleton elements together forming a skeleton.  This skeleton is assigned to "
"a variable of the same name as the command and can thus be overridden from "
"your @file{~/.emacs} file (@pxref{Init File,,, emacs, The GNU Emacs "
"Manual})."
msgstr ""

#. type: include
#: ../../autotype.texi:661
#, no-wrap
msgid "doclicense.texi"
msgstr ""

#. type: unnumbered
#: ../../autotype.texi:663 ../../autotype.texi:664
#, no-wrap
msgid "Concept Index"
msgstr ""

#. type: unnumbered
#: ../../autotype.texi:667 ../../autotype.texi:668
#, no-wrap
msgid "Command Index"
msgstr ""

# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-16 23:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: ../../../../../doc/lispref/text.texi:5 ../../../../../doc/lispref/text.texi:6
#, no-wrap
msgid "Text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:7
#, no-wrap
msgid "text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:14
msgid ""
"This chapter describes the functions that deal with the text in a buffer.  "
"Most examine, insert, or delete text in the current buffer, often operating "
"at point or on text adjacent to point.  Many are interactive.  All the "
"functions that change the text provide for undoing the changes "
"(@pxref{Undo})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:25
msgid ""
"Many text-related functions operate on a region of text defined by two "
"buffer positions passed in arguments named @var{start} and @var{end}.  These "
"arguments should be either markers (@pxref{Markers}) or numeric character "
"positions (@pxref{Positions}).  The order of these arguments does not "
"matter; it is all right for @var{start} to be the end of the region and "
"@var{end} the beginning.  For example, @code{(delete-region 1 10)} and "
"@code{(delete-region 10 1)} are equivalent.  An @code{args-out-of-range} "
"error is signaled if either @var{start} or @var{end} is outside the "
"accessible portion of the buffer.  In an interactive call, point and the "
"mark are used for these arguments."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:26
#, no-wrap
msgid "buffer contents"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:31
msgid ""
"Throughout this chapter, ``text'' refers to the characters in the buffer, "
"together with their properties (when relevant).  Keep in mind that point is "
"always between two characters, and the cursor appears on the character after "
"point."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:70
#, no-wrap
msgid "Near Point"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Examining text in the vicinity of point."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:168
#, no-wrap
msgid "Buffer Contents"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Examining text in a general fashion."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:341 ../../../../../doc/lispref/text.texi:342
#, no-wrap
msgid "Comparing Text"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Comparing substrings of buffers."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:376
#, no-wrap
msgid "Insertion"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Adding new text to a buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:491
#, no-wrap
msgid "Commands for Insertion"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "User-level commands to insert text."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:582
#, no-wrap
msgid "Deletion"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Removing text from a buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:688
#, no-wrap
msgid "User-Level Deletion"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "User-level commands to delete text."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:849 ../../../../../doc/lispref/text.texi:850
#, no-wrap
msgid "The Kill Ring"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Where removed text sometimes is saved for later use."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1299 ../../../../../doc/lispref/text.texi:1300
#, no-wrap
msgid "Undo"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Undoing changes to the text of a buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1466
#, no-wrap
msgid "Maintaining Undo"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid ""
"How to enable and disable undo information.  How to control how much "
"information is kept."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1541 ../../../../../doc/lispref/text.texi:1542
#, no-wrap
msgid "Filling"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Functions for explicit filling."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1741
#, no-wrap
msgid "Margins"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "How to specify margins for filling commands."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1838
#, no-wrap
msgid "Adaptive Fill"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Adaptive Fill mode chooses a fill prefix from context."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1928 ../../../../../doc/lispref/text.texi:1929
#, no-wrap
msgid "Auto Filling"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "How auto-fill mode is implemented to break lines."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:1974
#, no-wrap
msgid "Sorting"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Functions for sorting parts of the buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:2237
#, no-wrap
msgid "Columns"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Computing horizontal positions, and using them."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:2299 ../../../../../doc/lispref/text.texi:2300
#, no-wrap
msgid "Indentation"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Functions to insert or adjust indentation."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:2681 ../../../../../doc/lispref/text.texi:2682
#, no-wrap
msgid "Case Changes"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Case conversion of parts of the buffer."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:2773 ../../../../../doc/lispref/text.texi:2774
#, no-wrap
msgid "Text Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Assigning Lisp property lists to text characters."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4321
#, no-wrap
msgid "Substitution"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Replacing a given character wherever it appears."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4378 ../../../../../doc/lispref/text.texi:4379
#, no-wrap
msgid "Registers"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid ""
"How registers are implemented.  Accessing the text or position stored in a "
"register."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4485
#, no-wrap
msgid "Transposition"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Swapping two portions of a buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4504
#, no-wrap
msgid "Replacing"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Replacing the text of one buffer with the text of another buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4563
#, no-wrap
msgid "Decompression"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Dealing with compressed data."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4595
#, no-wrap
msgid "Base 64"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Conversion to or from base 64 encoding."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4678 ../../../../../doc/lispref/text.texi:4679
#, no-wrap
msgid "Checksum/Hash"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Computing cryptographic hashes."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4765 ../../../../../doc/lispref/text.texi:4766
#, no-wrap
msgid "GnuTLS Cryptography"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Cryptographic algorithms imported from GnuTLS."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:4959
#, no-wrap
msgid "Parsing HTML/XML"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Parsing HTML and XML."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:5166
#, no-wrap
msgid "Parsing JSON"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Parsing and generating JSON values."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:5293 ../../../../../doc/lispref/text.texi:5296
#, no-wrap
msgid "JSONRPC"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "JSON Remote Procedure Call protocol"
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:5510
#, no-wrap
msgid "Atomic Changes"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Installing several buffer changes atomically."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:68 ../../../../../doc/lispref/text.texi:5613 ../../../../../doc/lispref/text.texi:5614
#, no-wrap
msgid "Change Hooks"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:68
msgid "Supplying functions to be run when text is changed."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:71
#, no-wrap
msgid "Examining Text Near Point"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:72
#, no-wrap
msgid "text near point"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:77
msgid ""
"Many functions are provided to look at the characters around point.  Several "
"simple functions are described here.  See also @code{looking-at} in "
"@ref{Regexp Search}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:80
msgid ""
"In the following four functions, ``beginning'' or ``end'' of buffer refers "
"to the beginning or end of the accessible portion."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:81
#, no-wrap
msgid "char-after &optional position"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:87
msgid ""
"This function returns the character in the current buffer at (i.e., "
"immediately after) position @var{position}.  If @var{position} is out of "
"range for this purpose, either before the beginning of the buffer, or at or "
"beyond the end, then the value is @code{nil}.  The default for "
"@var{position} is point."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:90
msgid ""
"In the following example, assume that the first character in the buffer is "
"@samp{@@}:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:95
#, no-wrap
msgid ""
"(string (char-after 1))\n"
"     @result{} \"@@\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:99
#, no-wrap
msgid "char-before &optional position"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:105
msgid ""
"This function returns the character in the current buffer immediately before "
"position @var{position}.  If @var{position} is out of range for this "
"purpose, either at or before the beginning of the buffer, or beyond the end, "
"then the value is @code{nil}.  The default for @var{position} is point."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:107
#, no-wrap
msgid "following-char"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:111
msgid ""
"This function returns the character following point in the current buffer.  "
"This is similar to @code{(char-after (point))}.  However, if point is at the "
"end of the buffer, then @code{following-char} returns 0."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:116
msgid ""
"Remember that point is always between characters, and the cursor normally "
"appears over the character following point.  Therefore, the character "
"returned by @code{following-char} is the character the cursor is over."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:118
msgid "In this example, point is between the @samp{a} and the @samp{c}."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:125
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:132
#, no-wrap
msgid ""
"(string (preceding-char))\n"
"     @result{} \"a\"\n"
"(string (following-char))\n"
"     @result{} \"c\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:136
#, no-wrap
msgid "preceding-char"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:141
msgid ""
"This function returns the character preceding point in the current buffer.  "
"See above, under @code{following-char}, for an example.  If point is at the "
"beginning of the buffer, @code{preceding-char} returns 0."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:143
#, no-wrap
msgid "bobp"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:148
msgid ""
"This function returns @code{t} if point is at the beginning of the buffer.  "
"If narrowing is in effect, this means the beginning of the accessible "
"portion of the text.  See also @code{point-min} in @ref{Point}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:150
#, no-wrap
msgid "eobp"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:154
msgid ""
"This function returns @code{t} if point is at the end of the buffer.  If "
"narrowing is in effect, this means the end of accessible portion of the "
"text.  See also @code{point-max} in @xref{Point}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:156
#, no-wrap
msgid "bolp"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:160
msgid ""
"This function returns @code{t} if point is at the beginning of a line.  "
"@xref{Text Lines}.  The beginning of the buffer (or of its accessible "
"portion) always counts as the beginning of a line."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:162
#, no-wrap
msgid "eolp"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:166
msgid ""
"This function returns @code{t} if point is at the end of a line.  The end of "
"the buffer (or of its accessible portion) is always considered the end of a "
"line."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:169
#, no-wrap
msgid "Examining Buffer Contents"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:170
#, no-wrap
msgid "buffer portion as string"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:174
msgid ""
"This section describes functions that allow a Lisp program to convert any "
"portion of the text in the buffer into a string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:175
#, no-wrap
msgid "buffer-substring start end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:181
msgid ""
"This function returns a string containing a copy of the text of the region "
"defined by positions @var{start} and @var{end} in the current buffer.  If "
"the arguments are not positions in the accessible portion of the buffer, "
"@code{buffer-substring} signals an @code{args-out-of-range} error."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:183
msgid "Here's an example which assumes Font-Lock mode is not enabled:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:188
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of buffer foo\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:190
#, no-wrap
msgid "---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:195
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} \"This is t\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:199
#, no-wrap
msgid ""
"(buffer-substring (point-max) 10)\n"
"     @result{} \"he contents of buffer foo\\n\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:206
msgid ""
"If the text being copied has any text properties, these are copied into the "
"string along with the characters they belong to.  @xref{Text Properties}.  "
"However, overlays (@pxref{Overlays}) in the buffer and their properties are "
"ignored, not copied."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:209
msgid "For example, if Font-Lock mode is enabled, you might get results like these:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:214
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} #(\"This is t\" 0 1 (fontified t) 1 9 (fontified t))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:218
#, no-wrap
msgid "buffer-substring-no-properties start end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:221
msgid ""
"This is like @code{buffer-substring}, except that it does not copy text "
"properties, just the characters themselves.  @xref{Text Properties}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:223
#, no-wrap
msgid "buffer-string"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:228
msgid ""
"This function returns the contents of the entire accessible portion of the "
"current buffer, as a string.  If the text being copied has any text "
"properties, these are copied into the string along with the characters they "
"belong to."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:235
msgid ""
"If you need to make sure the resulting string, when copied to a different "
"location, will not change its visual appearance due to reordering of "
"bidirectional text, use the @code{buffer-substring-with-bidi-context} "
"function (@pxref{Bidirectional Display, "
"buffer-substring-with-bidi-context})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:236
#, no-wrap
msgid "filter-buffer-substring start end &optional delete"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:240
msgid ""
"This function filters the buffer text between @var{start} and @var{end} "
"using a function specified by the variable "
"@code{filter-buffer-substring-function}, and returns the result."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:248
msgid ""
"The default filter function consults the obsolete wrapper hook "
"@code{filter-buffer-substring-functions} (see the documentation string of "
"the macro @code{with-wrapper-hook} for the details about this obsolete "
"facility), and the obsolete variable @code{buffer-substring-filters}.  If "
"both of these are @code{nil}, it returns the unaltered text from the buffer, "
"i.e., what @code{buffer-substring} would return."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:252
msgid ""
"If @var{delete} is non-@code{nil}, the function deletes the text between "
"@var{start} and @var{end} after copying it, like "
"@code{delete-and-extract-region}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:259
msgid ""
"Lisp code should use this function instead of @code{buffer-substring}, "
"@code{buffer-substring-no-properties}, or @code{delete-and-extract-region} "
"when copying into user-accessible data structures such as the kill-ring, X "
"clipboard, and registers.  Major and minor modes can modify "
"@code{filter-buffer-substring-function} to alter such text as it is copied "
"out of the buffer."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:261
#, no-wrap
msgid "filter-buffer-substring-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:267
msgid ""
"The value of this variable is a function that @code{filter-buffer-substring} "
"will call to do the actual work.  The function receives three arguments, the "
"same as those of @code{filter-buffer-substring}, which it should treat as "
"per the documentation of that function.  It should return the filtered text "
"(and optionally delete the source text)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:272
msgid ""
"@code{filter-buffer-substring-function}, but are still supported for "
"backward compatibility."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:273
#, no-wrap
msgid "filter-buffer-substring-functions"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:280
msgid ""
"This obsolete variable is a wrapper hook, whose members should be functions "
"that accept four arguments: @var{fun}, @var{start}, @var{end}, and "
"@var{delete}.  @var{fun} is a function that takes three arguments "
"(@var{start}, @var{end}, and @var{delete}), and returns a string.  In both "
"cases, the @var{start}, @var{end}, and @var{delete} arguments are the same "
"as those of @code{filter-buffer-substring}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:290
msgid ""
"The first hook function is passed a @var{fun} that is equivalent to the "
"default operation of @code{filter-buffer-substring}, i.e., it returns the "
"buffer-substring between @var{start} and @var{end} (processed by any "
"@code{buffer-substring-filters}) and optionally deletes the original text "
"from the buffer.  In most cases, the hook function will call @var{fun} once, "
"and then do its own processing of the result.  The next hook function "
"receives a @var{fun} equivalent to this, and so on.  The actual return value "
"is the result of all the hook functions acting in sequence."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:292
#, no-wrap
msgid "buffer-substring-filters"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:299
msgid ""
"The value of this obsolete variable should be a list of functions that "
"accept a single string argument and return another string.  The default "
"@code{filter-buffer-substring} function passes the buffer substring to the "
"first function in this list, and the return value of each function is passed "
"to the next function.  The return value of the last function is passed to "
"@code{filter-buffer-substring-functions}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:301
#, no-wrap
msgid "current-word &optional strict really-word"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:304
msgid ""
"This function returns the symbol (or word) at or near point, as a string.  "
"The return value includes no text properties."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:308
msgid ""
"If the optional argument @var{really-word} is non-@code{nil}, it finds a "
"word; otherwise, it finds a symbol (which includes both word characters and "
"symbol constituent characters)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:313
msgid ""
"If the optional argument @var{strict} is non-@code{nil}, then point must be "
"in or next to the symbol or word---if no symbol or word is there, the "
"function returns @code{nil}.  Otherwise, a nearby symbol or word on the same "
"line is acceptable."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:315
#, no-wrap
msgid "thing-at-point thing &optional no-properties"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:317
msgid "Return the @var{thing} around or next to point, as a string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:322
msgid ""
"The argument @var{thing} is a symbol which specifies a kind of syntactic "
"entity.  Possibilities include @code{symbol}, @code{list}, @code{sexp}, "
"@code{defun}, @code{filename}, @code{url}, @code{word}, @code{sentence}, "
"@code{whitespace}, @code{line}, @code{page}, and others."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:325
msgid ""
"When the optional argument @var{no-properties} is non-@code{nil}, this "
"function strips text properties from the return value."
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:331
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:338
#, no-wrap
msgid ""
"(thing-at-point 'word)\n"
"     @result{} \"Peace\"\n"
"(thing-at-point 'line)\n"
"     @result{} \"Gentlemen may cry ``Peace! Peace!,''\\n\"\n"
"(thing-at-point 'whitespace)\n"
"     @result{} nil\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:343
#, no-wrap
msgid "comparing buffer text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:347
msgid ""
"This function lets you compare portions of the text in a buffer, without "
"copying them into strings first."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:348
#, no-wrap
msgid "compare-buffer-substrings buffer1 start1 end1 buffer2 start2 end2"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:355
msgid ""
"This function lets you compare two substrings of the same buffer or two "
"different buffers.  The first three arguments specify one substring, giving "
"a buffer (or a buffer name) and two positions within the buffer.  The last "
"three arguments specify the other substring in the same way.  You can use "
"@code{nil} for @var{buffer1}, @var{buffer2}, or both to stand for the "
"current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:360
msgid ""
"The value is negative if the first substring is less, positive if the first "
"is greater, and zero if they are equal.  The absolute value of the result is "
"one plus the index of the first differing characters within the substrings."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:364
msgid ""
"This function ignores case when comparing characters if "
"@code{case-fold-search} is non-@code{nil}.  It always ignores text "
"properties."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:369
msgid ""
"Suppose you have the text @w{@samp{foobarbar haha!rara!}} in the current "
"buffer; then in this example the two substrings are @samp{rbar } and "
"@samp{rara!}.  The value is 2 because the first substring is greater at the "
"second character."
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:373
#, no-wrap
msgid ""
"(compare-buffer-substrings nil 6 11 nil 16 21)\n"
"     @result{} 2\n"
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:377
#, no-wrap
msgid "Inserting Text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:378
#, no-wrap
msgid "insertion of text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:379
#, no-wrap
msgid "text insertion"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:381
#, no-wrap
msgid "insertion before point"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:382
#, no-wrap
msgid "before point, insertion"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:388
msgid ""
"@dfn{Insertion} means adding new text to a buffer.  The inserted text goes "
"at point---between the character before point and the character after "
"point.  Some insertion functions leave point before the inserted text, while "
"other functions leave it after.  We call the former insertion @dfn{after "
"point} and the latter insertion @dfn{before point}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:396
msgid ""
"Insertion moves markers located at positions after the insertion point, so "
"that they stay with the surrounding text (@pxref{Markers}).  When a marker "
"points at the place of insertion, insertion may or may not relocate the "
"marker, depending on the marker's insertion type (@pxref{Marker Insertion "
"Types}).  Certain special functions such as @code{insert-before-markers} "
"relocate all such markers to point after the inserted text, regardless of "
"the markers' insertion type."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:400
msgid ""
"Insertion functions signal an error if the current buffer is read-only "
"(@pxref{Read Only Buffers}) or if they insert within read-only text "
"(@pxref{Special Properties})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:406
msgid ""
"These functions copy text characters from strings and buffers along with "
"their properties.  The inserted characters have exactly the same properties "
"as the characters they were copied from.  By contrast, characters specified "
"as separate arguments, not part of a string or buffer, inherit their text "
"properties from the neighboring text."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:413
msgid ""
"The insertion functions convert text from unibyte to multibyte in order to "
"insert in a multibyte buffer, and vice versa---if the text comes from a "
"string or from a buffer.  However, they do not convert unibyte character "
"codes 128 through 255 to multibyte characters, not even if the current "
"buffer is a multibyte buffer.  @xref{Converting Representations}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:414
#, no-wrap
msgid "insert &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:419
msgid ""
"This function inserts the strings and/or characters @var{args} into the "
"current buffer, at point, moving point forward.  In other words, it inserts "
"the text before point.  An error is signaled unless all @var{args} are "
"either strings or characters.  The value is @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:421
#, no-wrap
msgid "insert-before-markers &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:426
msgid ""
"This function inserts the strings and/or characters @var{args} into the "
"current buffer, at point, moving point forward.  An error is signaled unless "
"all @var{args} are either strings or characters.  The value is @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:433
msgid ""
"This function is unlike the other insertion functions in that it relocates "
"markers initially pointing at the insertion point, to point after the "
"inserted text.  If an overlay begins at the insertion point, the inserted "
"text falls outside the overlay; if a nonempty overlay ends at the insertion "
"point, the inserted text falls inside that overlay."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:435
#, no-wrap
msgid "Command insert-char character &optional count inherit"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:439
msgid ""
"This command inserts @var{count} instances of @var{character} into the "
"current buffer before point.  The argument @var{count} must be an integer, "
"and @var{character} must be a character."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:443
msgid ""
"If called interactively, this command prompts for @var{character} using its "
"Unicode name or its code point.  @xref{Inserting Text,,, emacs, The GNU "
"Emacs Manual}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:447
msgid ""
"This function does not convert unibyte character codes 128 through 255 to "
"multibyte characters, not even if the current buffer is a multibyte buffer.  "
"@xref{Converting Representations}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:451
msgid ""
"If @var{inherit} is non-@code{nil}, the inserted characters inherit sticky "
"text properties from the two characters before and after the insertion "
"point.  @xref{Sticky Properties}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:453
#, no-wrap
msgid "insert-buffer-substring from-buffer-or-name &optional start end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:459
msgid ""
"This function inserts a portion of buffer @var{from-buffer-or-name} into the "
"current buffer before point.  The text inserted is the region between "
"@var{start} (inclusive) and @var{end} (exclusive).  (These arguments default "
"to the beginning and end of the accessible portion of that buffer.)  This "
"function returns @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:462
msgid ""
"In this example, the form is executed with buffer @samp{bar} as the current "
"buffer.  We assume that buffer @samp{bar} is initially empty."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:468
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"We hold these truths to be self-evident, that all\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:473
#, no-wrap
msgid ""
"(insert-buffer-substring \"foo\" 1 20)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:477
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"We hold these truth@point{}\n"
"---------- Buffer: bar ----------\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:481
#, no-wrap
msgid ""
"insert-buffer-substring-no-properties from-buffer-or-name &optional start "
"end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:484
msgid ""
"This is like @code{insert-buffer-substring} except that it does not copy any "
"text properties."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:490
msgid ""
"@xref{Sticky Properties}, for other insertion functions that inherit text "
"properties from the nearby text in addition to inserting it.  Whitespace "
"inserted by indentation functions also inherits text properties."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:492
#, no-wrap
msgid "User-Level Insertion Commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:497
msgid ""
"This section describes higher-level commands for inserting text, commands "
"intended primarily for the user but useful also in Lisp programs."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:498
#, no-wrap
msgid "Command insert-buffer from-buffer-or-name"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:503
msgid ""
"This command inserts the entire accessible contents of "
"@var{from-buffer-or-name} (which must exist) into the current buffer after "
"point.  It leaves the mark after the inserted text.  The value is "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:505
#, no-wrap
msgid "Command self-insert-command count &optional char"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:506
#, no-wrap
msgid "character insertion"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:507
#, no-wrap
msgid "self-insertion"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:513
msgid ""
"This command inserts the character @var{char} (the last character typed); it "
"does so @var{count} times, before point, and returns @code{nil}.  Most "
"printing characters are bound to this command.  In routine use, "
"@code{self-insert-command} is the most frequently called function in Emacs, "
"but programs rarely use it except to install it on a keymap."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:515
msgid "In an interactive call, @var{count} is the numeric prefix argument."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:519
msgid ""
"Self-insertion translates the input character through "
"@code{translation-table-for-input}.  @xref{Translation of Characters}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:523
msgid ""
"This command calls @code{auto-fill-function} whenever that is non-@code{nil} "
"and the character inserted is in the table @code{auto-fill-chars} "
"(@pxref{Auto Filling})."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:530
msgid ""
"This command performs abbrev expansion if Abbrev mode is enabled and the "
"inserted character does not have word-constituent syntax.  (@xref{Abbrevs}, "
"and @ref{Syntax Class Table}.)  It is also responsible for calling "
"@code{blink-paren-function} when the inserted character has close "
"parenthesis syntax (@pxref{Blinking})."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/text.texi:531
#, no-wrap
msgid "post-self-insert-hook"
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/text.texi:532
#, no-wrap
msgid "self-insert-uses-region-functions"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:543
msgid ""
"The final thing this command does is to run the hook "
"@code{post-self-insert-hook}.  You could use this to automatically reindent "
"text as it is typed, for example.  If any function on this hook needs to act "
"on the region (@pxref{The Region}), it should make sure Delete Selection "
"mode (@pxref{Using Region, Delete Selection, , emacs, The GNU Emacs Manual}) "
"doesn't delete the region before @code{post-self-insert-hook} functions are "
"invoked.  The way to do so is to add a function that returns @code{nil} to "
"@code{self-insert-uses-region-functions}, a special hook that tells Delete "
"Selection mode it should not delete the region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:547
msgid ""
"Do not try substituting your own definition of @code{self-insert-command} "
"for the standard one.  The editor command loop handles this function "
"specially."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:549
#, no-wrap
msgid "Command newline &optional number-of-newlines interactive"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:554
msgid ""
"This command inserts newlines into the current buffer before point.  If "
"@var{number-of-newlines} is supplied, that many newline characters are "
"inserted.  In an interactive call, @var{number-of-newlines} is the numeric "
"prefix argument."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:555
#, no-wrap
msgid "newline and Auto Fill mode"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:563
msgid ""
"This command calls @code{self-insert-command} to insert newlines, which may "
"subsequently break the preceding line by calling @code{auto-fill-function} "
"(@pxref{Auto Filling}).  Typically what @code{auto-fill-function} does is "
"insert a newline; thus, the overall result in this case is to insert two "
"newlines at different places: one at point, and another earlier in the "
"line.  @code{newline} does not auto-fill if @var{number-of-newlines} is "
"non-@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:566
msgid ""
"This command does not run the hook @code{post-self-insert-hook} unless "
"called interactively or @var{interactive} is non-@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:569
msgid ""
"This command indents to the left margin if that is not zero.  "
"@xref{Margins}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:571
msgid "The value returned is @code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:573
#, no-wrap
msgid "overwrite-mode"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:580
msgid ""
"This variable controls whether overwrite mode is in effect.  The value "
"should be @code{overwrite-mode-textual}, @code{overwrite-mode-binary}, or "
"@code{nil}.  @code{overwrite-mode-textual} specifies textual overwrite mode "
"(treats newlines and tabs specially), and @code{overwrite-mode-binary} "
"specifies binary overwrite mode (treats newlines and tabs like any other "
"characters)."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:583
#, no-wrap
msgid "Deleting Text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:584
#, no-wrap
msgid "text deletion"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:586
#, no-wrap
msgid "deleting text vs killing"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:592
msgid ""
"Deletion means removing part of the text in a buffer, without saving it in "
"the kill ring (@pxref{The Kill Ring}).  Deleted text can't be yanked, but "
"can be reinserted using the undo mechanism (@pxref{Undo}).  Some deletion "
"functions do save text in the kill ring in some special cases."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:594
msgid "All of the deletion functions operate on the current buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:595
#, no-wrap
msgid "Command erase-buffer"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:602
msgid ""
"This function deletes the entire text of the current buffer (@emph{not} just "
"the accessible portion), leaving it empty.  If the buffer is read-only, it "
"signals a @code{buffer-read-only} error; if some of the text in it is "
"read-only, it signals a @code{text-read-only} error.  Otherwise, it deletes "
"the text without asking for any confirmation.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:608
msgid ""
"Normally, deleting a large amount of text from a buffer inhibits further "
"auto-saving of that buffer because it has shrunk.  However, "
"@code{erase-buffer} does not do this, the idea being that the future text is "
"not really related to the former text, and its size should not be compared "
"with that of the former text."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:610
#, no-wrap
msgid "Command delete-region start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:615
msgid ""
"This command deletes the text between positions @var{start} and @var{end} in "
"the current buffer, and returns @code{nil}.  If point was inside the deleted "
"region, its value afterward is @var{start}.  Otherwise, point relocates with "
"the surrounding text, as markers do."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:617
#, no-wrap
msgid "delete-and-extract-region start end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:621
msgid ""
"This function deletes the text between positions @var{start} and @var{end} "
"in the current buffer, and returns a string containing the text just "
"deleted."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:625
msgid ""
"If point was inside the deleted region, its value afterward is @var{start}.  "
"Otherwise, point relocates with the surrounding text, as markers do."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:627
#, no-wrap
msgid "Command delete-char count &optional killp"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:631
msgid ""
"This command deletes @var{count} characters directly after point, or before "
"point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it "
"saves the deleted characters in the kill ring."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:637 ../../../../../doc/lispref/text.texi:652 ../../../../../doc/lispref/text.texi:674
msgid ""
"In an interactive call, @var{count} is the numeric prefix argument, and "
"@var{killp} is the unprocessed prefix argument.  Therefore, if a prefix "
"argument is supplied, the text is saved in the kill ring.  If no prefix "
"argument is supplied, then one character is deleted, but not saved in the "
"kill ring."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:639 ../../../../../doc/lispref/text.texi:654 ../../../../../doc/lispref/text.texi:676
msgid "The value returned is always @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:641
#, no-wrap
msgid "Command delete-backward-char count &optional killp"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:642
#, no-wrap
msgid "deleting previous char"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:646
msgid ""
"This command deletes @var{count} characters directly before point, or after "
"point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it "
"saves the deleted characters in the kill ring."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:656
#, no-wrap
msgid "Command backward-delete-char-untabify count &optional killp"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:657
#, no-wrap
msgid "tab deletion"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:664
msgid ""
"This command deletes @var{count} characters backward, changing tabs into "
"spaces.  When the next character to be deleted is a tab, it is first "
"replaced with the proper number of spaces to preserve alignment and then one "
"of those spaces is deleted instead of the tab.  If @var{killp} is "
"non-@code{nil}, then the command saves the deleted characters in the kill "
"ring."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:668
msgid ""
"Conversion of tabs to spaces happens only if @var{count} is positive.  If it "
"is negative, exactly @minus{}@var{count} characters after point are deleted."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:678
#, no-wrap
msgid "backward-delete-char-untabify-method"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:686
msgid ""
"This option specifies how @code{backward-delete-char-untabify} should deal "
"with whitespace.  Possible values include @code{untabify}, the default, "
"meaning convert a tab to many spaces and delete one; @code{hungry}, meaning "
"delete all tabs and spaces before point with one command; @code{all} meaning "
"delete all tabs, spaces and newlines before point, and @code{nil}, meaning "
"do nothing special for whitespace characters."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:689
#, no-wrap
msgid "User-Level Deletion Commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:694
msgid ""
"This section describes higher-level commands for deleting text, commands "
"intended primarily for the user but useful also in Lisp programs."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:695
#, no-wrap
msgid "Command delete-horizontal-space &optional backward-only"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:696
#, no-wrap
msgid "deleting whitespace"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:699
msgid ""
"This function deletes all spaces and tabs around point.  It returns "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:702
msgid ""
"If @var{backward-only} is non-@code{nil}, the function deletes spaces and "
"tabs before point, but not after point."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:706
msgid ""
"In the following examples, we call @code{delete-horizontal-space} four "
"times, once on each line, with point between the second and third characters "
"on the line each time."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:715
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I @point{}thought\n"
"I @point{}     thought\n"
"We@point{} thought\n"
"Yo@point{}u thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:720
#, no-wrap
msgid ""
"(delete-horizontal-space)   ; @r{Four times.}\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:727
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Ithought\n"
"Ithought\n"
"Wethought\n"
"You thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:731
#, no-wrap
msgid "Command delete-indentation &optional join-following-p beg end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:738
msgid ""
"This function joins the line point is on to the previous line, deleting any "
"whitespace at the join and in some cases replacing it with one space.  If "
"@var{join-following-p} is non-@code{nil}, @code{delete-indentation} joins "
"this line to the following line instead.  Otherwise, if @var{beg} and "
"@var{end} are non-@code{nil}, this function joins all lines in the region "
"they define."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:743
msgid ""
"In an interactive call, @var{join-following-p} is the prefix argument, and "
"@var{beg} and @var{end} are, respectively, the start and end of the region "
"if it is active, else @code{nil}.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:747
msgid ""
"If there is a fill prefix, and the second of the lines being joined starts "
"with the prefix, then @code{delete-indentation} deletes the fill prefix "
"before joining the lines.  @xref{Margins}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:751
msgid ""
"In the example below, point is located on the line starting @samp{events}, "
"and it makes no difference if there are trailing spaces in the preceding "
"line."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:758
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human\n"
"@point{}    events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:762
#, no-wrap
msgid ""
"(delete-indentation)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:767
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human@point{} events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:772
msgid ""
"After the lines are joined, the function @code{fixup-whitespace} is "
"responsible for deciding whether to leave a space at the junction."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:774
#, no-wrap
msgid "Command fixup-whitespace"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:778
msgid ""
"This function replaces all the horizontal whitespace surrounding point with "
"either one space or no space, according to the context.  It returns "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:784
msgid ""
"At the beginning or end of a line, the appropriate amount of space is none.  "
"Before a character with close parenthesis syntax, or after a character with "
"open parenthesis or expression-prefix syntax, no space is also appropriate.  "
"Otherwise, one space is appropriate.  @xref{Syntax Class Table}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:788
msgid ""
"In the example below, @code{fixup-whitespace} is called the first time with "
"point before the word @samp{spaces} in the first line.  For the second "
"invocation, point is directly after the @samp{(}."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:795
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many     @point{}spaces\n"
"This has too many spaces at the start of (@point{}   this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:802
#, no-wrap
msgid ""
"(fixup-whitespace)\n"
"     @result{} nil\n"
"(fixup-whitespace)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:809
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many spaces\n"
"This has too many spaces at the start of (this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:813
#, no-wrap
msgid "Command just-one-space &optional n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:818
msgid ""
"This command replaces any spaces and tabs around point with a single space, "
"or @var{n} spaces if @var{n} is specified.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:823
#, no-wrap
msgid "Command delete-blank-lines"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:829
msgid ""
"This function deletes blank lines surrounding point.  If point is on a blank "
"line with one or more blank lines before or after it, then all but one of "
"them are deleted.  If point is on an isolated blank line, then it is "
"deleted.  If point is on a nonblank line, the command deletes all blank "
"lines immediately following it."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:832
msgid "A blank line is defined as a line containing only tabs and spaces."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:834
msgid "@code{delete-blank-lines} returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:836
#, no-wrap
msgid "Command delete-trailing-whitespace &optional start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:839
msgid ""
"Delete trailing whitespace in the region defined by @var{start} and "
"@var{end}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:842
msgid ""
"This command deletes whitespace characters after the last non-whitespace "
"character in each line in the region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:847
msgid ""
"If this command acts on the entire buffer (i.e., if called interactively "
"with the mark inactive, or called from Lisp with @var{end} @code{nil}), it "
"also deletes all trailing lines at the end of the buffer if the variable "
"@code{delete-trailing-lines} is non-@code{nil}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:851
#, no-wrap
msgid "kill ring"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:859
msgid ""
"@dfn{Kill functions} delete text like the deletion functions, but save it so "
"that the user can reinsert it by @dfn{yanking}.  Most of these functions "
"have @samp{kill-} in their name.  By contrast, the functions whose names "
"start with @samp{delete-} normally do not save text for yanking (though they "
"can still be undone); these are deletion functions."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:867
msgid ""
"Most of the kill commands are primarily for interactive use, and are not "
"described here.  What we do describe are the functions provided for use in "
"writing such commands.  You can use these functions to write commands for "
"killing text.  When you need to delete text for internal purposes within a "
"Lisp function, you should normally use deletion functions, so as not to "
"disturb the kill ring contents.  @xref{Deletion}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:875
msgid ""
"Killed text is saved for later yanking in the @dfn{kill ring}.  This is a "
"list that holds a number of recent kills, not just the last text kill.  We "
"call this a ``ring'' because yanking treats it as having elements in a "
"cyclic order.  The list is kept in the variable @code{kill-ring}, and can be "
"operated on with the usual functions for lists; there are also specialized "
"functions, described in this section, that treat it as a ring."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:884
msgid ""
"Some people think this use of the word ``kill'' is unfortunate, since it "
"refers to operations that specifically @emph{do not} destroy the entities "
"killed.  This is in sharp contrast to ordinary life, in which death is "
"permanent and killed entities do not come back to life.  Therefore, other "
"metaphors have been proposed.  For example, the term ``cut ring'' makes "
"sense to people who, in pre-computer days, used scissors and paste to cut up "
"and rearrange manuscripts.  However, it would be difficult to change the "
"terminology now."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:894 ../../../../../doc/lispref/text.texi:895
#, no-wrap
msgid "Kill Ring Concepts"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "What text looks like in the kill ring."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:920
#, no-wrap
msgid "Kill Functions"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "Functions that kill text."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:979 ../../../../../doc/lispref/text.texi:980
#, no-wrap
msgid "Yanking"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "How yanking is done."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:1068
#, no-wrap
msgid "Yank Commands"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "Commands that access the kill ring."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:1137 ../../../../../doc/lispref/text.texi:1138
#, no-wrap
msgid "Low-Level Kill Ring"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "Functions and variables for kill ring access."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:892 ../../../../../doc/lispref/text.texi:1227
#, no-wrap
msgid "Internals of Kill Ring"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:892
msgid "Variables that hold kill ring data."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:899
msgid ""
"The kill ring records killed text as strings in a list, most recent first.  "
"A short kill ring, for example, might look like this:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:902
#, no-wrap
msgid "(\"some text\" \"a different piece of text\" \"even older text\")\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:907
msgid ""
"When the list reaches @code{kill-ring-max} entries in length, adding a new "
"entry automatically deletes the last entry."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:913
msgid ""
"When kill commands are interwoven with other commands, each kill command "
"makes a new entry in the kill ring.  Multiple kill commands in succession "
"build up a single kill ring entry, which would be yanked as a unit; the "
"second and subsequent consecutive kill commands add text to the entry made "
"by the first one."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:919
msgid ""
"For yanking, one entry in the kill ring is designated the front of the "
"ring.  Some yank commands rotate the ring by designating a different element "
"as the front.  But this virtual rotation doesn't change the list "
"itself---the most recent entry always comes first in the list."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:921
#, no-wrap
msgid "Functions for Killing"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:930
msgid ""
"@code{kill-region} is the usual subroutine for killing text.  Any command "
"that calls this function is a kill command (and should probably have "
"@samp{kill} in its name).  @code{kill-region} puts the newly killed text in "
"a new element at the beginning of the kill ring or adds it to the most "
"recent element.  It determines automatically (using @code{last-command}) "
"whether the previous command was a kill command, and if so appends the "
"killed text to the most recent entry."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:931
#, no-wrap
msgid "filtering killed text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:938
msgid ""
"The commands described below can filter the killed text before they save it "
"in the kill ring.  They call @code{filter-buffer-substring} (@pxref{Buffer "
"Contents}) to perform the filtering.  By default, there's no filtering, but "
"major and minor modes and hook functions can set up filtering, so that text "
"saved in the kill ring is different from what was in the buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:939
#, no-wrap
msgid "Command kill-region start end &optional region"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:946
msgid ""
"This function kills the stretch of text between @var{start} and @var{end}; "
"but if the optional argument @var{region} is non-@code{nil}, it ignores "
"@var{start} and @var{end}, and kills the text in the current region "
"instead.  The text is deleted but saved in the kill ring, along with its "
"text properties.  The value is always @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:950
msgid ""
"In an interactive call, @var{start} and @var{end} are point and the mark, "
"and @var{region} is always non-@code{nil}, so the command always kills the "
"text in the current region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:955
msgid ""
"If the buffer or text is read-only, @code{kill-region} modifies the kill "
"ring just the same, then signals an error without modifying the buffer.  "
"This is convenient because it lets the user use a series of kill commands to "
"copy text from a read-only buffer into the kill ring."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:957
#, no-wrap
msgid "kill-read-only-ok"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:961
msgid ""
"If this option is non-@code{nil}, @code{kill-region} does not signal an "
"error if the buffer or text is read-only.  Instead, it simply returns, "
"updating the kill ring but not changing the buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:963
#, no-wrap
msgid "Command copy-region-as-kill start end &optional region"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:970
msgid ""
"This function saves the stretch of text between @var{start} and @var{end} on "
"the kill ring (including text properties), but does not delete the text from "
"the buffer.  However, if the optional argument @var{region} is "
"non-@code{nil}, the function ignores @var{start} and @var{end}, and saves "
"the current region instead.  It always returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:974
msgid ""
"In an interactive call, @var{start} and @var{end} are point and the mark, "
"and @var{region} is always non-@code{nil}, so the command always saves the "
"text in the current region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:977
msgid ""
"The command does not set @code{this-command} to @code{kill-region}, so a "
"subsequent kill command does not append to the same kill ring entry."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:986
msgid ""
"Yanking means inserting text from the kill ring, but it does not insert the "
"text blindly.  The @code{yank} command, and related commands, use "
"@code{insert-for-yank} to perform special processing on the text before it "
"is inserted."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:987
#, no-wrap
msgid "insert-for-yank string"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:993
msgid ""
"This function works like @code{insert}, except that it processes the text in "
"@var{string} according to the @code{yank-handler} text property, as well as "
"the variables @code{yank-handled-properties} and "
"@code{yank-excluded-properties} (see below), before inserting the result "
"into the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:995
#, no-wrap
msgid "insert-buffer-substring-as-yank buf &optional start end"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1001
msgid ""
"This function resembles @code{insert-buffer-substring}, except that it "
"processes the text according to @code{yank-handled-properties} and "
"@code{yank-excluded-properties}.  (It does not handle the "
"@code{yank-handler} property, which does not normally occur in buffer text "
"anyway.)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1011
msgid ""
"If you put a @code{yank-handler} text property on all or part of a string, "
"that alters how @code{insert-for-yank} inserts the string.  If different "
"parts of the string have different @code{yank-handler} values (comparison "
"being done with @code{eq}), each substring is handled separately.  The "
"property value must be a list of one to four elements, with the following "
"format (where elements after the first may be omitted):"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:1014
#, no-wrap
msgid "(@var{function} @var{param} @var{noexclude} @var{undo})\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1017
msgid "Here is what the elements do:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1019
#, no-wrap
msgid "function"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1023
msgid ""
"When @var{function} is non-@code{nil}, it is called instead of @code{insert} "
"to insert the string, with one argument---the string to insert."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1024
#, no-wrap
msgid "param"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1030
msgid ""
"If @var{param} is present and non-@code{nil}, it replaces @var{string} (or "
"the substring of @var{string} being processed) as the object passed to "
"@var{function} (or @code{insert}).  For example, if @var{function} is "
"@code{yank-rectangle}, @var{param} should be a list of strings to insert as "
"a rectangle."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1031
#, no-wrap
msgid "noexclude"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1035
msgid ""
"If @var{noexclude} is present and non-@code{nil}, that disables the normal "
"action of @code{yank-handled-properties} and @code{yank-excluded-properties} "
"on the inserted string."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1036
#, no-wrap
msgid "undo"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1042
msgid ""
"If @var{undo} is present and non-@code{nil}, it is a function that will be "
"called by @code{yank-pop} to undo the insertion of the current object.  It "
"is called with two arguments, the start and end of the current region.  "
"@var{function} can set @code{yank-undo-function} to override the @var{undo} "
"value."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1044
#, no-wrap
msgid "yanking and text properties"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1045
#, no-wrap
msgid "yank-handled-properties"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1050
msgid ""
"This variable specifies special text property handling conditions for yanked "
"text.  It takes effect after the text has been inserted (either normally, or "
"via the @code{yank-handler} property), and prior to "
"@code{yank-excluded-properties} taking effect."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1057
msgid ""
"The value should be an alist of elements @code{(@var{prop} . @var{fun})}.  "
"Each alist element is handled in order.  The inserted text is scanned for "
"stretches of text having text properties @code{eq} to @var{prop}; for each "
"such stretch, @var{fun} is called with three arguments: the value of the "
"property, and the start and end positions of the text."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1059
#, no-wrap
msgid "yank-excluded-properties"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1065
msgid ""
"The value of this variable is the list of properties to remove from inserted "
"text.  Its default value contains properties that might lead to annoying "
"results, such as causing the text to respond to the mouse or specifying key "
"bindings.  It takes effect after @code{yank-handled-properties}."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:1069
#, no-wrap
msgid "Functions for Yanking"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1076
msgid ""
"This section describes higher-level commands for yanking, which are intended "
"primarily for the user but useful also in Lisp programs.  Both @code{yank} "
"and @code{yank-pop} honor the @code{yank-excluded-properties} variable and "
"@code{yank-handler} text property (@pxref{Yanking})."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1077
#, no-wrap
msgid "Command yank &optional arg"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1078
#, no-wrap
msgid "inserting killed text"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1082
msgid ""
"This command inserts before point the text at the front of the kill ring.  "
"It sets the mark at the beginning of that text, using @code{push-mark} "
"(@pxref{The Mark}), and puts point at the end."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1087
msgid ""
"If @var{arg} is a non-@code{nil} list (which occurs interactively when the "
"user types @kbd{C-u} with no digits), then @code{yank} inserts the text as "
"described above, but puts point before the yanked text and sets the mark "
"after it."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1092
msgid ""
"If @var{arg} is a number, then @code{yank} inserts the @var{arg}th most "
"recently killed text---the @var{arg}th element of the kill ring list, "
"counted cyclically from the front, which is considered the first element for "
"this purpose."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1097
msgid ""
"@code{yank} does not alter the contents of the kill ring, unless it used "
"text provided by another program, in which case it pushes that text onto the "
"kill ring.  However if @var{arg} is an integer different from one, it "
"rotates the kill ring to place the yanked string at the front."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1099
msgid "@code{yank} returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1101
#, no-wrap
msgid "Command yank-pop &optional arg"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1104
msgid ""
"This command replaces the just-yanked entry from the kill ring with a "
"different entry from the kill ring."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1112
msgid ""
"This is allowed only immediately after a @code{yank} or another "
"@code{yank-pop}.  At such a time, the region contains text that was just "
"inserted by yanking.  @code{yank-pop} deletes that text and inserts in its "
"place a different piece of killed text.  It does not add the deleted text to "
"the kill ring, since it is already in the kill ring somewhere.  It does "
"however rotate the kill ring to place the newly yanked string at the front."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1117
msgid ""
"If @var{arg} is @code{nil}, then the replacement text is the previous "
"element of the kill ring.  If @var{arg} is numeric, the replacement is the "
"@var{arg}th previous kill.  If @var{arg} is negative, a more recent kill is "
"the replacement."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1121
msgid ""
"The sequence of kills in the kill ring wraps around, so that after the "
"oldest one comes the newest one, and before the newest one goes the oldest."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1123
msgid "The return value is always @code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1125
#, no-wrap
msgid "yank-undo-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1131
msgid ""
"If this variable is non-@code{nil}, the function @code{yank-pop} uses its "
"value instead of @code{delete-region} to delete the text inserted by the "
"previous @code{yank} or @code{yank-pop} command.  The value must be a "
"function of two arguments, the start and end of the current region."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1135
msgid ""
"The function @code{insert-for-yank} automatically sets this variable "
"according to the @var{undo} element of the @code{yank-handler} text "
"property, if there is one."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1144
msgid ""
"These functions and variables provide access to the kill ring at a lower "
"level, but are still convenient for use in Lisp programs, because they take "
"care of interaction with window system selections (@pxref{Window System "
"Selections})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1145
#, no-wrap
msgid "current-kill n &optional do-not-move"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1149
msgid ""
"The function @code{current-kill} rotates the yanking pointer, which "
"designates the front of the kill ring, by @var{n} places (from newer kills "
"to older ones), and returns the text at that place in the ring."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1153
msgid ""
"If the optional second argument @var{do-not-move} is non-@code{nil}, then "
"@code{current-kill} doesn't alter the yanking pointer; it just returns the "
"@var{n}th kill, counting from the current yanking pointer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1166
msgid ""
"If @var{n} is zero, indicating a request for the latest kill, "
"@code{current-kill} calls the value of @code{interprogram-paste-function} "
"(documented below) before consulting the kill ring.  If that value is a "
"function and calling it returns a string or a list of several strings, "
"@code{current-kill} pushes the strings onto the kill ring and returns the "
"first string.  It also sets the yanking pointer to point to the kill-ring "
"entry of the first string returned by @code{interprogram-paste-function}, "
"regardless of the value of @var{do-not-move}.  Otherwise, "
"@code{current-kill} does not treat a zero value for @var{n} specially: it "
"returns the entry pointed at by the yanking pointer and does not move the "
"yanking pointer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1168
#, no-wrap
msgid "kill-new string &optional replace"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1175
msgid ""
"This function pushes the text @var{string} onto the kill ring and makes the "
"yanking pointer point to it.  It discards the oldest entry if appropriate.  "
"It also invokes the values of @code{interprogram-paste-function} (subject to "
"the user option @code{save-interprogram-paste-before-kill})  and "
"@code{interprogram-cut-function} (see below)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1179
msgid ""
"If @var{replace} is non-@code{nil}, then @code{kill-new} replaces the first "
"element of the kill ring with @var{string}, rather than pushing @var{string} "
"onto the kill ring."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1181
#, no-wrap
msgid "kill-append string before-p"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1190
msgid ""
"This function appends the text @var{string} to the first entry in the kill "
"ring and makes the yanking pointer point to the combined entry.  Normally "
"@var{string} goes at the end of the entry, but if @var{before-p} is "
"non-@code{nil}, it goes at the beginning.  This function calls "
"@code{kill-new} as a subroutine, thus causing the values of "
"@code{interprogram-cut-function} and possibly "
"@code{interprogram-paste-function} (see below) to be invoked by extension."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1192
#, no-wrap
msgid "interprogram-paste-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1196
msgid ""
"This variable provides a way of transferring killed text from other "
"programs, when you are using a window system.  Its value should be "
"@code{nil} or a function of no arguments."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1201
msgid ""
"If the value is a function, @code{current-kill} calls it to get the most "
"recent kill.  If the function returns a non-@code{nil} value, then that "
"value is used as the most recent kill.  If it returns @code{nil}, then the "
"front of the kill ring is used."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1207
msgid ""
"To facilitate support for window systems that support multiple selections, "
"this function may also return a list of strings.  In that case, the first "
"string is used as the most recent kill, and all the other strings are pushed "
"onto the kill ring, for easy access by @code{yank-pop}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1213
msgid ""
"The normal use of this function is to get the window system's clipboard as "
"the most recent kill, even if the selection belongs to another application.  "
"@xref{Window System Selections}.  However, if the clipboard contents come "
"from the current Emacs session, this function should return @code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1215
#, no-wrap
msgid "interprogram-cut-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1219
msgid ""
"This variable provides a way of communicating killed text to other programs, "
"when you are using a window system.  Its value should be @code{nil} or a "
"function of one required argument."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1222
msgid ""
"If the value is a function, @code{kill-new} and @code{kill-append} call it "
"with the new first element of the kill ring as the argument."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1225
msgid ""
"The normal use of this function is to put newly killed text in the window "
"system's clipboard.  @xref{Window System Selections}."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:1228
#, no-wrap
msgid "Internals of the Kill Ring"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1233
msgid ""
"The variable @code{kill-ring} holds the kill ring contents, in the form of a "
"list of strings.  The most recent kill is always at the front of the list."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1242
msgid ""
"The @code{kill-ring-yank-pointer} variable points to a link in the kill ring "
"list, whose @sc{car} is the text to yank next.  We say it identifies the "
"front of the ring.  Moving @code{kill-ring-yank-pointer} to a different link "
"is called @dfn{rotating the kill ring}.  We call the kill ring a ``ring'' "
"because the functions that move the yank pointer wrap around from the end of "
"the list to the beginning, or vice-versa.  Rotation of the kill ring is "
"virtual; it does not change the value of @code{kill-ring}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1248
msgid ""
"Both @code{kill-ring} and @code{kill-ring-yank-pointer} are Lisp variables "
"whose values are normally lists.  The word ``pointer'' in the name of the "
"@code{kill-ring-yank-pointer} indicates that the variable's purpose is to "
"identify one element of the list for use by the next yank command."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1254
msgid ""
"The value of @code{kill-ring-yank-pointer} is always @code{eq} to one of the "
"links in the kill ring list.  The element it identifies is the @sc{car} of "
"that link.  Kill commands, which change the kill ring, also set this "
"variable to the value of @code{kill-ring}.  The effect is to rotate the ring "
"so that the newly killed text is at the front."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1258
msgid ""
"Here is a diagram that shows the variable @code{kill-ring-yank-pointer} "
"pointing to the second entry in the kill ring @code{(\"some text\" \"a "
"different piece of text\" \"yet older text\")}."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:1274
#, no-wrap
msgid ""
"kill-ring                  ---- kill-ring-yank-pointer\n"
"  |                       |\n"
"  |                       v\n"
"  |     --- ---          --- ---      --- ---\n"
"   --> |   |   |------> |   |   |--> |   |   |--> nil\n"
"        --- ---          --- ---      --- ---\n"
"         |                |            |\n"
"         |                |            |\n"
"         |                |             -->\"yet older text\"\n"
"         |                |\n"
"         |                 --> \"a different piece of text\"\n"
"         |\n"
"          --> \"some text\"\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1280
msgid ""
"This state of affairs might occur after @kbd{C-y} (@code{yank})  immediately "
"followed by @kbd{M-y} (@code{yank-pop})."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1281
#, no-wrap
msgid "kill-ring"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1284
msgid ""
"This variable holds the list of killed text sequences, most recently killed "
"first."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1286
#, no-wrap
msgid "kill-ring-yank-pointer"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1291
msgid ""
"This variable's value indicates which element of the kill ring is at the "
"front of the ring for yanking.  More precisely, the value is a tail of the "
"value of @code{kill-ring}, and its @sc{car} is the kill string that "
"@kbd{C-y} should yank."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1293
#, no-wrap
msgid "kill-ring-max"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1297
msgid ""
"The value of this variable is the maximum length to which the kill ring can "
"grow, before elements are thrown away at the end.  The default value for "
"@code{kill-ring-max} is 60."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1301
#, no-wrap
msgid "redo"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1311
msgid ""
"Most buffers have an @dfn{undo list}, which records all changes made to the "
"buffer's text so that they can be undone.  (The buffers that don't have one "
"are usually special-purpose buffers for which Emacs assumes that undoing is "
"not useful.  In particular, any buffer whose name begins with a space has "
"its undo recording off by default; see @ref{Buffer Names}.)  All the "
"primitives that modify the text in the buffer automatically add elements to "
"the front of the undo list, which is in the variable "
"@code{buffer-undo-list}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1312
#, no-wrap
msgid "buffer-undo-list"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1315
msgid ""
"This buffer-local variable's value is the undo list of the current buffer.  "
"A value of @code{t} disables the recording of undo information."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1318
msgid "Here are the kinds of elements an undo list can have:"
msgstr ""

#. type: var{#1}
#: ../../../../../doc/lispref/text.texi:1320
#, no-wrap
msgid "position"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1325
msgid ""
"This kind of element records a previous value of point; undoing this element "
"moves point to @var{position}.  Ordinary cursor motion does not make any "
"sort of undo record, but deletion operations use these entries to record "
"where point was before the command."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1326
#, no-wrap
msgid "(@var{beg} . @var{end})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1330
msgid ""
"This kind of element indicates how to delete text that was inserted.  Upon "
"insertion, the text occupied the range @var{beg}--@var{end} in the buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1331
#, no-wrap
msgid "(@var{text} . @var{position})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1338
msgid ""
"This kind of element indicates how to reinsert text that was deleted.  The "
"deleted text itself is the string @var{text}.  The place to reinsert it is "
"@code{(abs @var{position})}.  If @var{position} is positive, point was at "
"the beginning of the deleted text, otherwise it was at the end.  Zero or "
"more (@var{marker} . @var{adjustment})  elements follow immediately after "
"this element."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1339
#, no-wrap
msgid "(t . @var{time-flag})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1350
msgid ""
"This kind of element indicates that an unmodified buffer became modified.  A "
"@var{time-flag} that is a non-integer Lisp timestamp represents the visited "
"file's modification time as of when it was previously visited or saved, "
"using the same format as @code{current-time}; see @ref{Time of Day}.  A "
"@var{time-flag} of 0 means the buffer does not correspond to any file; "
"@minus{}1 means the visited file previously did not exist.  "
"@code{primitive-undo} uses these values to determine whether to mark the "
"buffer as unmodified once again; it does so only if the file's status "
"matches that of @var{time-flag}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1351
#, no-wrap
msgid "(nil @var{property} @var{value} @var{beg} . @var{end})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1354
msgid ""
"This kind of element records a change in a text property.  Here's how you "
"might undo the change:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:1357
#, no-wrap
msgid "(put-text-property @var{beg} @var{end} @var{property} @var{value})\n"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1359
#, no-wrap
msgid "(@var{marker} . @var{adjustment})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1366
msgid ""
"This kind of element records the fact that the marker @var{marker} was "
"relocated due to deletion of surrounding text, and that it moved "
"@var{adjustment} character positions.  If the marker's location is "
"consistent with the (@var{text} . @var{position}) element preceding it in "
"the undo list, then undoing this element moves @var{marker} @minus{} "
"@var{adjustment} characters."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1367
#, no-wrap
msgid "(apply @var{funname} . @var{args})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1370
msgid ""
"This is an extensible undo item, which is undone by calling @var{funname} "
"with arguments @var{args}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1371
#, no-wrap
msgid "(apply @var{delta} @var{beg} @var{end} @var{funname} . @var{args})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1376
msgid ""
"This is an extensible undo item, which records a change limited to the range "
"@var{beg} to @var{end}, which increased the size of the buffer by "
"@var{delta} characters.  It is undone by calling @var{funname} with "
"arguments @var{args}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1379
msgid ""
"This kind of element enables undo limited to a region to determine whether "
"the element pertains to that region."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1380
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:1385
msgid ""
"This element is a boundary.  The elements between two boundaries are called "
"a @dfn{change group}; normally, each change group corresponds to one "
"keyboard command, and undo commands normally undo an entire group as a unit."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1387
#, no-wrap
msgid "undo-boundary"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1391
msgid ""
"This function places a boundary element in the undo list.  The undo command "
"stops at such a boundary, and successive undo commands undo to earlier and "
"earlier boundaries.  This function returns @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1396
msgid ""
"Calling this function explicitly is useful for splitting the effects of a "
"command into more than one unit.  For example, @code{query-replace} calls "
"@code{undo-boundary} after each replacement, so that the user can undo "
"individual replacements one by one."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1399
msgid ""
"Mostly, however, this function is called automatically at an appropriate "
"time."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1401
#, no-wrap
msgid "undo-auto-amalgamate"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1402
#, no-wrap
msgid "amalgamating commands, and undo"
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/text.texi:1403
#, no-wrap
msgid "amalgamating-undo-limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1417
msgid ""
"The editor command loop automatically calls @code{undo-boundary} just before "
"executing each key sequence, so that each undo normally undoes the effects "
"of one command.  A few exceptional commands are @dfn{amalgamating}: these "
"commands generally cause small changes to buffers, so with these a boundary "
"is inserted only every 20th command, allowing the changes to be undone as a "
"group.  By default, the commands @code{self-insert-command}, which produces "
"self-inserting input characters (@pxref{Commands for Insertion}), and "
"@code{delete-char}, which deletes characters (@pxref{Deletion}), are "
"amalgamating.  Where a command affects the contents of several buffers, as "
"may happen, for example, when a function on the @code{post-command-hook} "
"affects a buffer other than the @code{current-buffer}, then "
"@code{undo-boundary} will be called in each of the affected buffers."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1421
msgid ""
"This function can be called before an amalgamating command.  It removes the "
"previous @code{undo-boundary} if a series of such calls have been made."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1425
msgid ""
"The maximum number of changes that can be amalgamated is controlled by the "
"@code{amalgamating-undo-limit} variable.  If this variable is 1, no changes "
"are amalgamated."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1431
msgid ""
"A Lisp program can amalgamate a series of changes into a single change group "
"by calling @code{undo-amalgamate-change-group} (@pxref{Atomic Changes}).  "
"Note that @code{amalgamating-undo-limit} has no effect on the groups "
"produced by that function."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1432
#, no-wrap
msgid "undo-auto-current-boundary-timer"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1437
msgid ""
"Some buffers, such as process buffers, can change even when no commands are "
"executing.  In these cases, @code{undo-boundary} is normally called "
"periodically by the timer in this variable.  Setting this variable to "
"non-@code{nil} prevents this behavior."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1439
#, no-wrap
msgid "undo-in-progress"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1443
msgid ""
"This variable is normally @code{nil}, but the undo commands bind it to "
"@code{t}.  This is so that various kinds of change hooks can tell when "
"they're being called for the sake of undoing."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1445
#, no-wrap
msgid "primitive-undo count list"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1449
msgid ""
"This is the basic function for undoing elements of an undo list.  It undoes "
"the first @var{count} elements of @var{list}, returning the rest of "
"@var{list}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1456
msgid ""
"@code{primitive-undo} adds elements to the buffer's undo list when it "
"changes the buffer.  Undo commands avoid confusion by saving the undo list "
"value at the beginning of a sequence of undo operations.  Then the undo "
"operations use and update the saved value.  The new elements added by "
"undoing are not part of this saved value, so they don't interfere with "
"continuing to undo."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1458
msgid "This function does not bind @code{undo-in-progress}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1465
msgid ""
"Some commands leave the region active after execution in such a way that it "
"interferes with selective undo of that command.  To make @code{undo} ignore "
"the active region when invoked immediately after such a command, set the "
"property @code{undo-inhibit-region} of the command's function symbol to a "
"non-nil value.  @xref{Standard Properties}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:1467
#, no-wrap
msgid "Maintaining Undo Lists"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1472
msgid ""
"This section describes how to enable and disable undo information for a "
"given buffer.  It also explains how the undo list is truncated automatically "
"so it doesn't get too big."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1478
msgid ""
"Recording of undo information in a newly created buffer is normally enabled "
"to start with; but if the buffer name starts with a space, the undo "
"recording is initially disabled.  You can explicitly enable or disable undo "
"recording with the following two functions, or by setting "
"@code{buffer-undo-list} yourself."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1479
#, no-wrap
msgid "Command buffer-enable-undo &optional buffer-or-name"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1485
msgid ""
"This command enables recording undo information for buffer "
"@var{buffer-or-name}, so that subsequent changes can be undone.  If no "
"argument is supplied, then the current buffer is used.  This function does "
"nothing if undo recording is already enabled in the buffer.  It returns "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1488
msgid ""
"In an interactive call, @var{buffer-or-name} is the current buffer.  You "
"cannot specify any other buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1490
#, no-wrap
msgid "Command buffer-disable-undo &optional buffer-or-name"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1491
#, no-wrap
msgid "disabling undo"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1497
msgid ""
"This function discards the undo list of @var{buffer-or-name}, and disables "
"further recording of undo information.  As a result, it is no longer "
"possible to undo either previous changes or any subsequent changes.  If the "
"undo list of @var{buffer-or-name} is already disabled, this function has no "
"effect."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1500
msgid ""
"In an interactive call, BUFFER-OR-NAME is the current buffer.  You cannot "
"specify any other buffer.  This function returns @code{nil}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1511
msgid ""
"As editing continues, undo lists get longer and longer.  To prevent them "
"from using up all available memory space, garbage collection trims them back "
"to size limits you can set.  (For this purpose, the size of an undo list "
"measures the cons cells that make up the list, plus the strings of deleted "
"text.)  Three variables control the range of acceptable sizes: "
"@code{undo-limit}, @code{undo-strong-limit} and @code{undo-outer-limit}.  In "
"these variables, size is counted as the number of bytes occupied, which "
"includes both saved text and other data."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1512
#, no-wrap
msgid "undo-limit"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1515
msgid ""
"This is the soft limit for the acceptable size of an undo list.  The change "
"group at which this size is exceeded is the last one kept."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1517
#, no-wrap
msgid "undo-strong-limit"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1522
msgid ""
"This is the upper limit for the acceptable size of an undo list.  The change "
"group at which this size is exceeded is discarded itself (along with all "
"older change groups).  There is one exception: the very latest change group "
"is only discarded if it exceeds @code{undo-outer-limit}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1524
#, no-wrap
msgid "undo-outer-limit"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1528
msgid ""
"If at garbage collection time the undo info for the current command exceeds "
"this limit, Emacs discards the info and displays a warning.  This is a last "
"ditch limit to prevent memory overflow."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1530
#, no-wrap
msgid "undo-ask-before-discard"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1535
msgid ""
"If this variable is non-@code{nil}, when the undo info exceeds "
"@code{undo-outer-limit}, Emacs asks in the echo area whether to discard the "
"info.  The default value is @code{nil}, which means to discard it "
"automatically."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1539
msgid ""
"This option is mainly intended for debugging.  Garbage collection is "
"inhibited while the question is asked, which means that Emacs might leak "
"memory if the user waits too long before answering the question."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1543
#, no-wrap
msgid "filling text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1551
msgid ""
"@dfn{Filling} means adjusting the lengths of lines (by moving the line "
"breaks) so that they are nearly (but no greater than) a specified maximum "
"width.  Additionally, lines can be @dfn{justified}, which means inserting "
"spaces to make the left and/or right margins line up precisely.  The width "
"is controlled by the variable @code{fill-column}.  For ease of reading, "
"lines should be no longer than 70 or so columns."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1555
msgid ""
"You can use Auto Fill mode (@pxref{Auto Filling}) to fill text automatically "
"as you insert it, but changes to existing text may leave it improperly "
"filled.  Then you must fill the text explicitly."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1561
msgid ""
"Most of the commands in this section return values that are not meaningful.  "
"All the functions that do filling take note of the current left margin, "
"current right margin, and current justification style (@pxref{Margins}).  If "
"the current justification style is @code{none}, the filling functions don't "
"actually do anything."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1569
msgid ""
"Several of the filling functions have an argument @var{justify}.  If it is "
"non-@code{nil}, that requests some kind of justification.  It can be "
"@code{left}, @code{right}, @code{full}, or @code{center}, to request a "
"specific style of justification.  If it is @code{t}, that means to use the "
"current justification style for this part of the text (see "
"@code{current-justification}, below).  Any other value is treated as "
"@code{full}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1572
msgid ""
"When you call the filling functions interactively, using a prefix argument "
"implies the value @code{full} for @var{justify}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1573
#, no-wrap
msgid "Command fill-paragraph &optional justify region"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1578
msgid ""
"This command fills the paragraph at or after point.  If @var{justify} is "
"non-@code{nil}, each line is justified as well.  It uses the ordinary "
"paragraph motion commands to find paragraph boundaries.  @xref{Paragraphs,,, "
"emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1584
msgid ""
"When @var{region} is non-@code{nil}, then if Transient Mark mode is enabled "
"and the mark is active, this command calls @code{fill-region} to fill all "
"the paragraphs in the region, instead of filling only the current "
"paragraph.  When this command is called interactively, @var{region} is "
"@code{t}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1586
#, no-wrap
msgid "Command fill-region start end &optional justify nosqueeze to-eop"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1590
msgid ""
"This command fills each of the paragraphs in the region from @var{start} to "
"@var{end}.  It justifies as well if @var{justify} is non-@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1595
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other "
"than line breaks untouched.  If @var{to-eop} is non-@code{nil}, that means "
"to keep filling to the end of the paragraph---or the next hard newline, if "
"@code{use-hard-newlines} is enabled (see below)."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1598
msgid ""
"The variable @code{paragraph-separate} controls how to distinguish "
"paragraphs.  @xref{Standard Regexps}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1600
#, no-wrap
msgid ""
"Command fill-individual-paragraphs start end &optional justify "
"citation-regexp"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1605
msgid ""
"This command fills each paragraph in the region according to its individual "
"fill prefix.  Thus, if the lines of a paragraph were indented with spaces, "
"the filled paragraph will remain indented in the same fashion."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1615
msgid ""
"The first two arguments, @var{start} and @var{end}, are the beginning and "
"end of the region to be filled.  The third and fourth arguments, "
"@var{justify} and @var{citation-regexp}, are optional.  If @var{justify} is "
"non-@code{nil}, the paragraphs are justified as well as filled.  If "
"@var{citation-regexp} is non-@code{nil}, it means the function is operating "
"on a mail message and therefore should not fill the header lines.  If "
"@var{citation-regexp} is a string, it is used as a regular expression; if it "
"matches the beginning of a line, that line is treated as a citation marker."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1622
msgid ""
"Ordinarily, @code{fill-individual-paragraphs} regards each change in "
"indentation as starting a new paragraph.  If "
"@code{fill-individual-varying-indent} is non-@code{nil}, then only separator "
"lines separate paragraphs.  That mode can handle indented paragraphs with "
"additional indentation on the first line."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1624
#, no-wrap
msgid "fill-individual-varying-indent"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1627
msgid ""
"This variable alters the action of @code{fill-individual-paragraphs} as "
"described above."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1629
#, no-wrap
msgid ""
"Command fill-region-as-paragraph start end &optional justify nosqueeze "
"squeeze-after"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1634
msgid ""
"This command considers a region of text as a single paragraph and fills it.  "
"If the region was made up of many paragraphs, the blank lines between "
"paragraphs are removed.  This function justifies as well as filling when "
"@var{justify} is non-@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1639
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other "
"than line breaks untouched.  If @var{squeeze-after} is non-@code{nil}, it "
"specifies a position in the region, and means don't canonicalize spaces "
"before that position."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1642
msgid ""
"In Adaptive Fill mode, this command calls @code{fill-context-prefix} to "
"choose a fill prefix by default.  @xref{Adaptive Fill}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1644
#, no-wrap
msgid "Command justify-current-line &optional how eop nosqueeze"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1648
msgid ""
"This command inserts spaces between the words of the current line so that "
"the line ends exactly at @code{fill-column}.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1654
msgid ""
"The argument @var{how}, if non-@code{nil} specifies explicitly the style of "
"justification.  It can be @code{left}, @code{right}, @code{full}, "
"@code{center}, or @code{none}.  If it is @code{t}, that means to follow "
"specified justification style (see @code{current-justification}, below).  "
"@code{nil} means to do full justification."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1659
msgid ""
"If @var{eop} is non-@code{nil}, that means do only left-justification if "
"@code{current-justification} specifies full justification.  This is used for "
"the last line of a paragraph; even if the paragraph as a whole is fully "
"justified, the last line should not be."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1662
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means do not change interior "
"whitespace."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1664
#, no-wrap
msgid "default-justification"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1669
msgid ""
"This variable's value specifies the style of justification to use for text "
"that doesn't specify a style with a text property.  The possible values are "
"@code{left}, @code{right}, @code{full}, @code{center}, or @code{none}.  The "
"default value is @code{left}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1671
#, no-wrap
msgid "current-justification"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1674
msgid ""
"This function returns the proper justification style to use for filling the "
"text around point."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1679
msgid ""
"This returns the value of the @code{justification} text property at point, "
"or the variable @code{default-justification} if there is no such text "
"property.  However, it returns @code{nil} rather than @code{none} to mean "
"``don't justify''."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1681
#, no-wrap
msgid "sentence-end-double-space"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/text.texi:1686
msgid "Definition of sentence-end-double-space"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1686
msgid ""
"If this variable is non-@code{nil}, a period followed by just one space does "
"not count as the end of a sentence, and the filling functions avoid breaking "
"the line at such a place."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1688
#, no-wrap
msgid "sentence-end-without-period"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1692
msgid ""
"If this variable is non-@code{nil}, a sentence can end without a period.  "
"This is used for languages like Thai, where sentences end with a double "
"space but without a period."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1694
#, no-wrap
msgid "sentence-end-without-space"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1697
msgid ""
"If this variable is non-@code{nil}, it should be a string of characters that "
"can end a sentence without following spaces."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1699
#, no-wrap
msgid "fill-separate-heterogeneous-words-with-space"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1704
msgid ""
"If this variable is non-@code{nil}, two words of different kind (e.g., "
"English and CJK) will be separated with a space when concatenating one that "
"is in the end of a line and the other that is in the beginning of the next "
"line for filling."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1706
#, no-wrap
msgid "fill-paragraph-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1712
msgid ""
"This variable provides a way to override the filling of paragraphs.  If its "
"value is non-@code{nil}, @code{fill-paragraph} calls this function to do the "
"work.  If the function returns a non-@code{nil} value, @code{fill-paragraph} "
"assumes the job is done, and immediately returns that value."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1716
msgid ""
"The usual use of this feature is to fill comments in programming language "
"modes.  If the function needs to fill a paragraph in the usual way, it can "
"do so as follows:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:1720
#, no-wrap
msgid ""
"(let ((fill-paragraph-function nil))\n"
"  (fill-paragraph arg))\n"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1723
#, no-wrap
msgid "fill-forward-paragraph-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1732
msgid ""
"This variable provides a way to override how the filling functions, such as "
"@code{fill-region} and @code{fill-paragraph}, move forward to the next "
"paragraph.  Its value should be a function, which is called with a single "
"argument @var{n}, the number of paragraphs to move, and should return the "
"difference between @var{n} and the number of paragraphs actually moved.  The "
"default value of this variable is @code{forward-paragraph}.  "
"@xref{Paragraphs,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1734
#, no-wrap
msgid "use-hard-newlines"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1739
msgid ""
"If this variable is non-@code{nil}, the filling functions do not delete "
"newlines that have the @code{hard} text property.  These hard newlines act "
"as paragraph separators.  @xref{Hard and Soft Newlines,, Hard and Soft "
"Newlines, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:1742
#, no-wrap
msgid "Margins for Filling"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1743
#, no-wrap
msgid "margins, filling"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1745
#, no-wrap
msgid "fill-prefix"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1754
msgid ""
"This buffer-local variable, if non-@code{nil}, specifies a string of text "
"that appears at the beginning of normal text lines and should be disregarded "
"when filling them.  Any line that fails to start with the fill prefix is "
"considered the start of a paragraph; so is any line that starts with the "
"fill prefix followed by additional whitespace.  Lines that start with the "
"fill prefix but no additional whitespace are ordinary text lines that can be "
"filled together.  The resulting filled lines also start with the fill "
"prefix."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1756
msgid "The fill prefix follows the left margin whitespace, if any."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1758
#, no-wrap
msgid "fill-column"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1763
msgid ""
"This buffer-local variable specifies the maximum width of filled lines.  Its "
"value should be an integer, which is a number of columns.  All the filling, "
"justification, and centering commands are affected by this variable, "
"including Auto Fill mode (@pxref{Auto Filling})."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1768
msgid ""
"As a practical matter, if you are writing text for other people to read, you "
"should set @code{fill-column} to no more than 70.  Otherwise the line will "
"be too long for people to read comfortably, and this can make the text seem "
"clumsy."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1770
msgid "The default value for @code{fill-column} is 70."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1772
#, no-wrap
msgid "Command set-left-margin from to margin"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1776
msgid ""
"This sets the @code{left-margin} property on the text from @var{from} to "
"@var{to} to the value @var{margin}.  If Auto Fill mode is enabled, this "
"command also refills the region to fit the new margin."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1778
#, no-wrap
msgid "Command set-right-margin from to margin"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1782
msgid ""
"This sets the @code{right-margin} property on the text from @var{from} to "
"@var{to} to the value @var{margin}.  If Auto Fill mode is enabled, this "
"command also refills the region to fit the new margin."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1784
#, no-wrap
msgid "current-left-margin"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1789
msgid ""
"This function returns the proper left margin value to use for filling the "
"text around point.  The value is the sum of the @code{left-margin} property "
"of the character at the start of the current line (or zero if none), and the "
"value of the variable @code{left-margin}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1791
#, no-wrap
msgid "current-fill-column"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1796
msgid ""
"This function returns the proper fill column value to use for filling the "
"text around point.  The value is the value of the @code{fill-column} "
"variable, minus the value of the @code{right-margin} property of the "
"character after point."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1798
#, no-wrap
msgid "Command move-to-left-margin &optional n force"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1803
msgid ""
"This function moves point to the left margin of the current line.  The "
"column moved to is determined by calling the function "
"@code{current-left-margin}.  If the argument @var{n} is non-@code{nil}, "
"@code{move-to-left-margin} moves forward @var{n}@minus{}1 lines first."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:1806
msgid ""
"If @var{force} is non-@code{nil}, that says to fix the line's indentation if "
"that doesn't match the left margin value."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1808
#, no-wrap
msgid "delete-to-left-margin &optional from to"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1814
msgid ""
"This function removes left margin indentation from the text between "
"@var{from} and @var{to}.  The amount of indentation to delete is determined "
"by calling @code{current-left-margin}.  In no case does this function delete "
"non-whitespace.  If @var{from} and @var{to} are omitted, they default to the "
"whole buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1816
#, no-wrap
msgid "indent-to-left-margin"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1821
msgid ""
"This function adjusts the indentation at the beginning of the current line "
"to the value specified by the variable @code{left-margin}.  (That may "
"involve either inserting or deleting whitespace.)  This function is value of "
"@code{indent-line-function} in Paragraph-Indent Text mode."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:1823 ../../../../../doc/lispref/text.texi:3817
#, no-wrap
msgid "left-margin"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1827
msgid ""
"This variable specifies the base left margin column.  In Fundamental mode, "
"@key{RET} indents to this column.  This variable automatically becomes "
"buffer-local when set in any fashion."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1829
#, no-wrap
msgid "fill-nobreak-predicate"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1836
msgid ""
"This variable gives major modes a way to specify not to break a line at "
"certain places.  Its value should be a list of functions.  Whenever filling "
"considers breaking the line at a certain place in the buffer, it calls each "
"of these functions with no arguments and with point located at that place.  "
"If any of the functions returns non-@code{nil}, then the line won't be "
"broken there."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:1839
#, no-wrap
msgid "Adaptive Fill Mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1848
msgid ""
"When @dfn{Adaptive Fill Mode} is enabled, Emacs determines the fill prefix "
"automatically from the text in each paragraph being filled rather than using "
"a predetermined value.  During filling, this fill prefix gets inserted at "
"the start of the second and subsequent lines of the paragraph as described "
"in @ref{Filling}, and in @ref{Auto Filling}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1849
#, no-wrap
msgid "adaptive-fill-mode"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1852
msgid ""
"Adaptive Fill mode is enabled when this variable is non-@code{nil}.  It is "
"@code{t} by default."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1854
#, no-wrap
msgid "fill-context-prefix from to"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1863
msgid ""
"This function implements the heart of Adaptive Fill mode; it chooses a fill "
"prefix based on the text between @var{from} and @var{to}, typically the "
"start and end of a paragraph.  It does this by looking at the first two "
"lines of the paragraph, based on the variables described below."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1869
msgid ""
"Usually, this function returns the fill prefix, a string.  However, before "
"doing this, the function makes a final check (not specially mentioned in the "
"following) that a line starting with this prefix wouldn't look like the "
"start of a paragraph.  Should this happen, the function signals the anomaly "
"by returning @code{nil} instead."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1871
msgid "In detail, @code{fill-context-prefix} does this:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:1879
msgid ""
"It takes a candidate for the fill prefix from the first line---it tries "
"first the function in @code{adaptive-fill-function} (if any), then the "
"regular expression @code{adaptive-fill-regexp} (see below).  The first "
"non-@code{nil} result of these, or the empty string if they're both "
"@code{nil}, becomes the first line's candidate."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:1884
msgid ""
"If the paragraph has as yet only one line, the function tests the validity "
"of the prefix candidate just found.  The function then returns the candidate "
"if it's valid, or a string of spaces otherwise.  (see the description of "
"@code{adaptive-fill-first-line-regexp} below)."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:1888
msgid ""
"When the paragraph already has two lines, the function next looks for a "
"prefix candidate on the second line, in just the same way it did for the "
"first line.  If it doesn't find one, it returns @code{nil}."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:1894
msgid ""
"The function now compares the two candidate prefixes heuristically: if the "
"non-whitespace characters in the line 2 candidate occur in the same order in "
"the line 1 candidate, the function returns the line 2 candidate.  Otherwise, "
"it returns the largest initial substring which is common to both candidates "
"(which might be the empty string)."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1897
#, no-wrap
msgid "adaptive-fill-regexp"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1901
msgid ""
"Adaptive Fill mode matches this regular expression against the text starting "
"after the left margin whitespace (if any) on a line; the characters it "
"matches are that line's candidate for the fill prefix."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1904
msgid ""
"The default value matches whitespace with certain punctuation characters "
"intermingled."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1906
#, no-wrap
msgid "adaptive-fill-first-line-regexp"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1913
msgid ""
"Used only in one-line paragraphs, this regular expression acts as an "
"additional check of the validity of the one available candidate fill prefix: "
"the candidate must match this regular expression, or match "
"@code{comment-start-skip}.  If it doesn't, @code{fill-context-prefix} "
"replaces the candidate with a string of spaces of the same width as it."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1918
msgid ""
"The default value of this variable is @w{@code{\"\\\\`[ \\t]*\\\\'\"}}, "
"which matches only a string of whitespace.  The effect of this default is to "
"force the fill prefixes found in one-line paragraphs always to be pure "
"whitespace."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1920
#, no-wrap
msgid "adaptive-fill-function"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1926
msgid ""
"You can specify more complex ways of choosing a fill prefix automatically by "
"setting this variable to a function.  The function is called with point "
"after the left margin (if any) of a line, and it must preserve point.  It "
"should return either that line's fill prefix or @code{nil}, meaning it has "
"failed to determine a prefix."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1930
#, no-wrap
msgid "filling, automatic"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1931
#, no-wrap
msgid "Auto Fill mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1938
msgid ""
"Auto Fill mode is a minor mode that fills lines automatically as text is "
"inserted.  @xref{Auto Fill,,, emacs, The GNU Emacs Manual}.  This section "
"describes some variables used by Auto Fill mode.  For a description of "
"functions that you can call explicitly to fill and justify existing text, "
"see @ref{Filling}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1941
msgid ""
"Auto Fill mode also enables the functions that change the margins and "
"justification style to refill portions of the text.  @xref{Margins}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1942
#, no-wrap
msgid "auto-fill-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1947
msgid ""
"The value of this buffer-local variable should be a function (of no "
"arguments) to be called after self-inserting a character from the table "
"@code{auto-fill-chars}, see below.  It may be @code{nil}, in which case "
"nothing special is done in that case."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1951
msgid ""
"The value of @code{auto-fill-function} is @code{do-auto-fill} when Auto Fill "
"mode is enabled.  That is a function whose sole purpose is to implement the "
"usual strategy for breaking a line."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1953
#, no-wrap
msgid "normal-auto-fill-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1958
msgid ""
"This variable specifies the function to use for @code{auto-fill-function}, "
"if and when Auto Fill is turned on.  Major modes can set buffer-local values "
"for this variable to alter how Auto Fill works."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1960
#, no-wrap
msgid "auto-fill-chars"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:1964
msgid ""
"A char table of characters which invoke @code{auto-fill-function} when "
"self-inserted---space and newline in most language environments.  They have "
"an entry @code{t} in the table."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1966
#, no-wrap
msgid "comment-auto-fill-only-comments"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:1971
msgid ""
"This variable, if non-@code{nil}, means to fill lines automatically within "
"comments only.  More precisely, this means that if a comment syntax was "
"defined for the current buffer, then self-inserting a character outside of a "
"comment will not call @code{auto-fill-function}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:1975
#, no-wrap
msgid "Sorting Text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:1976
#, no-wrap
msgid "sorting text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:1982
msgid ""
"The sorting functions described in this section all rearrange text in a "
"buffer.  This is in contrast to the function @code{sort}, which rearranges "
"the order of the elements of a list (@pxref{Rearrangement}).  The values "
"returned by these functions are not meaningful."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1983
#, no-wrap
msgid ""
"sort-subr reverse nextrecfun endrecfun &optional startkeyfun endkeyfun "
"predicate"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1987
msgid ""
"This function is the general text-sorting routine that subdivides a buffer "
"into records and then sorts them.  Most of the commands in this section use "
"this function."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1994
msgid ""
"To understand how @code{sort-subr} works, consider the whole accessible "
"portion of the buffer as being divided into disjoint pieces called @dfn{sort "
"records}.  The records may or may not be contiguous, but they must not "
"overlap.  A portion of each sort record (perhaps all of it) is designated as "
"the sort key.  Sorting rearranges the records in order by their sort keys."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:1999
msgid ""
"Usually, the records are rearranged in order of ascending sort key.  If the "
"first argument to the @code{sort-subr} function, @var{reverse}, is "
"non-@code{nil}, the sort records are rearranged in order of descending sort "
"key."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2003
msgid ""
"The next four arguments to @code{sort-subr} are functions that are called to "
"move point across a sort record.  They are called many times from within "
"@code{sort-subr}."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:2011
msgid ""
"@var{nextrecfun} is called with point at the end of a record.  This function "
"moves point to the start of the next record.  The first record is assumed to "
"start at the position of point when @code{sort-subr} is called.  Therefore, "
"you should usually move point to the beginning of the buffer before calling "
"@code{sort-subr}."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:2014
msgid ""
"This function can indicate there are no more sort records by leaving point "
"at the end of the buffer."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:2018
msgid ""
"@var{endrecfun} is called with point within a record.  It moves point to the "
"end of the record."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:2027
msgid ""
"@var{startkeyfun} is called to move point from the start of a record to the "
"start of the sort key.  This argument is optional; if it is omitted, the "
"whole record is the sort key.  If supplied, the function should either "
"return a non-@code{nil} value to be used as the sort key, or return "
"@code{nil} to indicate that the sort key is in the buffer starting at "
"point.  In the latter case, @var{endkeyfun} is called to find the end of the "
"sort key."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:2035
msgid ""
"@var{endkeyfun} is called to move point from the start of the sort key to "
"the end of the sort key.  This argument is optional.  If @var{startkeyfun} "
"returns @code{nil} and this argument is omitted (or @code{nil}), then the "
"sort key extends to the end of the record.  There is no need for "
"@var{endkeyfun} if @var{startkeyfun} returns a non-@code{nil} value."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2047
msgid ""
"The argument @var{predicate} is the function to use to compare keys.  It is "
"called with two arguments, the keys to compare, and should return "
"non-@code{nil} if the first key should come before the second in the sorting "
"order.  What exactly are the key arguments depends on what @var{startkeyfun} "
"and @var{endkeyfun} return.  If @var{predicate} is omitted or @code{nil}, it "
"defaults to @code{<} if the keys are numbers, to "
"@code{compare-buffer-substrings} if the keys are cons cells (whose "
"@code{car} and @code{cdr} are start and end buffer positions of the key), "
"and to @code{string<} otherwise (with keys assumed to be strings)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2050
msgid ""
"As an example of @code{sort-subr}, here is the complete function definition "
"for @code{sort-lines}:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2059
#, no-wrap
msgid ""
";; @r{Note that the first two lines of doc string}\n"
";; @r{are effectively one line when viewed by a user.}\n"
"(defun sort-lines (reverse beg end)\n"
"  \"Sort lines in region alphabetically;\\\n"
" argument means descending order.\n"
"Called from a program, there are three arguments:\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2066
#, no-wrap
msgid ""
"REVERSE (non-nil means reverse order),\\\n"
" BEG and END (region to sort).\n"
"The variable `sort-fold-case' determines\\\n"
" whether alphabetic case affects\n"
"the sort order.\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2075
#, no-wrap
msgid ""
"  (interactive \"P\\nr\")\n"
"  (save-excursion\n"
"    (save-restriction\n"
"      (narrow-to-region beg end)\n"
"      (goto-char (point-min))\n"
"      (let ((inhibit-field-text-motion t))\n"
"        (sort-subr reverse 'forward-line 'end-of-line)))))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2082
msgid ""
"Here @code{forward-line} moves point to the start of the next record, and "
"@code{end-of-line} moves point to the end of record.  We do not pass the "
"arguments @var{startkeyfun} and @var{endkeyfun}, because the entire record "
"is used as the sort key."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2085
msgid ""
"The @code{sort-paragraphs} function is very much the same, except that its "
"@code{sort-subr} call looks like this:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2094
#, no-wrap
msgid ""
"(sort-subr reverse\n"
"           (lambda ()\n"
"             (while (and (not (eobp))\n"
"                         (looking-at paragraph-separate))\n"
"               (forward-line 1)))\n"
"           'forward-paragraph)\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2099
msgid ""
"Markers pointing into any sort records are left with no useful position "
"after @code{sort-subr} returns."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2101
#, no-wrap
msgid "sort-fold-case"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2104
msgid ""
"If this variable is non-@code{nil}, @code{sort-subr} and the other buffer "
"sorting functions ignore case when comparing strings."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2106
#, no-wrap
msgid "Command sort-regexp-fields reverse record-regexp key-regexp start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2111
msgid ""
"This command sorts the region between @var{start} and @var{end} "
"alphabetically as specified by @var{record-regexp} and @var{key-regexp}.  If "
"@var{reverse} is a negative integer, then sorting is in reverse order."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2118
msgid ""
"Alphabetical sorting means that two sort keys are compared by comparing the "
"first characters of each, the second characters of each, and so on.  If a "
"mismatch is found, it means that the sort keys are unequal; the sort key "
"whose character is less at the point of first mismatch is the lesser sort "
"key.  The individual characters are compared according to their numerical "
"character codes in the Emacs character set."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2126
msgid ""
"The value of the @var{record-regexp} argument specifies how to divide the "
"buffer into sort records.  At the end of each record, a search is done for "
"this regular expression, and the text that matches it is taken as the next "
"record.  For example, the regular expression @samp{^.+$}, which matches "
"lines with at least one character besides a newline, would make each such "
"line into a sort record.  @xref{Regular Expressions}, for a description of "
"the syntax and meaning of regular expressions."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2132
msgid ""
"The value of the @var{key-regexp} argument specifies what part of each "
"record is the sort key.  The @var{key-regexp} could match the whole record, "
"or only a part.  In the latter case, the rest of the record has no effect on "
"the sorted order of records, but it is carried along when the record moves "
"to its new position."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2136
msgid ""
"The @var{key-regexp} argument can refer to the text matched by a "
"subexpression of @var{record-regexp}, or it can be a regular expression on "
"its own."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2138
msgid "If @var{key-regexp} is:"
msgstr ""

#. type: samp{#1}
#: ../../../../../doc/lispref/text.texi:2140
#, no-wrap
msgid "\\@var{digit}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:2143
msgid ""
"then the text matched by the @var{digit}th @samp{\\(...\\)} parenthesis "
"grouping in @var{record-regexp} is the sort key."
msgstr ""

#. type: samp{#1}
#: ../../../../../doc/lispref/text.texi:2144
#, no-wrap
msgid "\\&"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:2146
msgid "then the whole record is the sort key."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:2147
#, no-wrap
msgid "a regular expression"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:2153
msgid ""
"then @code{sort-regexp-fields} searches for a match for the regular "
"expression within the record.  If such a match is found, it is the sort "
"key.  If there is no match for @var{key-regexp} within a record then that "
"record is ignored, which means its position in the buffer is not changed.  "
"(The other records may move around it.)"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2159
msgid ""
"For example, if you plan to sort all the lines in the region by the first "
"word on each line starting with the letter @samp{f}, you should set "
"@var{record-regexp} to @samp{^.*$} and set @var{key-regexp} to "
"@samp{\\<f\\w*\\>}.  The resulting expression looks like this:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2165
#, no-wrap
msgid ""
"(sort-regexp-fields nil \"^.*$\" \"\\\\<f\\\\w*\\\\>\"\n"
"                    (region-beginning)\n"
"                    (region-end))\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2170
msgid ""
"If you call @code{sort-regexp-fields} interactively, it prompts for "
"@var{record-regexp} and @var{key-regexp} in the minibuffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2172
#, no-wrap
msgid "Command sort-lines reverse start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2176
msgid ""
"This command alphabetically sorts lines in the region between @var{start} "
"and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse "
"order."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2178
#, no-wrap
msgid "Command sort-paragraphs reverse start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2182
msgid ""
"This command alphabetically sorts paragraphs in the region between "
"@var{start} and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is "
"in reverse order."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2184
#, no-wrap
msgid "Command sort-pages reverse start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2188
msgid ""
"This command alphabetically sorts pages in the region between @var{start} "
"and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse "
"order."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2190
#, no-wrap
msgid "Command sort-fields field start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2197
msgid ""
"This command sorts lines in the region between @var{start} and @var{end}, "
"comparing them alphabetically by the @var{field}th field of each line.  "
"Fields are separated by whitespace and numbered starting from 1.  If "
"@var{field} is negative, sorting is by the @w{@minus{}@var{field}th} field "
"from the end of the line.  This command is useful for sorting tables."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2199
#, no-wrap
msgid "Command sort-numeric-fields field start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2206
msgid ""
"This command sorts lines in the region between @var{start} and @var{end}, "
"comparing them numerically by the @var{field}th field of each line.  Fields "
"are separated by whitespace and numbered starting from 1.  The specified "
"field must contain a number in each line of the region.  Numbers starting "
"with 0 are treated as octal, and numbers starting with @samp{0x} are treated "
"as hexadecimal."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2210
msgid ""
"If @var{field} is negative, sorting is by the @w{@minus{}@var{field}th} "
"field from the end of the line.  This command is useful for sorting tables."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2212
#, no-wrap
msgid "sort-numeric-base"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2215
msgid ""
"This variable specifies the default radix for @code{sort-numeric-fields} to "
"parse numbers."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2217
#, no-wrap
msgid "Command sort-columns reverse &optional beg end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2222
msgid ""
"This command sorts the lines in the region between @var{beg} and @var{end}, "
"comparing them alphabetically by a certain range of columns.  The column "
"positions of @var{beg} and @var{end} bound the range of columns to sort on."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2224
msgid "If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2228
msgid ""
"One unusual thing about this command is that the entire line containing "
"position @var{beg}, and the entire line containing position @var{end}, are "
"included in the region sorted."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2232
msgid ""
"Note that @code{sort-columns} rejects text that contains tabs, because tabs "
"could be split across the specified columns.  Use @kbd{M-x untabify} to "
"convert tabs to spaces before sorting."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2235
msgid ""
"When possible, this command actually works by calling the @code{sort} "
"utility program."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:2238
#, no-wrap
msgid "Counting Columns"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2239
#, no-wrap
msgid "columns"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2240
#, no-wrap
msgid "counting columns"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2241
#, no-wrap
msgid "horizontal position"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2246
msgid ""
"The column functions convert between a character position (counting "
"characters from the beginning of the buffer) and a column position (counting "
"screen characters from the beginning of a line)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2253
msgid ""
"These functions count each character according to the number of columns it "
"occupies on the screen.  This means control characters count as occupying 2 "
"or 4 columns, depending upon the value of @code{ctl-arrow}, and tabs count "
"as occupying a number of columns that depends on the value of "
"@code{tab-width} and on the column where the tab begins.  @xref{Usual "
"Display}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2258
msgid ""
"Column number computations ignore the width of the window and the amount of "
"horizontal scrolling.  Consequently, a column value can be arbitrarily "
"high.  The first (or leftmost) column is numbered 0.  They also ignore "
"overlays and text properties, aside from invisibility."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2259
#, no-wrap
msgid "current-column"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2264
msgid ""
"This function returns the horizontal position of point, measured in columns, "
"counting from 0 at the left margin.  The column position is the sum of the "
"widths of all the displayed representations of the characters between the "
"start of the current line and point."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2266
#, no-wrap
msgid "Command move-to-column column &optional force"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2271
msgid ""
"This function moves point to @var{column} in the current line.  The "
"calculation of @var{column} takes into account the widths of the displayed "
"representations of the characters between the start of the line and point."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2274
msgid ""
"When called interactively, @var{column} is the value of prefix numeric "
"argument.  If @var{column} is not an integer, an error is signaled."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2291
msgid ""
"If it is impossible to move to column @var{column} because that is in the "
"middle of a multicolumn character such as a tab, point moves to the end of "
"that character.  However, if @var{force} is non-@code{nil}, and @var{column} "
"is in the middle of a tab, then @code{move-to-column} either converts the "
"tab into spaces (when @code{indent-tabs-mode} is @code{nil}), or inserts "
"enough spaces before it (otherwise), so that point can move precisely to "
"column @var{column}.  Other multicolumn characters can cause anomalies "
"despite @var{force}, since there is no way to split them."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2295
msgid ""
"The argument @var{force} also has an effect if the line isn't long enough to "
"reach column @var{column}; if it is @code{t}, that means to add whitespace "
"at the end of the line to reach that column."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2297
msgid "The return value is the column number actually moved to."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2301
#, no-wrap
msgid "indentation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2307
msgid ""
"The indentation functions are used to examine, move to, and change "
"whitespace that is at the beginning of a line.  Some of the functions can "
"also change whitespace elsewhere on a line.  Columns and indentation count "
"from zero at the left margin."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2317
#, no-wrap
msgid "Primitive Indent"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Functions used to count and insert indentation."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2355
#, no-wrap
msgid "Mode-Specific Indent"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Customize indentation for different modes."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2479
#, no-wrap
msgid "Region Indent"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Indent all the lines in a region."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2546
#, no-wrap
msgid "Relative Indent"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Indent the current line based on previous lines."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2623
#, no-wrap
msgid "Indent Tabs"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Adjustable, typewriter-like tab stops."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2315 ../../../../../doc/lispref/text.texi:2654
#, no-wrap
msgid "Motion by Indent"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2315
msgid "Move to first non-blank character."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2318
#, no-wrap
msgid "Indentation Primitives"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2323
msgid ""
"This section describes the primitive functions used to count and insert "
"indentation.  The functions in the following sections use these primitives.  "
"@xref{Size of Displayed Text}, for related functions."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2324
#, no-wrap
msgid "current-indentation"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2331
msgid ""
"This function returns the indentation of the current line, which is the "
"horizontal position of the first nonblank character.  If the contents are "
"entirely blank, then this is the horizontal position of the end of the line."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2333
#, no-wrap
msgid "Command indent-to column &optional minimum"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2342
msgid ""
"This function indents from point with tabs and spaces until @var{column} is "
"reached.  If @var{minimum} is specified and non-@code{nil}, then at least "
"that many spaces are inserted even if this requires going beyond "
"@var{column}.  Otherwise the function does nothing if point is already "
"beyond @var{column}.  The value is the column at which the inserted "
"indentation ends."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2346
msgid ""
"The inserted whitespace characters inherit text properties from the "
"surrounding text (usually, from the preceding text only).  @xref{Sticky "
"Properties}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2348
#, no-wrap
msgid "indent-tabs-mode"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2353
msgid ""
"If this variable is non-@code{nil}, indentation functions can insert tabs as "
"well as spaces.  Otherwise, they insert only spaces.  Setting this variable "
"automatically makes it buffer-local in the current buffer."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2356
#, no-wrap
msgid "Indentation Controlled by Major Mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2362
msgid ""
"An important function of each major mode is to customize the @key{TAB} key "
"to indent properly for the language being edited.  This section describes "
"the mechanism of the @key{TAB} key and how to control it.  The functions in "
"this section return unpredictable values."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2363
#, no-wrap
msgid "Command indent-for-tab-command &optional rigid"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2367
msgid ""
"This is the command bound to @key{TAB} in most editing modes.  Its usual "
"action is to indent the current line, but it can alternatively insert a tab "
"character or indent a region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2369
msgid "Here is what it does:"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:2375
msgid ""
"First, it checks whether Transient Mark mode is enabled and the region is "
"active.  If so, it calls @code{indent-region} to indent all the text in the "
"region (@pxref{Region Indent})."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:2382
msgid ""
"Otherwise, if the indentation function in @code{indent-line-function} is "
"@code{indent-to-left-margin} (a trivial command that inserts a tab "
"character), or if the variable @code{tab-always-indent} specifies that a tab "
"character ought to be inserted (see below), then it inserts a tab character."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:2388
msgid ""
"Otherwise, it indents the current line; this is done by calling the function "
"in @code{indent-line-function}.  If the line is already indented, and the "
"value of @code{tab-always-indent} is @code{complete} (see below), it tries "
"completing the text at point."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2396
msgid ""
"If @var{rigid} is non-@code{nil} (interactively, with a prefix argument), "
"then after this command indents a line or inserts a tab, it also rigidly "
"indents the entire balanced expression which starts at the beginning of the "
"current line, in order to reflect the new indentation.  This argument is "
"ignored if the command indents the region."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2398
#, no-wrap
msgid "indent-line-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2405
msgid ""
"This variable's value is the function to be used by "
"@code{indent-for-tab-command}, and various other indentation commands, to "
"indent the current line.  It is usually assigned by the major mode; for "
"instance, Lisp mode sets it to @code{lisp-indent-line}, C mode sets it to "
"@code{c-indent-line}, and so on.  The default value is "
"@code{indent-relative}.  @xref{Auto-Indentation}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2407
#, no-wrap
msgid "Command indent-according-to-mode"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2410
msgid ""
"This command calls the function in @code{indent-line-function} to indent the "
"current line in a way appropriate for the current major mode."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2412
#, no-wrap
msgid "Command newline-and-indent"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2416
msgid ""
"This function inserts a newline, then indents the new line (the one "
"following the newline just inserted) according to the major mode.  It does "
"indentation by calling @code{indent-according-to-mode}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2418
#, no-wrap
msgid "Command reindent-then-newline-and-indent"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2423
msgid ""
"This command reindents the current line, inserts a newline at point, and "
"then indents the new line (the one following the newline just inserted).  It "
"does indentation on both lines by calling @code{indent-according-to-mode}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2425
#, no-wrap
msgid "tab-always-indent"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2435
msgid ""
"This variable can be used to customize the behavior of the @key{TAB} "
"(@code{indent-for-tab-command}) command.  If the value is @code{t} (the "
"default), the command normally just indents the current line.  If the value "
"is @code{nil}, the command indents the current line only if point is at the "
"left margin or in the line's indentation; otherwise, it inserts a tab "
"character.  If the value is @code{complete}, the command first tries to "
"indent the current line, and if the line was already indented, it calls "
"@code{completion-at-point} to complete the text at point (@pxref{Completion "
"in Buffers})."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2437
#, no-wrap
msgid "literate programming"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2438
#, no-wrap
msgid "multi-mode indentation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2450
msgid ""
"Some major modes need to support embedded regions of text whose syntax "
"belongs to a different major mode.  Examples include @dfn{literate "
"programming} source files that combine documentation and snippets of source "
"code, Yacc/Bison programs that include snippets of Python or JS code, etc.  "
"To correctly indent the embedded chunks, the primary mode needs to delegate "
"the indentation to another mode's indentation engine (e.g., call "
"@code{js-indent-line} for JS code or @code{python-indent-line} for Python), "
"while providing it with some context to guide the indentation.  Major modes, "
"for their part, should avoid calling @code{widen} in their indentation code "
"and obey @code{prog-first-column}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2451
#, no-wrap
msgid "prog-indentation-context"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2456
msgid ""
"This variable, when non-@code{nil}, holds the indentation context for the "
"sub-mode's indentation engine provided by the superior major mode.  The "
"value should be a list of the form @code{(@var{first-column} . @var{rest}}.  "
"The members of the list have the following meaning:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:2458
#, no-wrap
msgid "first-column"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:2462
msgid ""
"The column to be used for top-level constructs.  This replaces the default "
"value of the top-level column used by the sub-mode, usually zero."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:2462
#, no-wrap
msgid "rest"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:2464
msgid "This value is currently unused."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2470
msgid ""
"The following convenience function should be used by major mode's "
"indentation engine in support of invocations as sub-modes of another major "
"mode."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2471
#, no-wrap
msgid "prog-first-column"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2476
msgid ""
"Call this function instead of using a literal value (usually, zero) of the "
"column number for indenting top-level program constructs.  The function's "
"value is the column number to use for top-level constructs.  When no "
"superior mode is in effect, this function returns zero."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2480
#, no-wrap
msgid "Indenting an Entire Region"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2484
msgid ""
"This section describes commands that indent all the lines in the region.  "
"They return unpredictable values."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2485
#, no-wrap
msgid "Command indent-region start end &optional to-column"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2491
msgid ""
"This command indents each nonblank line starting between @var{start} "
"(inclusive) and @var{end} (exclusive).  If @var{to-column} is @code{nil}, "
"@code{indent-region} indents each nonblank line by calling the current "
"mode's indentation function, the value of @code{indent-line-function}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2496
msgid ""
"If @var{to-column} is non-@code{nil}, it should be an integer specifying the "
"number of columns of indentation; then this function gives each line exactly "
"that much indentation, by either adding or deleting whitespace."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2499
msgid ""
"If there is a fill prefix, @code{indent-region} indents each line by making "
"it start with the fill prefix."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2501
#, no-wrap
msgid "indent-region-function"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2507
msgid ""
"The value of this variable is a function that can be used by "
"@code{indent-region} as a short cut.  It should take two arguments, the "
"start and end of the region.  You should design the function so that it will "
"produce the same results as indenting the lines of the region one by one, "
"but presumably faster."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2510
msgid ""
"If the value is @code{nil}, there is no short cut, and @code{indent-region} "
"actually works line by line."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2517
msgid ""
"A short-cut function is useful in modes such as C mode and Lisp mode, where "
"the @code{indent-line-function} must scan from the beginning of the function "
"definition: applying it to each line would be quadratic in time.  The short "
"cut can update the scan information as it moves through the lines indenting "
"them; this takes linear time.  In a mode where indenting a line individually "
"is fast, there is no need for a short cut."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2520
msgid ""
"@code{indent-region} with a non-@code{nil} argument @var{to-column} has a "
"different meaning and does not use this variable."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2522
#, no-wrap
msgid "Command indent-rigidly start end count"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2527
msgid ""
"This function indents all lines starting between @var{start} (inclusive) and "
"@var{end} (exclusive) sideways by @var{count} columns.  This preserves the "
"shape of the affected region, moving it as a rigid unit."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2532
msgid ""
"This is useful not only for indenting regions of unindented text, but also "
"for indenting regions of formatted code.  For example, if @var{count} is 3, "
"this command adds 3 columns of indentation to every line that begins in the "
"specified region."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2536
msgid ""
"If called interactively with no prefix argument, this command invokes a "
"transient mode for adjusting indentation rigidly.  @xref{Indentation "
"Commands,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2538
#, no-wrap
msgid "Command indent-code-rigidly start end columns &optional nochange-regexp"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2541
msgid ""
"This is like @code{indent-rigidly}, except that it doesn't alter lines that "
"start within strings or comments."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2544
msgid ""
"In addition, it doesn't alter a line if @var{nochange-regexp} matches at the "
"beginning of the line (if @var{nochange-regexp} is non-@code{nil})."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2547
#, no-wrap
msgid "Indentation Relative to Previous Lines"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2551
msgid ""
"This section describes two commands that indent the current line based on "
"the contents of previous lines."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2552
#, no-wrap
msgid "Command indent-relative &optional unindented-ok"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2560
msgid ""
"This command inserts whitespace at point, extending to the same column as "
"the next @dfn{indent point} of the previous nonblank line.  An indent point "
"is a non-whitespace character following whitespace.  The next indent point "
"is the first one at a column greater than the current column of point.  For "
"example, if point is underneath and to the left of the first non-blank "
"character of a line of text, it moves to that column by inserting "
"whitespace."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2567
msgid ""
"If the previous nonblank line has no next indent point (i.e., none at a "
"great enough column position), @code{indent-relative} either does nothing "
"(if @var{unindented-ok} is non-@code{nil}) or calls @code{tab-to-tab-stop}.  "
"Thus, if point is underneath and to the right of the last column of a short "
"line of text, this command ordinarily moves point to the next tab stop by "
"inserting whitespace."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2569
msgid "The return value of @code{indent-relative} is unpredictable."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2572
msgid "In the following example, point is at the beginning of the second line:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2577
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"@point{}The quick brown fox jumped.\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2583 ../../../../../doc/lispref/text.texi:2604
msgid ""
"Evaluation of the expression @code{(indent-relative nil)} produces the "
"following:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2588
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"            @point{}The quick brown fox jumped.\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2593
msgid ""
"In this next example, point is between the @samp{m} and @samp{p} of "
"@samp{jumped}:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2598
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum@point{}ped.\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2609
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum  @point{}ped.\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2613
#, no-wrap
msgid "Command indent-relative-first-indent-point"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2618
msgid ""
"This command indents the current line like the previous nonblank line, by "
"calling @code{indent-relative} with @code{t} as the @var{first-only} "
"argument.  The return value is unpredictable."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2621
msgid ""
"If the previous nonblank line has no indent points beyond the current "
"column, this command does nothing."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2624
#, no-wrap
msgid "Adjustable Tab Stops"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2625
#, no-wrap
msgid "tabs stops for indentation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2636
msgid ""
"This section explains the mechanism for user-specified tab stops and the "
"mechanisms that use and set them.  The name ``tab stops'' is used because "
"the feature is similar to that of the tab stops on a typewriter.  The "
"feature works by inserting an appropriate number of spaces and tab "
"characters to reach the next tab stop column; it does not affect the display "
"of tab characters in the buffer (@pxref{Usual Display}).  Note that the "
"@key{TAB} character as input uses this tab stop feature only in a few major "
"modes, such as Text mode.  @xref{Tab Stops,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2637
#, no-wrap
msgid "Command tab-to-tab-stop"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2640
msgid ""
"This command inserts spaces or tabs before point, up to the next tab stop "
"column defined by @code{tab-stop-list}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2642
#, no-wrap
msgid "tab-stop-list"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2650
msgid ""
"This variable defines the tab stop columns used by @code{tab-to-tab-stop}.  "
"It should be either @code{nil}, or a list of increasing integers, which need "
"not be evenly spaced.  The list is implicitly extended to infinity through "
"repetition of the interval between the last and penultimate elements (or "
"@code{tab-width} if the list has fewer than two elements).  A value of "
"@code{nil} means a tab stop every @code{tab-width} columns."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/text.texi:2652
msgid ""
"Use @kbd{M-x edit-tab-stops} to edit the location of tab stops "
"interactively."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2655
#, no-wrap
msgid "Indentation-Based Motion Commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2659
msgid ""
"These commands, primarily for interactive use, act based on the indentation "
"in the text."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2660
#, no-wrap
msgid "Command back-to-indentation"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2665
msgid ""
"This command moves point to the first non-whitespace character in the "
"current line (which is the line in which point is located).  It returns "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2667
#, no-wrap
msgid "Command backward-to-indentation &optional arg"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2672
msgid ""
"This command moves point backward @var{arg} lines and then to the first "
"nonblank character on that line.  It returns @code{nil}.  If @var{arg} is "
"omitted or @code{nil}, it defaults to 1."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2674
#, no-wrap
msgid "Command forward-to-indentation &optional arg"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2679
msgid ""
"This command moves point forward @var{arg} lines and then to the first "
"nonblank character on that line.  It returns @code{nil}.  If @var{arg} is "
"omitted or @code{nil}, it defaults to 1."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2683
#, no-wrap
msgid "case conversion in buffers"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2689
msgid ""
"The case change commands described here work on text in the current buffer.  "
"@xref{Case Conversion}, for case conversion functions that work on strings "
"and characters.  @xref{Case Tables}, for how to customize which characters "
"are upper or lower case and how to convert them."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2690
#, no-wrap
msgid "Command capitalize-region start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2695
msgid ""
"This function capitalizes all words in the region defined by @var{start} and "
"@var{end}.  To capitalize means to convert each word's first character to "
"upper case and convert the rest of each word to lower case.  The function "
"returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2698
msgid ""
"If one end of the region is in the middle of a word, the part of the word "
"within the region is treated as an entire word."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2701
msgid ""
"When @code{capitalize-region} is called interactively, @var{start} and "
"@var{end} are point and the mark, with the smallest first."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2707
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the 5th foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2712
#, no-wrap
msgid ""
"(capitalize-region 1 37)\n"
"@result{} nil\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:2716
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This Is The Contents Of The 5th Foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2720
#, no-wrap
msgid "Command downcase-region start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2724
msgid ""
"This function converts all of the letters in the region defined by "
"@var{start} and @var{end} to lower case.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2727
msgid ""
"When @code{downcase-region} is called interactively, @var{start} and "
"@var{end} are point and the mark, with the smallest first."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2729
#, no-wrap
msgid "Command upcase-region start end"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2733
msgid ""
"This function converts all of the letters in the region defined by "
"@var{start} and @var{end} to upper case.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2736
msgid ""
"When @code{upcase-region} is called interactively, @var{start} and @var{end} "
"are point and the mark, with the smallest first."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2738
#, no-wrap
msgid "Command capitalize-word count"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2745
msgid ""
"This function capitalizes @var{count} words after point, moving point over "
"as it does.  To capitalize means to convert each word's first character to "
"upper case and convert the rest of each word to lower case.  If @var{count} "
"is negative, the function capitalizes the @minus{}@var{count} previous words "
"but does not move point.  The value is @code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2748
msgid ""
"If point is in the middle of a word, the part of the word before point is "
"ignored when moving forward.  The rest is treated as an entire word."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2751
msgid ""
"When @code{capitalize-word} is called interactively, @var{count} is set to "
"the numeric prefix argument."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2753
#, no-wrap
msgid "Command downcase-word count"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2758
msgid ""
"This function converts the @var{count} words after point to all lower case, "
"moving point over as it does.  If @var{count} is negative, it converts the "
"@minus{}@var{count} previous words but does not move point.  The value is "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2761
msgid ""
"When @code{downcase-word} is called interactively, @var{count} is set to the "
"numeric prefix argument."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2763
#, no-wrap
msgid "Command upcase-word count"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2768
msgid ""
"This function converts the @var{count} words after point to all upper case, "
"moving point over as it does.  If @var{count} is negative, it converts the "
"@minus{}@var{count} previous words but does not move point.  The value is "
"@code{nil}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:2771
msgid ""
"When @code{upcase-word} is called interactively, @var{count} is set to the "
"numeric prefix argument."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2775
#, no-wrap
msgid "text properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2776
#, no-wrap
msgid "attributes of text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2777
#, no-wrap
msgid "properties of text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2786
msgid ""
"Each character position in a buffer or a string can have a @dfn{text "
"property list}, much like the property list of a symbol (@pxref{Property "
"Lists}).  The properties belong to a particular character at a particular "
"place, such as, the letter @samp{T} at the beginning of this sentence or the "
"first @samp{o} in @samp{foo}---if the same character occurs in two different "
"places, the two occurrences in general have different properties."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2793
msgid ""
"Each property has a name and a value.  Both of these can be any Lisp object, "
"but the name is normally a symbol.  Typically each property name symbol is "
"used for a particular purpose; for instance, the text property @code{face} "
"specifies the faces for displaying the character (@pxref{Special "
"Properties}).  The usual way to access the property list is to specify a "
"name and ask what value corresponds to it."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2798
msgid ""
"If a character has a @code{category} property, we call it the @dfn{property "
"category} of the character.  It should be a symbol.  The properties of the "
"symbol serve as defaults for the properties of the character."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2802
msgid ""
"Copying text between strings and buffers preserves the properties along with "
"the characters; this includes such diverse functions as @code{substring}, "
"@code{insert}, and @code{buffer-substring}."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:2821
#, no-wrap
msgid "Examining Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Looking at the properties of one character."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:2914
#, no-wrap
msgid "Changing Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Setting the properties of a range of text."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3085
#, no-wrap
msgid "Property Search"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Searching for where a property changes value."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3316
#, no-wrap
msgid "Special Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Particular properties with special meanings."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3798
#, no-wrap
msgid "Format Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Properties for representing formatting of text."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3826
#, no-wrap
msgid "Sticky Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "How inserted text gets properties from neighboring text."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3913
#, no-wrap
msgid "Lazy Properties"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Computing text properties in a lazy fashion only when text is examined."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:3958
#, no-wrap
msgid "Clickable Text"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid ""
"Using text properties to make regions of text do something when you click on "
"them."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:4155
#, no-wrap
msgid "Fields"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "The @code{field} property defines fields within the buffer."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:2819 ../../../../../doc/lispref/text.texi:4272
#, no-wrap
msgid "Not Intervals"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:2819
msgid "Why text properties do not use Lisp-visible text intervals."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2822
#, no-wrap
msgid "Examining Text Properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2823
#, no-wrap
msgid "examining text properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2824
#, no-wrap
msgid "text properties, examining"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2831
msgid ""
"The simplest way to examine text properties is to ask for the value of a "
"particular property of a particular character.  For that, use "
"@code{get-text-property}.  Use @code{text-properties-at} to get the entire "
"property list of a character.  @xref{Property Search}, for functions to "
"examine the properties of a number of characters at once."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2835
msgid ""
"These functions handle both strings and buffers.  Keep in mind that "
"positions in a string start from 0, whereas positions in a buffer start from "
"1.  Passing a buffer other than the current buffer may be slow."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2836
#, no-wrap
msgid "get-text-property pos prop &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2841
msgid ""
"This function returns the value of the @var{prop} property of the character "
"after position @var{pos} in @var{object} (a buffer or string).  The argument "
"@var{object} is optional and defaults to the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2845
msgid ""
"If there is no @var{prop} property strictly speaking, but the character has "
"a property category that is a symbol, then @code{get-text-property} returns "
"the @var{prop} property of that symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2847
#, no-wrap
msgid "get-char-property position prop &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2850
msgid ""
"This function is like @code{get-text-property}, except that it checks "
"overlays first and then text properties.  @xref{Overlays}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2858
msgid ""
"The argument @var{object} may be a string, a buffer, or a window.  If it is "
"a window, then the buffer displayed in that window is used for text "
"properties and overlays, but only the overlays active for that window are "
"considered.  If @var{object} is a buffer, then overlays in that buffer are "
"considered first, in order of decreasing priority, followed by the text "
"properties.  If @var{object} is a string, only text properties are "
"considered, since strings never have overlays."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2860
#, no-wrap
msgid "get-pos-property position prop &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2865
msgid ""
"This function is like @code{get-char-property}, except that it pays "
"attention to properties' stickiness and overlays' advancement settings "
"instead of the property of the character at (i.e., right after)  "
"@var{position}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2867
#, no-wrap
msgid "get-char-property-and-overlay position prop &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2870
msgid ""
"This is like @code{get-char-property}, but gives extra information about the "
"overlay that the property value comes from."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2876
msgid ""
"Its value is a cons cell whose @sc{car} is the property value, the same "
"value @code{get-char-property} would return with the same arguments.  Its "
"@sc{cdr} is the overlay in which the property was found, or @code{nil}, if "
"it was found as a text property or not found at all."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2879
msgid ""
"If @var{position} is at the end of @var{object}, both the @sc{car} and the "
"@sc{cdr} of the value are @code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2881
#, no-wrap
msgid "char-property-alias-alist"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2888
msgid ""
"This variable holds an alist which maps property names to a list of "
"alternative property names.  If a character does not specify a direct value "
"for a property, the alternative property names are consulted in order; the "
"first non-@code{nil} value is used.  This variable takes precedence over "
"@code{default-text-properties}, and @code{category} properties take "
"precedence over this variable."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2890
#, no-wrap
msgid "text-properties-at position &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2894
msgid ""
"This function returns the entire property list of the character at "
"@var{position} in the string or buffer @var{object}.  If @var{object} is "
"@code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2896
#, no-wrap
msgid "default-text-properties"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:2902
msgid ""
"This variable holds a property list giving default values for text "
"properties.  Whenever a character does not specify a value for a property, "
"neither directly, through a category symbol, or through "
"@code{char-property-alias-alist}, the value stored in this list is used "
"instead.  Here is an example:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:2911
#, no-wrap
msgid ""
"(setq default-text-properties '(foo 69)\n"
"      char-property-alias-alist nil)\n"
";; @r{Make sure character 1 has no properties of its own.}\n"
"(set-text-properties 1 2 nil)\n"
";; @r{What we get, when we ask, is the default value.}\n"
"(get-text-property 1 'foo)\n"
"     @result{} 69\n"
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:2915
#, no-wrap
msgid "Changing Text Properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2916
#, no-wrap
msgid "changing text properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:2917
#, no-wrap
msgid "text properties, changing"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2924
msgid ""
"The primitives for changing properties apply to a specified range of text in "
"a buffer or string.  The function @code{set-text-properties} (see end of "
"section) sets the entire property list of the text in that range; more "
"often, it is useful to add, change, or delete just certain properties "
"specified by name."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:2931
msgid ""
"Since text properties are considered part of the contents of the buffer (or "
"string), and can affect how a buffer looks on the screen, any change in "
"buffer text properties marks the buffer as modified.  Buffer text property "
"changes are undoable also (@pxref{Undo}).  Positions in a string start from "
"0, whereas positions in a buffer start from 1."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2932
#, no-wrap
msgid "put-text-property start end prop value &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2936
msgid ""
"This function sets the @var{prop} property to @var{value} for the text "
"between @var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2938
#, no-wrap
msgid "add-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2942
msgid ""
"This function adds or overrides text properties for the text between "
"@var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2947
msgid ""
"The argument @var{props} specifies which properties to add.  It should have "
"the form of a property list (@pxref{Property Lists}): a list whose elements "
"include the property names followed alternately by the corresponding values."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2951
msgid ""
"The return value is @code{t} if the function actually changed some "
"property's value; @code{nil} otherwise (if @var{props} is @code{nil} or its "
"values agree with those in the text)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2954
msgid ""
"For example, here is how to set the @code{comment} and @code{face} "
"properties of a range of text:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:2958
#, no-wrap
msgid ""
"(add-text-properties @var{start} @var{end}\n"
"                     '(comment t face highlight))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2961
#, no-wrap
msgid "remove-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2965
msgid ""
"This function deletes specified text properties from the text between "
"@var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2971
msgid ""
"The argument @var{props} specifies which properties to delete.  It should "
"have the form of a property list (@pxref{Property Lists}): a list whose "
"elements are property names alternating with corresponding values.  But only "
"the names matter---the values that accompany them are ignored.  For example, "
"here's how to remove the @code{face} property."
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:2974
#, no-wrap
msgid "(remove-text-properties @var{start} @var{end} '(face nil))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2979
msgid ""
"The return value is @code{t} if the function actually changed some "
"property's value; @code{nil} otherwise (if @var{props} is @code{nil} or if "
"no character in the specified text had any of those properties)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2983
msgid ""
"To remove all text properties from certain text, use "
"@code{set-text-properties} and specify @code{nil} for the new property list."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2985
#, no-wrap
msgid "remove-list-of-text-properties start end list-of-properties &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2989
msgid ""
"Like @code{remove-text-properties} except that @var{list-of-properties} is a "
"list of property names only, not an alternating list of property names and "
"values."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2991
#, no-wrap
msgid "set-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2995
msgid ""
"This function completely replaces the text property list for the text "
"between @var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:2998
msgid ""
"The argument @var{props} is the new property list.  It should be a list "
"whose elements are property names alternating with corresponding values."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3001
msgid ""
"After @code{set-text-properties} returns, all the characters in the "
"specified range have identical properties."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3004
msgid ""
"If @var{props} is @code{nil}, the effect is to get rid of all properties "
"from the specified range of text.  Here's an example:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:3007
#, no-wrap
msgid "(set-text-properties @var{start} @var{end} nil)\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3010
msgid "Do not rely on the return value of this function."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3012
#, no-wrap
msgid "add-face-text-property start end face &optional appendp object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3018
msgid ""
"This function acts on the text between @var{start} and @var{end}, adding the "
"face @var{face} to the @code{face} text property.  @var{face} should be a "
"valid value for the @code{face} property (@pxref{Special Properties}), such "
"as a face name or an anonymous face (@pxref{Faces})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3026
msgid ""
"If any text in the region already has a non-@code{nil} @code{face} property, "
"those face(s) are retained.  This function sets the @code{face} property to "
"a list of faces, with @var{face} as the first element (by default) and the "
"pre-existing faces as the remaining elements.  If the optional argument "
"@var{appendp} is non-@code{nil}, @var{face} is appended to the end of the "
"list instead.  Note that in a face list, the first occurring value for each "
"attribute takes precedence."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3029
msgid ""
"For example, the following code would assign an italicized green face to the "
"text between @var{start} and @var{end}:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:3034
#, no-wrap
msgid ""
"(add-face-text-property @var{start} @var{end} 'italic)\n"
"(add-face-text-property @var{start} @var{end} '(:foreground \"red\"))\n"
"(add-face-text-property @var{start} @var{end} '(:foreground \"green\"))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3040
msgid ""
"The optional argument @var{object}, if non-@code{nil}, specifies a buffer or "
"string to act on, rather than the current buffer.  If @var{object} is a "
"string, then @var{start} and @var{end} are zero-based indices into the "
"string."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3044
msgid ""
"The easiest way to make a string with text properties is with "
"@code{propertize}:"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3045
#, no-wrap
msgid "propertize string &rest properties"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3050
msgid ""
"This function returns a copy of @var{string} with the text properties "
"@var{properties} added.  These properties apply to all the characters in the "
"string that is returned.  Here is an example that constructs a string with a "
"@code{face} property and a @code{mouse-face} property:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:3055
#, no-wrap
msgid ""
"(propertize \"foo\" 'face 'italic\n"
"            'mouse-face 'bold-italic)\n"
"     @result{} #(\"foo\" 0 3 (mouse-face bold-italic face italic))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3060
msgid ""
"To put different properties on various parts of a string, you can construct "
"each part with @code{propertize} and then combine them with @code{concat}:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:3072
#, no-wrap
msgid ""
"(concat\n"
" (propertize \"foo\" 'face 'italic\n"
"             'mouse-face 'bold-italic)\n"
" \" and \"\n"
" (propertize \"bar\" 'face 'italic\n"
"             'mouse-face 'bold-italic))\n"
"     @result{} #(\"foo and bar\"\n"
"                 0 3 (face italic mouse-face bold-italic)\n"
"                 3 8 nil\n"
"                 8 11 (face italic mouse-face bold-italic))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3078
msgid ""
"@xref{Buffer Contents}, for the function "
"@code{buffer-substring-no-properties}, which copies text from the buffer but "
"does not copy its properties."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:3079
#, no-wrap
msgid "with-silent-modifications, and changes in text properties"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3084
msgid ""
"If you wish to add text properties to a buffer or remove them without "
"marking the buffer as modified, you can wrap the calls above in the "
"@code{with-silent-modifications} macro.  @xref{Buffer Modification}."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3086
#, no-wrap
msgid "Text Property Search Functions"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3087
#, no-wrap
msgid "searching text properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3088
#, no-wrap
msgid "text properties, searching"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3094
msgid ""
"In typical use of text properties, most of the time several or many "
"consecutive characters have the same value for a property.  Rather than "
"writing your programs to examine characters one by one, it is much faster to "
"process chunks of text that have the same property value."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3098
msgid ""
"Here are functions you can use to do this.  They use @code{eq} for comparing "
"property values.  In all cases, @var{object} defaults to the current buffer."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3103
msgid ""
"For good performance, it's very important to use the @var{limit} argument to "
"these functions, especially the ones that search for a single "
"property---otherwise, they may spend a long time scanning to the end of the "
"buffer, if the property you are interested in does not change."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3108
msgid ""
"These functions do not move point; instead, they return a position (or "
"@code{nil}).  Remember that a position is always between two characters; the "
"position returned by these functions is between two characters with "
"different properties."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3109
#, no-wrap
msgid "next-property-change pos &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3116
msgid ""
"The function scans the text forward from position @var{pos} in the string or "
"buffer @var{object} until it finds a change in some text property, then "
"returns the position of the change.  In other words, it returns the position "
"of the first character beyond @var{pos} whose properties are not identical "
"to those of the character just after @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3120
msgid ""
"If @var{limit} is non-@code{nil}, then the scan ends at position "
"@var{limit}.  If there is no property change before that point, this "
"function returns @var{limit}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3125
msgid ""
"The value is @code{nil} if the properties remain unchanged all the way to "
"the end of @var{object} and @var{limit} is @code{nil}.  If the value is "
"non-@code{nil}, it is a position greater than or equal to @var{pos}.  The "
"value equals @var{pos} only when @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3128
msgid ""
"Here is an example of how to scan the buffer by chunks of text within which "
"all properties are constant:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:3137
#, no-wrap
msgid ""
"(while (not (eobp))\n"
"  (let ((plist (text-properties-at (point)))\n"
"        (next-change\n"
"         (or (next-property-change (point) (current-buffer))\n"
"             (point-max))))\n"
"    @r{Process text from point to @var{next-change}@dots{}}\n"
"    (goto-char next-change)))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3140
#, no-wrap
msgid "previous-property-change pos &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3145
msgid ""
"This is like @code{next-property-change}, but scans back from @var{pos} "
"instead of forward.  If the value is non-@code{nil}, it is a position less "
"than or equal to @var{pos}; it equals @var{pos} only if @var{limit} equals "
"@var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3147
#, no-wrap
msgid "next-single-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3154
msgid ""
"The function scans text for a change in the @var{prop} property, then "
"returns the position of the change.  The scan goes forward from position "
"@var{pos} in the string or buffer @var{object}.  In other words, this "
"function returns the position of the first character beyond @var{pos} whose "
"@var{prop} property differs from that of the character just after @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3158
msgid ""
"If @var{limit} is non-@code{nil}, then the scan ends at position "
"@var{limit}.  If there is no property change before that point, "
"@code{next-single-property-change} returns @var{limit}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3163
msgid ""
"The value is @code{nil} if the property remains unchanged all the way to the "
"end of @var{object} and @var{limit} is @code{nil}.  If the value is "
"non-@code{nil}, it is a position greater than or equal to @var{pos}; it "
"equals @var{pos} only if @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3165
#, no-wrap
msgid "previous-single-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3170
msgid ""
"This is like @code{next-single-property-change}, but scans back from "
"@var{pos} instead of forward.  If the value is non-@code{nil}, it is a "
"position less than or equal to @var{pos}; it equals @var{pos} only if "
"@var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3172
#, no-wrap
msgid "next-char-property-change pos &optional limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3181
msgid ""
"This is like @code{next-property-change} except that it considers overlay "
"properties as well as text properties, and if no change is found before the "
"end of the buffer, it returns the maximum buffer position rather than "
"@code{nil} (in this sense, it resembles the corresponding overlay function "
"@code{next-overlay-change}, rather than @code{next-property-change}).  There "
"is no @var{object} operand because this function operates only on the "
"current buffer.  It returns the next address at which either kind of "
"property changes."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3183
#, no-wrap
msgid "previous-char-property-change pos &optional limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3187
msgid ""
"This is like @code{next-char-property-change}, but scans back from @var{pos} "
"instead of forward, and returns the minimum buffer position if no change is "
"found."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3189
#, no-wrap
msgid "next-single-char-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3197
msgid ""
"This is like @code{next-single-property-change} except that it considers "
"overlay properties as well as text properties, and if no change is found "
"before the end of the @var{object}, it returns the maximum valid position in "
"@var{object} rather than @code{nil}.  Unlike "
"@code{next-char-property-change}, this function @emph{does} have an "
"@var{object} operand; if @var{object} is not a buffer, only text-properties "
"are considered."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3199
#, no-wrap
msgid "previous-single-char-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3203
msgid ""
"This is like @code{next-single-char-property-change}, but scans back from "
"@var{pos} instead of forward, and returns the minimum valid position in "
"@var{object} if no change is found."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3205
#, no-wrap
msgid "text-property-any start end prop value &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3210
msgid ""
"This function returns non-@code{nil} if at least one character between "
"@var{start} and @var{end} has a property @var{prop} whose value is "
"@var{value}.  More precisely, it returns the position of the first such "
"character.  Otherwise, it returns @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3214 ../../../../../doc/lispref/text.texi:3225
msgid ""
"The optional fifth argument, @var{object}, specifies the string or buffer to "
"scan.  Positions are relative to @var{object}.  The default for @var{object} "
"is the current buffer."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3216
#, no-wrap
msgid "text-property-not-all start end prop value &optional object"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3221
msgid ""
"This function returns non-@code{nil} if at least one character between "
"@var{start} and @var{end} does not have a property @var{prop} with value "
"@var{value}.  More precisely, it returns the position of the first such "
"character.  Otherwise, it returns @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3227
#, no-wrap
msgid "text-property-search-forward prop &optional value predicate not-current"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3230
msgid ""
"Search for the next region that has text property @var{prop} set to "
"@var{value} according to @var{predicate}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3234
msgid ""
"This function is modelled after @code{search-forward} and friends in that it "
"moves point, but it returns a structure that describes the match instead of "
"returning it in @code{match-beginning} and friends."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3238
msgid ""
"If the text property can't be found, the function returns @code{nil}.  If "
"it's found, point is placed at the end of the region that has this text "
"property match, and a @code{prop-match} structure is returned."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3243
msgid ""
"@var{predicate} can either be @code{t} (which is a synonym for "
"@code{equal}), @code{nil} (which means ``not equal''), or a predicate that "
"will be called with two parameters: The first is @var{value}, and the second "
"is the value of the text property we're inspecting."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3246
msgid ""
"If @var{not-current}, if point is in a region where we have a match, then "
"skip past that and find the next instance instead."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3252
msgid ""
"The @code{prop-match} structure has the following accessors: "
"@code{prop-match-beginning} (the start of the match), @code{prop-match-end} "
"(the end of the match), and @code{prop-match-value} (the value of "
"@var{property} at the start of the match)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3255
msgid "In the examples below, imagine that you're in a buffer that looks like this:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:3258
#, no-wrap
msgid "This is a bold and here's bolditalic and this is the end.\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3262
msgid ""
"That is, the ``bold'' words are the @code{bold} face, and the ``italic'' "
"word is in the @code{italic} face."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3264
msgid "With point at the start:"
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:3270
#, no-wrap
msgid ""
"(while (setq match (text-property-search-forward 'face 'bold t))\n"
"  (push (buffer-substring (prop-match-beginning match)\n"
"                          (prop-match-end match))\n"
"        words))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3273
msgid "This will pick out all the words that use the @code{bold} face."
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:3279
#, no-wrap
msgid ""
"(while (setq match (text-property-search-forward 'face nil t))\n"
"  (push (buffer-substring (prop-match-beginning match)\n"
"                          (prop-match-end match))\n"
"        words))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3284
msgid ""
"This will pick out all the bits that have no face properties, which will "
"result in the list @samp{(\"This is a \" \"and here's \" \"and this is the "
"end\")} (only reversed, since we used @code{push})."
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:3290
#, no-wrap
msgid ""
"(while (setq match (text-property-search-forward 'face nil nil))\n"
"  (push (buffer-substring (prop-match-beginning match)\n"
"                          (prop-match-end match))\n"
"        words))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3295
msgid ""
"This will pick out all the regions where @code{face} is set to something, "
"but this is split up into where the properties change, so the result here "
"will be @samp{(\"bold\" \"bold\" \"italic\")}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3299
msgid ""
"For a more realistic example where you might use this, consider that you "
"have a buffer where certain sections represent URLs, and these are tagged "
"with @code{shr-url}."
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:3303
#, no-wrap
msgid ""
"(while (setq match (text-property-search-forward 'shr-url nil nil))\n"
"  (push (prop-match-value match) urls))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3306
msgid "This will give you a list of all those URLs."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3309
#, no-wrap
msgid "text-property-search-backward prop &optional value predicate not-current"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3313
msgid ""
"This is just like @code{text-property-search-backward}, but searches "
"backward instead.  Point is placed at the beginning of the matched region "
"instead of the end, though."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3317
#, no-wrap
msgid "Properties with Special Meanings"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3323
msgid ""
"Here is a table of text property names that have special built-in meanings.  "
"The following sections list a few additional special property names that "
"control filling and property inheritance.  All other names have no standard "
"meaning, and you can use them as you like."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3328
msgid ""
"Note: the properties @code{composition}, @code{display}, @code{invisible} "
"and @code{intangible} can also cause point to move to an acceptable place, "
"after each Emacs command.  @xref{Adjusting Point}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3330
#, no-wrap
msgid "property category of text character"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3332
#, no-wrap
msgid "category @r{(text property)}"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3333
#, no-wrap
msgid "category"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3338
msgid ""
"If a character has a @code{category} property, we call it the @dfn{property "
"category} of the character.  It should be a symbol.  The properties of this "
"symbol serve as defaults for the properties of the character."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3339
#, no-wrap
msgid "face"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3340
#, no-wrap
msgid "face codes of text"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3341
#, no-wrap
msgid "face @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3344
msgid ""
"The @code{face} property controls the appearance of the character "
"(@pxref{Faces}).  The value of the property can be the following:"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3348
msgid "A face name (a symbol or string)."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3353
msgid ""
"An anonymous face: a property list of the form @code{(@var{keyword} "
"@var{value} @dots{})}, where each @var{keyword} is a face attribute name and "
"@var{value} is a value for that attribute."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3359
msgid ""
"A list of faces.  Each list element should be either a face name or an "
"anonymous face.  This specifies a face which is an aggregate of the "
"attributes of each of the listed faces.  Faces occurring earlier in the list "
"have higher priority."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3367
msgid ""
"A cons cell of the form @code{(foreground-color . @var{color-name})} or "
"@code{(background-color . @var{color-name})}.  This specifies the foreground "
"or background color, similar to @code{(:foreground @var{color-name})} or "
"@code{(:background @var{color-name})}.  This form is supported for backward "
"compatibility only, and should be avoided."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3378
msgid ""
"A cons cell of the form @w{@code{(:filtered @var{filter} @var{face-spec})}}, "
"that specifies the face given by @var{face-spec}, but only if @var{filter} "
"matches when the face is used for display.  The @var{face-spec} can use any "
"of the forms mentioned above.  The @var{filter} should be of the form "
"@w{@code{(:window @var{param} @var{value})}}, which matches for windows "
"whose parameter @var{param} is @code{eq} to @var{value}.  If the variable "
"@code{face-filters-always-match} is non-@code{nil}, all face filters are "
"deemed to have matched."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3383
msgid ""
"Font Lock mode (@pxref{Font Lock Mode}) works in most buffers by dynamically "
"updating the @code{face} property of characters based on the context."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3386
msgid ""
"The @code{add-face-text-property} function provides a convenient way to set "
"this text property.  @xref{Changing Properties}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3387
#, no-wrap
msgid "font-lock-face"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3388
#, no-wrap
msgid "font-lock-face @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3395
msgid ""
"This property specifies a value for the @code{face} property that Font Lock "
"mode should apply to the underlying text.  It is one of the fontification "
"methods used by Font Lock mode, and is useful for special modes that "
"implement their own highlighting.  @xref{Precalculated Fontification}.  When "
"Font Lock mode is disabled, @code{font-lock-face} has no effect."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/lispref/text.texi:3396 ../../../../../doc/lispref/text.texi:4070
#, no-wrap
msgid "mouse-face"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3397
#, no-wrap
msgid "mouse-face @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3402
msgid ""
"This property is used instead of @code{face} when the mouse is on or near "
"the character.  For this purpose, ``near'' means that all text between the "
"character and where the mouse is have the same @code{mouse-face} property "
"value."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3407
msgid ""
"Emacs ignores all face attributes from the @code{mouse-face} property that "
"alter the text size (e.g., @code{:height}, @code{:weight}, and "
"@code{:slant}).  Those attributes are always the same as for the "
"unhighlighted text."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3408
#, no-wrap
msgid "fontified"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3409
#, no-wrap
msgid "fontified @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3415
msgid ""
"This property says whether the text is ready for display.  If @code{nil}, "
"Emacs's redisplay routine calls the functions in "
"@code{fontification-functions} (@pxref{Auto Faces}) to prepare this part of "
"the buffer before it is displayed.  It is used internally by the "
"just-in-time font locking code."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3416
#, no-wrap
msgid "display"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3421
msgid ""
"This property activates various features that change the way text is "
"displayed.  For example, it can make text appear taller or shorter, higher "
"or lower, wider or narrow, or replaced with an image.  @xref{Display "
"Property}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3422
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3423
#, no-wrap
msgid "help-echo @r{(text property)}"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3424
#, no-wrap
msgid "tooltip for help strings"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/text.texi:3430
msgid "Text help-echo"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3430
msgid ""
"If text has a string as its @code{help-echo} property, then when you move "
"the mouse onto that text, Emacs displays that string in the echo area, or in "
"the tooltip window (@pxref{Tooltips}), after passing it through "
"@code{substitute-command-keys}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3438
msgid ""
"If the value of the @code{help-echo} property is a function, that function "
"is called with three arguments, @var{window}, @var{object} and @var{pos} and "
"should return a help string or @code{nil} for none.  The first argument, "
"@var{window} is the window in which the help was found.  The second, "
"@var{object}, is the buffer, overlay or string which had the "
"@code{help-echo} property.  The @var{pos} argument is as follows:"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3442
msgid "If @var{object} is a buffer, @var{pos} is the position in the buffer."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3445
msgid ""
"If @var{object} is an overlay, that overlay has a @code{help-echo} property, "
"and @var{pos} is the position in the overlay's buffer."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3449
msgid ""
"If @var{object} is a string (an overlay string or a string displayed with "
"the @code{display} property), @var{pos} is the position in that string."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3453
msgid ""
"If the value of the @code{help-echo} property is neither a function nor a "
"string, it is evaluated to obtain a help string."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3456
msgid ""
"You can alter the way help text is displayed by setting the variable "
"@code{show-help-function} (@pxref{Help display})."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3458
msgid "This feature is used in the mode line and for other active text."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3459
#, no-wrap
msgid "help-echo-inhibit-substitution"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3460
#, no-wrap
msgid "help-echo text, avoid command-key substitution"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3461
#, no-wrap
msgid "help-echo-inhibit-substitution @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3466
msgid ""
"If the first character of a @code{help-echo} string has a non-@code{nil} "
"@code{help-echo-inhibit-substitution} property, then it is displayed as-is "
"by @code{show-help-function}, without being passed through "
"@code{substitute-command-keys}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3467
#, no-wrap
msgid "keymap"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3468
#, no-wrap
msgid "keymap of character"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3469
#, no-wrap
msgid "keymap @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3475
msgid ""
"The @code{keymap} property specifies an additional keymap for commands.  "
"When this keymap applies, it is used for key lookup before the minor mode "
"keymaps and before the buffer's local map.  @xref{Active Keymaps}.  If the "
"property value is a symbol, the symbol's function definition is used as the "
"keymap."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3481
msgid ""
"The property's value for the character before point applies if it is "
"non-@code{nil} and rear-sticky, and the property's value for the character "
"after point applies if it is non-@code{nil} and front-sticky.  (For mouse "
"clicks, the position of the click is used instead of the position of point.)"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3482
#, no-wrap
msgid "local-map"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3483
#, no-wrap
msgid "local-map @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3488
msgid ""
"This property works like @code{keymap} except that it specifies a keymap to "
"use @emph{instead of} the buffer's local map.  For most purposes (perhaps "
"all purposes), it is better to use the @code{keymap} property."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3489
#, no-wrap
msgid "syntax-table"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3492
msgid ""
"The @code{syntax-table} property overrides what the syntax table says about "
"this particular character.  @xref{Syntax Properties}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3493
#, no-wrap
msgid "read-only"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3494
#, no-wrap
msgid "read-only character"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3495
#, no-wrap
msgid "read-only @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3500
msgid ""
"If a character has the property @code{read-only}, then modifying that "
"character is not allowed.  Any command that would do so gets an error, "
"@code{text-read-only}.  If the property value is a string, that string is "
"used as the error message."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3505
msgid ""
"Insertion next to a read-only character is an error if inserting ordinary "
"text there would inherit the @code{read-only} property due to stickiness.  "
"Thus, you can control permission to insert next to read-only text by "
"controlling the stickiness.  @xref{Sticky Properties}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3510
msgid ""
"Since changing properties counts as modifying the buffer, it is not possible "
"to remove a @code{read-only} property unless you know the special trick: "
"bind @code{inhibit-read-only} to a non-@code{nil} value and then remove the "
"property.  @xref{Read Only Buffers}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3511
#, no-wrap
msgid "inhibit-read-only"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3512
#, no-wrap
msgid "inhibit-read-only @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3515
msgid ""
"Characters that have the property @code{inhibit-read-only} can be edited "
"even in read-only buffers.  @xref{Read Only Buffers}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3516
#, no-wrap
msgid "invisible"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3517
#, no-wrap
msgid "invisible @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3520
msgid ""
"A non-@code{nil} @code{invisible} property can make a character invisible on "
"the screen.  @xref{Invisible Text}, for details."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3521
#, no-wrap
msgid "intangible"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3522
#, no-wrap
msgid "intangible @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3528
msgid ""
"If a group of consecutive characters have equal and non-@code{nil} "
"@code{intangible} properties, then you cannot place point between them.  If "
"you try to move point forward into the group, point actually moves to the "
"end of the group.  If you try to move point backward into the group, point "
"actually moves to the start of the group."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3532
msgid ""
"If consecutive characters have unequal non-@code{nil} @code{intangible} "
"properties, they belong to separate groups; each group is separately treated "
"as described above."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3535
msgid ""
"When the variable @code{inhibit-point-motion-hooks} is non-@code{nil} (as it "
"is by default), the @code{intangible} property is ignored."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3542
msgid ""
"Beware: this property operates at a very low level, and affects a lot of "
"code in unexpected ways.  So use it with extreme caution.  A common misuse "
"is to put an intangible property on invisible text, which is actually "
"unnecessary since the command loop will move point outside of the invisible "
"text at the end of each command anyway.  @xref{Adjusting Point}.  For these "
"reasons, this property is obsolete; use the @code{cursor-intangible} "
"property instead."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3543
#, no-wrap
msgid "cursor-intangible"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3544
#, no-wrap
msgid "cursor-intangible @r{(text property)}"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:3545
#, no-wrap
msgid "cursor-intangible-mode"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3549
msgid ""
"When the minor mode @code{cursor-intangible-mode} is turned on, point is "
"moved away from any position that has a non-@code{nil} "
"@code{cursor-intangible} property, just before redisplay happens."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/text.texi:3550
#, no-wrap
msgid "cursor-sensor-inhibit"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3554
msgid ""
"When the variable @code{cursor-sensor-inhibit} is non-@code{nil}, the "
"@code{cursor-intangible} property and the @code{cursor-sensor-functions} "
"property (described below) are ignored."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3555
#, no-wrap
msgid "field"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3556
#, no-wrap
msgid "field @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3561
msgid ""
"Consecutive characters with the same @code{field} property constitute a "
"@dfn{field}.  Some motion functions including @code{forward-word} and "
"@code{beginning-of-line} stop moving at a field boundary.  @xref{Fields}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3562
#, no-wrap
msgid "cursor"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3563
#, no-wrap
msgid "cursor @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3579
msgid ""
"Normally, the cursor is displayed at the beginning or the end of any overlay "
"and text property strings present at the current buffer position.  You can "
"place the cursor on any desired character of these strings by giving that "
"character a non-@code{nil} @code{cursor} text property.  In addition, if the "
"value of the @code{cursor} property is an integer, it specifies the number "
"of buffer's character positions, starting with the position where the "
"overlay or the @code{display} property begins, for which the cursor should "
"be displayed on that character.  Specifically, if the value of the "
"@code{cursor} property of a character is the number @var{n}, the cursor will "
"be displayed on this character for any buffer position in the range "
"@code{[@var{ovpos}..@var{ovpos}+@var{n})}, where @var{ovpos} is the "
"overlay's starting position given by @code{overlay-start} (@pxref{Managing "
"Overlays}), or the position where the @code{display} text property begins in "
"the buffer."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3590
msgid ""
"In other words, the string character with the @code{cursor} property of any "
"non-@code{nil} value is the character where to display the cursor.  The "
"value of the property says for which buffer positions to display the cursor "
"there.  If the value is an integer @var{n}, the cursor is displayed there "
"when point is anywhere between the beginning of the overlay or "
"@code{display} property and @var{n} positions after that.  If the value is "
"anything else and non-@code{nil}, the cursor is displayed there only when "
"point is at the beginning of the @code{display} property or at "
"@code{overlay-start}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3591
#, no-wrap
msgid "cursor position for @code{display} properties and overlays"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3601
msgid ""
"When the buffer has many overlay strings (e.g., @pxref{Overlay Properties, "
"before-string}) that conceal some of the buffer text or @code{display} "
"properties that are strings, it is a good idea to use the @code{cursor} "
"property on these strings to cue the Emacs display about the places where to "
"put the cursor while traversing these strings.  This directly communicates "
"to the display engine where the Lisp program wants to put the cursor, or "
"where the user would expect the cursor, when point is located on some buffer "
"position that is ``covered'' by the display or overlay string."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3602
#, no-wrap
msgid "pointer"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3603
#, no-wrap
msgid "pointer @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3607
msgid ""
"This specifies a specific pointer shape when the mouse pointer is over this "
"text or image.  @xref{Pointer Shape}, for possible pointer shapes."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3608
#, no-wrap
msgid "line-spacing"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3609
#, no-wrap
msgid "line-spacing @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3614
msgid ""
"A newline can have a @code{line-spacing} text or overlay property that "
"controls the height of the display line ending with that newline.  The "
"property value overrides the default frame line spacing and the buffer local "
"@code{line-spacing} variable.  @xref{Line Height}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3615
#, no-wrap
msgid "line-height"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3616
#, no-wrap
msgid "line-height @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3620
msgid ""
"A newline can have a @code{line-height} text or overlay property that "
"controls the total height of the display line ending in that newline.  "
"@xref{Line Height}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3621
#, no-wrap
msgid "wrap-prefix"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3629
msgid ""
"If text has a @code{wrap-prefix} property, the prefix it defines will be "
"added at display time to the beginning of every continuation line due to "
"text wrapping (so if lines are truncated, the wrap-prefix is never used).  "
"It may be a string or an image (@pxref{Other Display Specs}), or a stretch "
"of whitespace such as specified by the @code{:width} or @code{:align-to} "
"display properties (@pxref{Specified Space})."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3634
msgid ""
"A wrap-prefix may also be specified for an entire buffer using the "
"@code{wrap-prefix} buffer-local variable (however, a @code{wrap-prefix} "
"text-property takes precedence over the value of the @code{wrap-prefix} "
"variable).  @xref{Truncation}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3635
#, no-wrap
msgid "line-prefix"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3642
msgid ""
"If text has a @code{line-prefix} property, the prefix it defines will be "
"added at display time to the beginning of every non-continuation line.  It "
"may be a string or an image (@pxref{Other Display Specs}), or a stretch of "
"whitespace such as specified by the @code{:width} or @code{:align-to} "
"display properties (@pxref{Specified Space})."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3647
msgid ""
"A line-prefix may also be specified for an entire buffer using the "
"@code{line-prefix} buffer-local variable (however, a @code{line-prefix} "
"text-property takes precedence over the value of the @code{line-prefix} "
"variable).  @xref{Truncation}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3648
#, no-wrap
msgid "modification-hooks"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3649
#, no-wrap
msgid "change hooks for a character"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3650
#, no-wrap
msgid "hooks for changing a character"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3651
#, no-wrap
msgid "modification-hooks @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3663
msgid ""
"If a character has the property @code{modification-hooks}, then its value "
"should be a list of functions; modifying that character calls all of those "
"functions before the actual modification.  Each function receives two "
"arguments: the beginning and end of the part of the buffer being modified.  "
"Note that if a particular modification hook function appears on several "
"characters being modified by a single primitive, you can't predict how many "
"times the function will be called.  Furthermore, insertion will not modify "
"any existing character, so this hook will only be run when removing some "
"characters, replacing them with others, or changing their text-properties."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3670
msgid ""
"Unlike with other similar hooks, when Emacs calls these functions, "
"@code{inhibit-modification-hooks} does @emph{not} get bound to "
"non-@code{nil}.  If the functions modify the buffer, you should consider "
"binding this variable to non-@code{nil} to prevent any buffer changes "
"running the change hooks.  Otherwise, you must be prepared for recursive "
"calls.  @xref{Change Hooks}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3673
msgid ""
"Overlays also support the @code{modification-hooks} property, but the "
"details are somewhat different (@pxref{Overlay Properties})."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3674
#, no-wrap
msgid "insert-in-front-hooks"
msgstr ""

#. type: itemx
#: ../../../../../doc/lispref/text.texi:3675
#, no-wrap
msgid "insert-behind-hooks"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3676
#, no-wrap
msgid "insert-in-front-hooks @r{(text property)}"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3677
#, no-wrap
msgid "insert-behind-hooks @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3684
msgid ""
"The operation of inserting text in a buffer also calls the functions listed "
"in the @code{insert-in-front-hooks} property of the following character and "
"in the @code{insert-behind-hooks} property of the preceding character.  "
"These functions receive two arguments, the beginning and end of the inserted "
"text.  The functions are called @emph{after} the actual insertion takes "
"place."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3691
msgid ""
"When these functions are called, @code{inhibit-modification-hooks} is bound "
"to non-@code{nil}.  If the functions modify the buffer, you might want to "
"bind @code{inhibit-modification-hooks} to @code{nil}, so as to cause the "
"change hooks to run for these modifications.  However, doing this may call "
"your own change hook recursively, so be sure to prepare for that."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3694
msgid ""
"See also @ref{Change Hooks}, for other hooks that are called when you change "
"text in a buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3695
#, no-wrap
msgid "point-entered"
msgstr ""

#. type: itemx
#: ../../../../../doc/lispref/text.texi:3696
#, no-wrap
msgid "point-left"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3697
#, no-wrap
msgid "hooks for motion of point"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3698
#, no-wrap
msgid "point-entered @r{(text property)}"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3699
#, no-wrap
msgid "point-left @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3703
msgid ""
"The special properties @code{point-entered} and @code{point-left} record "
"hook functions that report motion of point.  Each time point moves, Emacs "
"compares these two property values:"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3708
msgid "the @code{point-left} property of the character after the old location, and"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:3711
msgid "the @code{point-entered} property of the character after the new location."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3716
msgid ""
"If these two values differ, each of them is called (if not @code{nil})  with "
"two arguments: the old value of point, and the new one."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3723
msgid ""
"The same comparison is made for the characters before the old and new "
"locations.  The result may be to execute two @code{point-left} functions "
"(which may be the same function) and/or two @code{point-entered} functions "
"(which may be the same function).  In any case, all the @code{point-left} "
"functions are called first, followed by all the @code{point-entered} "
"functions."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3727
msgid ""
"It is possible to use @code{char-after} to examine characters at various "
"buffer positions without moving point to those positions.  Only an actual "
"change in the value of point runs these hook functions."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3731
msgid ""
"The variable @code{inhibit-point-motion-hooks} by default inhibits running "
"the @code{point-left} and @code{point-entered} hooks, see @ref{Inhibit point "
"motion hooks}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3734
msgid ""
"These properties are obsolete; please use @code{cursor-sensor-functions} "
"instead."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3735
#, no-wrap
msgid "cursor-sensor-functions"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3736
#, no-wrap
msgid "cursor-sensor-functions @r{(text property)}"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:3737
#, no-wrap
msgid "cursor-sensor-mode"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3745
msgid ""
"This special property records a list of functions that react to cursor "
"motion.  Each function in the list is called, just before redisplay, with 3 "
"arguments: the affected window, the previous known position of the cursor, "
"and one of the symbols @code{entered} or @code{left}, depending on whether "
"the cursor is entering the text that has this property or leaving it.  The "
"functions are called only when the minor mode @code{cursor-sensor-mode} is "
"turned on."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3748
msgid ""
"When the variable @code{cursor-sensor-inhibit} is non-@code{nil}, the "
"@code{cursor-sensor-functions} property is ignored."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3749
#, no-wrap
msgid "composition"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3750
#, no-wrap
msgid "composition @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3755
msgid ""
"This text property is used to display a sequence of characters as a single "
"glyph composed from components.  But the value of the property itself is "
"completely internal to Emacs and should not be manipulated directly by, for "
"instance, @code{put-text-property}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3756
#, no-wrap
msgid "minibuffer-message"
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:3757
#, no-wrap
msgid "minibuffer-message @r{(text property)}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3765
msgid ""
"This text property tells where to display temporary messages in an active "
"minibuffer.  Specifically, the first character of the minibuffer text which "
"has this property will have the temporary message displayed before it.  The "
"default is to display temporary messages at the end of the minibuffer text.  "
"This text property is used by the function that is the default value of "
"@code{set-message-function} (@pxref{Displaying Messages})."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3768
#, no-wrap
msgid "inhibit-point-motion-hooks"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/text.texi:3775
msgid "Inhibit point motion hooks"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3775
msgid ""
"When this obsolete variable is non-@code{nil}, @code{point-left} and "
"@code{point-entered} hooks are not run, and the @code{intangible} property "
"has no effect.  Do not set this variable globally; bind it with @code{let}.  "
"Since the affected properties are obsolete, this variable's default value is "
"@code{t}, to effectively disable them."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3777
#, no-wrap
msgid "show-help-function"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/text.texi:3790
msgid "Help display"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3790
msgid ""
"If this variable is non-@code{nil}, it specifies a function called to "
"display help strings.  These may be @code{help-echo} properties, menu help "
"strings (@pxref{Simple Menu Items}, @pxref{Extended Menu Items}), or tool "
"bar help strings (@pxref{Tool Bar}).  The specified function is called with "
"one argument, the help string to display, which is passed through "
"@code{substitute-command-keys} before being given to the function, unless "
"the help string has a non-@code{nil} @code{help-echo-inhibit-substitution} "
"property on its first character; see @ref{Keys in Documentation}.  See the "
"code of Tooltip mode (@pxref{Tooltips,,, emacs, The GNU Emacs Manual}) for "
"an example of a mode that uses @code{show-help-function}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3792
#, no-wrap
msgid "face-filters-always-match"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3796
msgid ""
"If this variable is non-@code{nil}, face filters that specify attributes "
"applied only when certain conditions are met will be deemed to match always."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3799
#, no-wrap
msgid "Formatted Text Properties"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3804
msgid ""
"These text properties affect the behavior of the fill commands.  They are "
"used for representing formatted text.  @xref{Filling}, and @ref{Margins}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3806
#, no-wrap
msgid "hard"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3812
msgid ""
"If a newline character has this property, it is a ``hard'' newline.  The "
"fill commands do not alter hard newlines and do not move words across them.  "
"However, this property takes effect only if the @code{use-hard-newlines} "
"minor mode is enabled.  @xref{Hard and Soft Newlines,, Hard and Soft "
"Newlines, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3813
#, no-wrap
msgid "right-margin"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3816
msgid ""
"This property specifies an extra right margin for filling this part of the "
"text."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3820
msgid ""
"This property specifies an extra left margin for filling this part of the "
"text."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:3821
#, no-wrap
msgid "justification"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:3824
msgid ""
"This property specifies the style of justification for filling this part of "
"the text."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3827
#, no-wrap
msgid "Stickiness of Text Properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3828
#, no-wrap
msgid "sticky text properties"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3829
#, no-wrap
msgid "inheritance, text property"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3835
msgid ""
"Self-inserting characters, the ones that get inserted into a buffer when the "
"user types them (@pxref{Commands for Insertion}), normally take on the same "
"properties as the preceding character.  This is called @dfn{inheritance} of "
"properties."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3845
msgid ""
"By contrast, a Lisp program can do insertion with inheritance or without, "
"depending on the choice of insertion primitive.  The ordinary text insertion "
"functions, such as @code{insert}, do not inherit any properties.  They "
"insert text with precisely the properties of the string being inserted, and "
"no others.  This is correct for programs that copy text from one context to "
"another---for example, into or out of the kill ring.  To insert with "
"inheritance, use the special primitives described in this section.  "
"Self-inserting characters inherit properties because they work using these "
"primitives."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3853
msgid ""
"When you do insertion with inheritance, @emph{which} properties are "
"inherited, and from where, depends on which properties are @dfn{sticky}.  "
"Insertion after a character inherits those of its properties that are "
"@dfn{rear-sticky}.  Insertion before a character inherits those of its "
"properties that are @dfn{front-sticky}.  When both sides offer different "
"sticky values for the same property, the previous character's value takes "
"precedence."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3857
msgid ""
"By default, a text property is rear-sticky but not front-sticky; thus, the "
"default is to inherit all the properties of the preceding character, and "
"nothing from the following character."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3864
msgid ""
"You can control the stickiness of various text properties with two specific "
"text properties, @code{front-sticky} and @code{rear-nonsticky}, and with the "
"variable @code{text-property-default-nonsticky}.  You can use the variable "
"to specify a different default for a given property.  You can use those two "
"text properties to make any specific properties sticky or nonsticky in any "
"particular part of the text."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3872
msgid ""
"If a character's @code{front-sticky} property is @code{t}, then all its "
"properties are front-sticky.  If the @code{front-sticky} property is a list, "
"then the sticky properties of the character are those whose names are in the "
"list.  For example, if a character has a @code{front-sticky} property whose "
"value is @code{(face read-only)}, then insertion before the character can "
"inherit its @code{face} property and its @code{read-only} property, but no "
"others."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3880
msgid ""
"The @code{rear-nonsticky} property works the opposite way.  Most properties "
"are rear-sticky by default, so the @code{rear-nonsticky} property says which "
"properties are @emph{not} rear-sticky.  If a character's "
"@code{rear-nonsticky} property is @code{t}, then none of its properties are "
"rear-sticky.  If the @code{rear-nonsticky} property is a list, properties "
"are rear-sticky @emph{unless} their names are in the list."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3881
#, no-wrap
msgid "text-property-default-nonsticky"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3886
msgid ""
"This variable holds an alist which defines the default rear-stickiness of "
"various text properties.  Each element has the form @code{(@var{property} "
". @var{nonstickiness})}, and it defines the stickiness of a particular text "
"property, @var{property}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3891
msgid ""
"If @var{nonstickiness} is non-@code{nil}, this means that the property "
"@var{property} is rear-nonsticky by default.  Since all properties are "
"front-nonsticky by default, this makes @var{property} nonsticky in both "
"directions by default."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3895
msgid ""
"The text properties @code{front-sticky} and @code{rear-nonsticky}, when "
"used, take precedence over the default @var{nonstickiness} specified in "
"@code{text-property-default-nonsticky}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3898
msgid "Here are the functions that insert text with inheritance of properties:"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3899
#, no-wrap
msgid "insert-and-inherit &rest strings"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3902
msgid ""
"Insert the strings @var{strings}, just like the function @code{insert}, but "
"inherit any sticky properties from the adjoining text."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3904
#, no-wrap
msgid "insert-before-markers-and-inherit &rest strings"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:3908
msgid ""
"Insert the strings @var{strings}, just like the function "
"@code{insert-before-markers}, but inherit any sticky properties from the "
"adjoining text."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3912
msgid "@xref{Insertion}, for the ordinary insertion functions which do not inherit."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3914
#, no-wrap
msgid "Lazy Computation of Text Properties"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3919
msgid ""
"Instead of computing text properties for all the text in the buffer, you can "
"arrange to compute the text properties for parts of the text when and if "
"something depends on them."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3923
msgid ""
"The primitive that extracts text from the buffer along with its properties "
"is @code{buffer-substring}.  Before examining the properties, this function "
"runs the abnormal hook @code{buffer-access-fontify-functions}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3924
#, no-wrap
msgid "buffer-access-fontify-functions"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3931
msgid ""
"This variable holds a list of functions for computing text properties.  "
"Before @code{buffer-substring} copies the text and text properties for a "
"portion of the buffer, it calls all the functions in this list.  Each of the "
"functions receives two arguments that specify the range of the buffer being "
"accessed.  (The buffer itself is always the current buffer.)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3935
msgid ""
"The function @code{buffer-substring-no-properties} does not call these "
"functions, since it ignores text properties anyway."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3939
msgid ""
"In order to prevent the hook functions from being called more than once for "
"the same part of the buffer, you can use the variable "
"@code{buffer-access-fontified-property}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3940
#, no-wrap
msgid "buffer-access-fontified-property"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3945
msgid ""
"If this variable's value is non-@code{nil}, it is a symbol which is used as "
"a text property name.  A non-@code{nil} value for that text property means "
"the other text properties for this character have already been computed."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3951
msgid ""
"If all the characters in the range specified for @code{buffer-substring} "
"have a non-@code{nil} value for this property, @code{buffer-substring} does "
"not call the @code{buffer-access-fontify-functions} functions.  It assumes "
"these characters already have the right text properties, and just copies the "
"properties they already have."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:3956
msgid ""
"The normal way to use this feature is that the "
"@code{buffer-access-fontify-functions} functions add this property, as well "
"as others, to the characters they operate on.  That way, they avoid being "
"called over and over for the same text."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:3959
#, no-wrap
msgid "Defining Clickable Text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3960
#, no-wrap
msgid "clickable text"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3961
#, no-wrap
msgid "follow links"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:3962
#, no-wrap
msgid "mouse-1"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3968
msgid ""
"@dfn{Clickable text} is text that can be clicked, with either the mouse or "
"via a keyboard command, to produce some result.  Many major modes use "
"clickable text to implement textual hyper-links, or @dfn{links} for short."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3974
msgid ""
"The easiest way to insert and manipulate links is to use the @code{button} "
"package.  @xref{Buttons}.  In this section, we will explain how to manually "
"set up clickable text in a buffer, using text properties.  For simplicity, "
"we will refer to the clickable text as a @dfn{link}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3980
msgid ""
"Implementing a link involves three separate steps: (1) indicating "
"clickability when the mouse moves over the link; (2) making @key{RET} or "
"@kbd{mouse-2} on that link do something; and (3) setting up a "
"@code{follow-link} condition so that the link obeys "
"@code{mouse-1-click-follows-link}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:3987
msgid ""
"To indicate clickability, add the @code{mouse-face} text property to the "
"text of the link; then Emacs will highlight the link when the mouse moves "
"over it.  In addition, you should define a tooltip or echo area message, "
"using the @code{help-echo} text property.  @xref{Special Properties}.  For "
"instance, here is how Dired indicates that file names are clickable:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:3997
#, no-wrap
msgid ""
" (if (dired-move-to-filename)\n"
"     (add-text-properties\n"
"       (point)\n"
"       (save-excursion\n"
"         (dired-move-to-end-of-filename)\n"
"         (point))\n"
"       '(mouse-face highlight\n"
"         help-echo \"mouse-2: visit this file in other window\")))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4004
msgid ""
"To make the link clickable, bind @key{RET} and @kbd{mouse-2} to commands "
"that perform the desired action.  Each command should check to see whether "
"it was called on a link, and act accordingly.  For instance, Dired's major "
"mode keymap binds @kbd{mouse-2} to the following command:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:4025
#, no-wrap
msgid ""
"(defun dired-mouse-find-file-other-window (event)\n"
"  \"In Dired, visit the file or directory name you click on.\"\n"
"  (interactive \"e\")\n"
"  (let ((window (posn-window (event-end event)))\n"
"        (pos (posn-point (event-end event)))\n"
"        file)\n"
"    (if (not (windowp window))\n"
"        (error \"No file chosen\"))\n"
"    (with-current-buffer (window-buffer window)\n"
"      (goto-char pos)\n"
"      (setq file (dired-get-file-for-visit)))\n"
"    (if (file-directory-p file)\n"
"        (or (and (cdr dired-subdir-alist)\n"
"                 (dired-goto-subdir file))\n"
"            (progn\n"
"              (select-window window)\n"
"              (dired-other-window file)))\n"
"      (select-window window)\n"
"      (find-file-other-window (file-name-sans-versions file t)))))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4031
msgid ""
"This command uses the functions @code{posn-window} and @code{posn-point} to "
"determine where the click occurred, and @code{dired-get-file-for-visit} to "
"determine which file to visit."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4035
msgid ""
"Instead of binding the mouse command in a major mode keymap, you can bind it "
"within the link text, using the @code{keymap} text property (@pxref{Special "
"Properties}).  For instance:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:4040
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (define-key map [mouse-2] 'operate-this-button)\n"
"  (put-text-property link-start link-end 'keymap map))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4046
msgid ""
"With this method, you can easily define different commands for different "
"links.  Furthermore, the global definition of @key{RET} and @kbd{mouse-2} "
"remain available for the rest of the text in the buffer."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/text.texi:4047
#, no-wrap
msgid "mouse-1-click-follows-link"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4054
msgid ""
"The basic Emacs command for clicking on links is @kbd{mouse-2}.  However, "
"for compatibility with other graphical applications, Emacs also recognizes "
"@kbd{mouse-1} clicks on links, provided the user clicks on the link quickly "
"without moving the mouse.  This behavior is controlled by the user option "
"@code{mouse-1-click-follows-link}.  @xref{Mouse References,,, emacs, The GNU "
"Emacs Manual}."
msgstr ""

#. type: kindex
#: ../../../../../doc/lispref/text.texi:4055
#, no-wrap
msgid "follow-link @r{(text or overlay property)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4068
msgid ""
"To set up the link so that it obeys @code{mouse-1-click-follows-link}, you "
"must either (1) apply a @code{follow-link} text or overlay property to the "
"link text, or (2)  bind the @code{follow-link} event to a keymap (which can "
"be a major mode keymap or a local keymap specified via the @code{keymap} "
"text property).  The value of the @code{follow-link} property, or the "
"binding for the @code{follow-link} event, acts as a condition for the link "
"action.  This condition tells Emacs two things: the circumstances under "
"which a @kbd{mouse-1} click should be regarded as occurring inside the link, "
"and how to compute an action code that says what to translate the "
"@kbd{mouse-1} click into.  The link action condition can be one of the "
"following:"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4074
msgid ""
"If the condition is the symbol @code{mouse-face}, a position is inside a "
"link if there is a non-@code{nil} @code{mouse-face} property at that "
"position.  The action code is always @code{t}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4076
msgid "For example, here is how Info mode handles @key{mouse-1}:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:4079
#, no-wrap
msgid "(define-key Info-mode-map [follow-link] 'mouse-face)\n"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4081
#, no-wrap
msgid "a function"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4086
msgid ""
"If the condition is a function, @var{func}, then a position @var{pos} is "
"inside a link if @code{(@var{func} @var{pos})} evaluates to non-@code{nil}.  "
"The value returned by @var{func} serves as the action code."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4089
msgid ""
"For example, here is how pcvs enables @kbd{mouse-1} to follow links on file "
"names only:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:4094
#, no-wrap
msgid ""
"(define-key map [follow-link]\n"
"  (lambda (pos)\n"
"    (eq (get-char-property pos 'face) 'cvs-filename-face)))\n"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4096 ../../../../../doc/lispref/text.texi:4116
#, no-wrap
msgid "anything else"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4102
msgid ""
"If the condition value is anything else, then the position is inside a link "
"and the condition itself is the action code.  Clearly, you should specify "
"this kind of condition only when applying the condition via a text or "
"property overlay on the link text (so that it does not apply to the entire "
"buffer)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4106
msgid "The action code tells @kbd{mouse-1} how to follow the link:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4108
#, no-wrap
msgid "a string or vector"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4115
msgid ""
"If the action code is a string or vector, the @kbd{mouse-1} event is "
"translated into the first element of the string or vector; i.e., the action "
"of the @kbd{mouse-1} click is the local or global binding of that character "
"or symbol.  Thus, if the action code is @code{\"foo\"}, @kbd{mouse-1} "
"translates into @kbd{f}.  If it is @code{[foo]}, @kbd{mouse-1} translates "
"into @key{foo}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4119
msgid ""
"For any other non-@code{nil} action code, the @kbd{mouse-1} event is "
"translated into a @kbd{mouse-2} event at the same position."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4126
msgid ""
"To define @kbd{mouse-1} to activate a button defined with "
"@code{define-button-type}, give the button a @code{follow-link} property.  "
"The property value should be a link action condition, as described above.  "
"@xref{Buttons}.  For example, here is how Help mode handles @kbd{mouse-1}:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:4131
#, no-wrap
msgid ""
"(define-button-type 'help-xref\n"
"  'follow-link t\n"
"  'action #'help-button-action)\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4138
msgid ""
"To define @kbd{mouse-1} on a widget defined with @code{define-widget}, give "
"the widget a @code{:follow-link} property.  The property value should be a "
"link action condition, as described above.  For example, here is how the "
"@code{link} widget specifies that a @key{mouse-1} click shall be translated "
"to @key{RET}:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/text.texi:4147
#, no-wrap
msgid ""
"(define-widget 'link 'item\n"
"  \"An embedded link.\"\n"
"  :button-prefix 'widget-link-prefix\n"
"  :button-suffix 'widget-link-suffix\n"
"  :follow-link \"\\C-m\"\n"
"  :help-echo \"Follow the link.\"\n"
"  :format \"%[%t%]\")\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4149
#, no-wrap
msgid "mouse-on-link-p pos"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4153
msgid ""
"This function returns non-@code{nil} if position @var{pos} in the current "
"buffer is on a link.  @var{pos} can also be a mouse event location, as "
"returned by @code{event-start} (@pxref{Accessing Mouse})."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:4156
#, no-wrap
msgid "Defining and Using Fields"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4157
#, no-wrap
msgid "fields"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4164
msgid ""
"A field is a range of consecutive characters in the buffer that are "
"identified by having the same value (comparing with @code{eq}) of the "
"@code{field} property (either a text-property or an overlay property).  This "
"section describes special functions that are available for operating on "
"fields."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4168
msgid ""
"You specify a field with a buffer position, @var{pos}.  We think of each "
"field as containing a range of buffer positions, so the position you specify "
"stands for the field containing that position."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4176
msgid ""
"When the characters before and after @var{pos} are part of the same field, "
"there is no doubt which field contains @var{pos}: the one those characters "
"both belong to.  When @var{pos} is at a boundary between fields, which field "
"it belongs to depends on the stickiness of the @code{field} properties of "
"the two surrounding characters (@pxref{Sticky Properties}).  The field whose "
"property would be inherited by text inserted at @var{pos} is the field that "
"contains @var{pos}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4184
msgid ""
"There is an anomalous case where newly inserted text at @var{pos} would not "
"inherit the @code{field} property from either side.  This happens if the "
"previous character's @code{field} property is not rear-sticky, and the "
"following character's @code{field} property is not front-sticky.  In this "
"case, @var{pos} belongs to neither the preceding field nor the following "
"field; the field functions treat it as belonging to an empty field whose "
"beginning and end are both at @var{pos}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4188
msgid ""
"In all of these functions, if @var{pos} is omitted or @code{nil}, the value "
"of point is used by default.  If narrowing is in effect, then @var{pos} "
"should fall within the accessible portion.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4189
#, no-wrap
msgid "field-beginning &optional pos escape-from-edge limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4191
msgid "This function returns the beginning of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4197
msgid ""
"If @var{pos} is at the beginning of its field, and @var{escape-from-edge} is "
"non-@code{nil}, then the return value is always the beginning of the "
"preceding field that @emph{ends} at @var{pos}, regardless of the stickiness "
"of the @code{field} properties around @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4201
msgid ""
"If @var{limit} is non-@code{nil}, it is a buffer position; if the beginning "
"of the field is before @var{limit}, then @var{limit} will be returned "
"instead."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4203
#, no-wrap
msgid "field-end &optional pos escape-from-edge limit"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4205
msgid "This function returns the end of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4210
msgid ""
"If @var{pos} is at the end of its field, and @var{escape-from-edge} is "
"non-@code{nil}, then the return value is always the end of the following "
"field that @emph{begins} at @var{pos}, regardless of the stickiness of the "
"@code{field} properties around @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4214
msgid ""
"If @var{limit} is non-@code{nil}, it is a buffer position; if the end of the "
"field is after @var{limit}, then @var{limit} will be returned instead."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4216
#, no-wrap
msgid "field-string &optional pos"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4219
msgid ""
"This function returns the contents of the field specified by @var{pos}, as a "
"string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4221
#, no-wrap
msgid "field-string-no-properties &optional pos"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4224
msgid ""
"This function returns the contents of the field specified by @var{pos}, as a "
"string, discarding text properties."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4226
#, no-wrap
msgid "delete-field &optional pos"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4228
msgid "This function deletes the text of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4230
#, no-wrap
msgid ""
"constrain-to-field new-pos old-pos &optional escape-from-edge only-in-line "
"inhibit-capture-property"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4234
msgid ""
"This function constrains @var{new-pos} to the field that @var{old-pos} "
"belongs to---in other words, it returns the position closest to "
"@var{new-pos} that is in the same field as @var{old-pos}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4238
msgid ""
"If @var{new-pos} is @code{nil}, then @code{constrain-to-field} uses the "
"value of point instead, and moves point to the resulting position in "
"addition to returning that position."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4250
msgid ""
"If @var{old-pos} is at the boundary of two fields, then the acceptable final "
"positions depend on the argument @var{escape-from-edge}.  If "
"@var{escape-from-edge} is @code{nil}, then @var{new-pos} must be in the "
"field whose @code{field} property equals what new characters inserted at "
"@var{old-pos} would inherit.  (This depends on the stickiness of the "
"@code{field} property for the characters before and after @var{old-pos}.)  "
"If @var{escape-from-edge} is non-@code{nil}, @var{new-pos} can be anywhere "
"in the two adjacent fields.  Additionally, if two fields are separated by "
"another field with the special value @code{boundary}, then any point within "
"this special field is also considered to be on the boundary."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4255
msgid ""
"Commands like @kbd{C-a} with no argument, that normally move backward to a "
"specific kind of location and stay there once there, probably should specify "
"@code{nil} for @var{escape-from-edge}.  Other motion commands that check "
"fields should probably pass @code{t}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4262
msgid ""
"If the optional argument @var{only-in-line} is non-@code{nil}, and "
"constraining @var{new-pos} in the usual way would move it to a different "
"line, @var{new-pos} is returned unconstrained.  This used in commands that "
"move by line, such as @code{next-line} and @code{beginning-of-line}, so that "
"they respect field boundaries only in the case where they can still move to "
"the right line."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4266
msgid ""
"If the optional argument @var{inhibit-capture-property} is non-@code{nil}, "
"and @var{old-pos} has a non-@code{nil} property of that name, then any field "
"boundaries are ignored."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4270
msgid ""
"You can cause @code{constrain-to-field} to ignore all field boundaries (and "
"so never constrain anything) by binding the variable "
"@code{inhibit-field-text-motion} to a non-@code{nil} value."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:4273
#, no-wrap
msgid "Why Text Properties are not Intervals"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4274
#, no-wrap
msgid "intervals"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4282
msgid ""
"Some editors that support adding attributes to text in the buffer do so by "
"letting the user specify intervals within the text, and adding the "
"properties to the intervals.  Those editors permit the user or the "
"programmer to determine where individual intervals start and end.  We "
"deliberately provided a different sort of interface in Emacs Lisp to avoid "
"certain paradoxical behavior associated with text modification."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4287
msgid ""
"If the actual subdivision into intervals is meaningful, that means you can "
"distinguish between a buffer that is just one interval with a certain "
"property, and a buffer containing the same text subdivided into two "
"intervals, both of which have that property."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4294
msgid ""
"Suppose you take the buffer with just one interval and kill part of the "
"text.  The text remaining in the buffer is one interval, and the copy in the "
"kill ring (and the undo list) becomes a separate interval.  Then if you yank "
"back the killed text, you get two intervals with the same properties.  Thus, "
"editing does not preserve the distinction between one interval and two."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4303
msgid ""
"Suppose we attempt to fix this problem by coalescing the two intervals when "
"the text is inserted.  That works fine if the buffer originally was a single "
"interval.  But suppose instead that we have two adjacent intervals with the "
"same properties, and we kill the text of one interval and yank it back.  The "
"same interval-coalescence feature that rescues the other case causes trouble "
"in this one: after yanking, we have just one interval.  Once again, editing "
"does not preserve the distinction between one interval and two."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4306
msgid ""
"Insertion of text at the border between intervals also raises questions that "
"have no satisfactory answer."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4312
msgid ""
"However, it is easy to arrange for editing to behave consistently for "
"questions of the form, ``What are the properties of text at this buffer or "
"string position?'' So we have decided these are the only questions that make "
"sense; we have not implemented asking questions about where intervals start "
"or end."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4317
msgid ""
"In practice, you can usually use the text property search functions in place "
"of explicit interval boundaries.  You can think of them as finding the "
"boundaries of intervals, assuming that intervals are always coalesced "
"whenever possible.  @xref{Property Search}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4320
msgid ""
"Emacs also provides explicit intervals as a presentation feature; see "
"@ref{Overlays}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4322
#, no-wrap
msgid "Substituting for a Character Code"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4323
#, no-wrap
msgid "replace characters in region"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4324
#, no-wrap
msgid "substitute characters"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4328
msgid ""
"The following functions replace characters within a specified region based "
"on their character codes."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4329
#, no-wrap
msgid "subst-char-in-region start end old-char new-char &optional noundo"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4330
#, no-wrap
msgid "replace characters"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4334
msgid ""
"This function replaces all occurrences of the character @var{old-char} with "
"the character @var{new-char} in the region of the current buffer defined by "
"@var{start} and @var{end}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4335
#, no-wrap
msgid "undo avoidance"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4340
msgid ""
"If @var{noundo} is non-@code{nil}, then @code{subst-char-in-region} does not "
"record the change for undo and does not mark the buffer as modified.  This "
"was useful for controlling the old selective display feature "
"(@pxref{Selective Display})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4343
msgid "@code{subst-char-in-region} does not move point and returns @code{nil}."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:4349
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:4354
#, no-wrap
msgid ""
"(subst-char-in-region 1 20 ?i ?X)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/text.texi:4358
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"ThXs Xs the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4362
#, no-wrap
msgid "Command translate-region start end table"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4365
msgid ""
"This function applies a translation table to the characters in the buffer "
"between positions @var{start} and @var{end}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4371
msgid ""
"The translation table @var{table} is a string or a char-table; @code{(aref "
"@var{table} @var{ochar})} gives the translated character corresponding to "
"@var{ochar}.  If @var{table} is a string, any characters with codes larger "
"than the length of @var{table} are not altered by the translation."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4376
msgid ""
"The return value of @code{translate-region} is the number of characters that "
"were actually changed by the translation.  This does not count characters "
"that were mapped into themselves in the translation table."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4380
#, no-wrap
msgid "registers"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4388
msgid ""
"A register is a sort of variable used in Emacs editing that can hold a "
"variety of different kinds of values.  Each register is named by a single "
"character.  All @acronym{ASCII} characters and their meta variants (but with "
"the exception of @kbd{C-g}) can be used to name registers.  Thus, there are "
"255 possible registers.  A register is designated in Emacs Lisp by the "
"character that is its name."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:4389
#, no-wrap
msgid "register-alist"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:4393
msgid ""
"This variable is an alist of elements of the form @code{(@var{name} .  "
"@var{contents})}.  Normally, there is one element for each Emacs register "
"that has been used."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:4396
msgid "The object @var{name} is a character (an integer) identifying the register."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4399
msgid "The @var{contents} of a register can have several possible types:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4401
#, no-wrap
msgid "a number"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4404
msgid ""
"A number stands for itself.  If @code{insert-register} finds a number in the "
"register, it converts the number to decimal."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4405
#, no-wrap
msgid "a marker"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4407
msgid "A marker represents a buffer position to jump to."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4408
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4410
msgid "A string is text saved in the register."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4411
#, no-wrap
msgid "a rectangle"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4412
#, no-wrap
msgid "rectangle, as contents of a register"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4414
msgid "A rectangle is represented by a list of strings."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/lispref/text.texi:4415
#, no-wrap
msgid "(@var{window-configuration} @var{position})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4418
msgid ""
"This represents a window configuration to restore in one frame, and a "
"position to jump to in the current buffer."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/lispref/text.texi:4420
#, no-wrap
msgid "(@var{frame-configuration} @var{position})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4423
msgid ""
"This represents a frame configuration to restore, and a position to jump to "
"in the current buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4424
#, no-wrap
msgid "(file @var{filename})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4427
msgid ""
"This represents a file to visit; jumping to this value visits file "
"@var{filename}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4428
#, no-wrap
msgid "(file-query @var{filename} @var{position})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4433
msgid ""
"This represents a file to visit and a position in it; jumping to this value "
"visits file @var{filename} and goes to buffer position @var{position}.  "
"Restoring this type of position asks the user for confirmation first."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4437
msgid ""
"The functions in this section return unpredictable values unless otherwise "
"stated."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4438
#, no-wrap
msgid "get-register reg"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4441
msgid ""
"This function returns the contents of the register @var{reg}, or @code{nil} "
"if it has no contents."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4443
#, no-wrap
msgid "set-register reg value"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4447
msgid ""
"This function sets the contents of register @var{reg} to @var{value}.  A "
"register can be set to any value, but the other register functions expect "
"only certain data types.  The return value is @var{value}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4449
#, no-wrap
msgid "Command view-register reg"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4451
msgid "This command displays what is contained in register @var{reg}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4453
#, no-wrap
msgid "Command insert-register reg &optional beforep"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4456
msgid "This command inserts contents of register @var{reg} into the current buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4460
msgid ""
"Normally, this command puts point before the inserted text, and the mark "
"after it.  However, if the optional second argument @var{beforep} is "
"non-@code{nil}, it puts the mark before and point after."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4463
msgid ""
"When called interactively, the command defaults to putting point after text, "
"and a prefix argument inverts this behavior."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4467
msgid ""
"If the register contains a rectangle, then the rectangle is inserted with "
"its upper left corner at point.  This means that text is inserted in the "
"current line and underneath it on successive lines."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4471
msgid ""
"If the register contains something other than saved text (a string) or a "
"rectangle (a list), currently useless things happen.  This may be changed in "
"the future."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4473
#, no-wrap
msgid "register-read-with-preview prompt"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4474
#, no-wrap
msgid "register preview"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4483
msgid ""
"This function reads and returns a register name, prompting with @var{prompt} "
"and possibly showing a preview of the existing registers and their "
"contents.  The preview is shown in a temporary window, after the delay "
"specified by the user option @code{register-preview-delay}, if its value and "
"@code{register-alist} are both non-@code{nil}.  The preview is also shown if "
"the user requests help (e.g., by typing the help character).  We recommend "
"that all interactive commands which read register names use this function."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4486
#, no-wrap
msgid "Transposition of Text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4489
msgid "This function can be used to transpose stretches of text:"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4490
#, no-wrap
msgid "transpose-regions start1 end1 start2 end2 &optional leave-markers"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4495
msgid ""
"This function exchanges two nonoverlapping portions of the buffer (if they "
"overlap, the function signals an error).  Arguments @var{start1} and "
"@var{end1} specify the bounds of one portion and arguments @var{start2} and "
"@var{end2} specify the bounds of the other portion."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4502
msgid ""
"Normally, @code{transpose-regions} relocates markers with the transposed "
"text; a marker previously positioned within one of the two transposed "
"portions moves along with that portion, thus remaining between the same two "
"characters in their new position.  However, if @var{leave-markers} is "
"non-@code{nil}, @code{transpose-regions} does not do this---it leaves all "
"markers unrelocated."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4505
#, no-wrap
msgid "Replacing Buffer Text"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4509
msgid ""
"You can use the following function to replace the text of one buffer with "
"the text of another buffer:"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4510
#, no-wrap
msgid "Command replace-buffer-contents source &optional max-secs max-costs"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4517
msgid ""
"This function replaces the accessible portion of the current buffer with the "
"accessible portion of the buffer @var{source}.  @var{source} may either be a "
"buffer object or the name of a buffer.  When @code{replace-buffer-contents} "
"succeeds, the text of the accessible portion of the current buffer will be "
"equal to the text of the accessible portion of the @var{source} buffer."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4525
msgid ""
"This function attempts to keep point, markers, text properties, and overlays "
"in the current buffer intact.  One potential case where this behavior is "
"useful is external code formatting programs: they typically write the "
"reformatted text into a temporary buffer or file, and using "
"@code{delete-region} and @code{insert-buffer-substring} would destroy these "
"properties.  However, the latter combination is typically faster "
"(@xref{Deletion}, and @ref{Insertion})."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4532
msgid ""
"For its working, @code{replace-buffer-contents} needs to compare the "
"contents of the original buffer with that of @var{source} which is a costly "
"operation if the buffers are huge and there is a high number of differences "
"between them.  In order to keep @code{replace-buffer-contents}'s runtime in "
"bounds, it has two optional arguments."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4536
msgid ""
"@var{max-secs} defines a hard boundary in terms of seconds.  If given and "
"exceeded, it will fall back to @code{delete-region} and "
"@code{insert-buffer-substring}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4540
msgid ""
"@var{max-costs} defines the quality of the difference computation.  If the "
"actual costs exceed this limit, heuristics are used to provide a faster but "
"suboptimal solution.  The default value is 1000000."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4544
msgid ""
"@code{replace-buffer-contents} returns t if a non-destructive replacement "
"could be performed.  Otherwise, i.e., if @var{max-secs} was exceeded, it "
"returns nil."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4546
#, no-wrap
msgid "replace-region-contents beg end replace-fn &optional max-secs max-costs"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4551
msgid ""
"This function replaces the region between @var{beg} and @var{end} using the "
"given @var{replace-fn}.  The function @var{replace-fn} is run in the current "
"buffer narrowed to the specified region and it should return either a string "
"or a buffer replacing the region."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4555
msgid ""
"The replacement is performed using @code{replace-buffer-contents} (see "
"above) which also describes the @var{max-secs} and @var{max-costs} arguments "
"and the return value."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4561
msgid ""
"Note: If the replacement is a string, it will be placed in a temporary "
"buffer so that @code{replace-buffer-contents} can operate on it.  Therefore, "
"if you already have the replacement in a buffer, it makes no sense to "
"convert it to a string using @code{buffer-substring} or similar."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4564
#, no-wrap
msgid "Dealing With Compressed Data"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4570
msgid ""
"When @code{auto-compression-mode} is enabled, Emacs automatically "
"uncompresses compressed files when you visit them, and automatically "
"recompresses them if you alter and save them.  @xref{Compressed Files,,, "
"emacs, The GNU Emacs Manual}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4575
msgid ""
"The above feature works by calling an external executable (e.g., "
"@command{gzip}).  Emacs can also be compiled with support for built-in "
"decompression using the zlib library, which is faster than calling an "
"external program."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4576
#, no-wrap
msgid "zlib-available-p"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4579
msgid ""
"This function returns non-@code{nil} if built-in zlib decompression is "
"available."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4581
#, no-wrap
msgid "zlib-decompress-region start end &optional allow-partial"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4592
msgid ""
"This function decompresses the region between @var{start} and @var{end}, "
"using built-in zlib decompression.  The region should contain data that were "
"compressed with gzip or zlib.  On success, the function replaces the "
"contents of the region with the decompressed data.  If @var{allow-partial} "
"is @code{nil} or omitted, then on failure, the function leaves the region "
"unchanged and returns @code{nil}.  Otherwise, it returns the number of bytes "
"that were not decompressed and replaces the region text by whatever data was "
"successfully decompressed.  This function can be called only in unibyte "
"buffers."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4596
#, no-wrap
msgid "Base 64 Encoding"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4597
#, no-wrap
msgid "base 64 encoding"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4609
msgid ""
"Base 64 code is used in email to encode a sequence of 8-bit bytes as a "
"longer sequence of @acronym{ASCII} graphic characters.  It is defined in "
"Internet RFC@footnote{ An RFC, an acronym for @dfn{Request for Comments}, is "
"a numbered Internet informational document describing a standard.  RFCs are "
"usually written by technical experts acting on their own initiative, and are "
"traditionally written in a pragmatic, experience-driven manner.  }2045 and "
"also in RFC 4648.  This section describes the functions for converting to "
"and from this code."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4610
#, no-wrap
msgid "Command base64-encode-region beg end &optional no-line-break"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4617
msgid ""
"This function converts the region from @var{beg} to @var{end} into base 64 "
"code.  It returns the length of the encoded text.  An error is signaled if a "
"character in the region is multibyte, i.e., in a multibyte buffer the region "
"must contain only characters from the charsets @code{ascii}, "
"@code{eight-bit-control} and @code{eight-bit-graphic}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4622
msgid ""
"Normally, this function inserts newline characters into the encoded text, to "
"avoid overlong lines.  However, if the optional argument @var{no-line-break} "
"is non-@code{nil}, these newlines are not added, so the output is just one "
"long line."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4624
#, no-wrap
msgid "Command base64url-encode-region beg end &optional no-pad"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4629
msgid ""
"This function is like @code{base64-encode-region}, but it implements the URL "
"variant of base 64 encoding, per RFC 4648, and it doesn't insert newline "
"characters into the encoded text, so the output is just one long line."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4632
msgid ""
"If the optional argument @var{no-pad} is non-@code{nil} then this function "
"doesn't generate the padding (@code{=})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4634
#, no-wrap
msgid "base64-encode-string string &optional no-line-break"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4639
msgid ""
"This function converts the string @var{string} into base 64 code.  It "
"returns a string containing the encoded text.  As for "
"@code{base64-encode-region}, an error is signaled if a character in the "
"string is multibyte."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4644
msgid ""
"Normally, this function inserts newline characters into the encoded text, to "
"avoid overlong lines.  However, if the optional argument @var{no-line-break} "
"is non-@code{nil}, these newlines are not added, so the result string is "
"just one long line."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4646
#, no-wrap
msgid "base64url-encode-string string &optional no-pad"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4650
msgid ""
"Like @code{base64-encode-string}, but generates the URL variant of base 64, "
"and doesn't insert newline characters into the encoded text, so the result "
"is just one long line."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4653
msgid ""
"If the optional argument @var{no-pad} is non-@code{nil} then this function "
"doesn't generate the padding."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4655
#, no-wrap
msgid "Command base64-decode-region beg end &optional base64url"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/text.texi:4659
msgid ""
"This function converts the region from @var{beg} to @var{end} from base 64 "
"code into the corresponding decoded text.  It returns the length of the "
"decoded text."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4661 ../../../../../doc/lispref/text.texi:4672
msgid "The decoding functions ignore newline characters in the encoded text."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4664 ../../../../../doc/lispref/text.texi:4676
msgid ""
"If optional argument @var{base64url} is non-@code{nil}, then padding is "
"optional, and the URL variant of base 64 encoding is used."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4666
#, no-wrap
msgid "base64-decode-string string &optional base64url"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4670
msgid ""
"This function converts the string @var{string} from base 64 code into the "
"corresponding decoded text.  It returns a unibyte string containing the "
"decoded text."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4680 ../../../../../doc/lispref/text.texi:4767
#, no-wrap
msgid "MD5 checksum"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4681 ../../../../../doc/lispref/text.texi:4768
#, no-wrap
msgid "SHA hash"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4682 ../../../../../doc/lispref/text.texi:4769
#, no-wrap
msgid "hash, cryptographic"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4683 ../../../../../doc/lispref/text.texi:4770
#, no-wrap
msgid "cryptographic hash"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4689
msgid ""
"Emacs has built-in support for computing @dfn{cryptographic hashes}.  A "
"cryptographic hash, or @dfn{checksum}, is a digital fingerprint of a piece "
"of data (e.g., a block of text) which can be used to check that you have an "
"unaltered copy of that data."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4690
#, no-wrap
msgid "message digest"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4701
msgid ""
"Emacs supports several common cryptographic hash algorithms: MD5, SHA-1, "
"SHA-2, SHA-224, SHA-256, SHA-384 and SHA-512.  MD5 is the oldest of these "
"algorithms, and is commonly used in @dfn{message digests} to check the "
"integrity of messages transmitted over a network.  MD5 and SHA-1 are not "
"collision resistant (i.e., it is possible to deliberately design different "
"pieces of data which have the same MD5 or SHA-1 hash), so you should not use "
"them for anything security-related.  For security-related applications you "
"should use the other hash types, such as SHA-2 (e.g. @code{sha256} or "
"@code{sha512})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4702
#, no-wrap
msgid "secure-hash-algorithms"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4705
msgid ""
"This function returns a list of symbols representing algorithms that "
"@code{secure-hash} can use."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4707
#, no-wrap
msgid "secure-hash algorithm object &optional start end binary"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4713
msgid ""
"This function returns a hash for @var{object}.  The argument @var{algorithm} "
"is a symbol stating which hash to compute: one of @code{md5}, @code{sha1}, "
"@code{sha224}, @code{sha256}, @code{sha384} or @code{sha512}.  The argument "
"@var{object} should be a buffer or a string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4718
msgid ""
"The optional arguments @var{start} and @var{end} are character positions "
"specifying the portion of @var{object} to compute the message digest for.  "
"If they are @code{nil} or omitted, the hash is computed for the whole of "
"@var{object}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4723
msgid ""
"If the argument @var{binary} is omitted or @code{nil}, the function returns "
"the @dfn{text form} of the hash, as an ordinary Lisp string.  If "
"@var{binary} is non-@code{nil}, it returns the hash in @dfn{binary form}, as "
"a sequence of bytes stored in a unibyte string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4732
msgid ""
"This function does not compute the hash directly from the internal "
"representation of @var{object}'s text (@pxref{Text Representations}).  "
"Instead, it encodes the text using a coding system (@pxref{Coding Systems}), "
"and computes the hash from that encoded text.  If @var{object} is a buffer, "
"the coding system used is the one which would be chosen by default for "
"writing the text into a file.  If @var{object} is a string, the user's "
"preferred coding system is used (@pxref{Recognize Coding,,, emacs, GNU Emacs "
"Manual})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4734
#, no-wrap
msgid "md5 object &optional start end coding-system noerror"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4740
msgid ""
"This function returns an MD5 hash.  It is semi-obsolete, since for most "
"purposes it is equivalent to calling @code{secure-hash} with @code{md5} as "
"the @var{algorithm} argument.  The @var{object}, @var{start} and @var{end} "
"arguments have the same meanings as in @code{secure-hash}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4744
msgid ""
"If @var{coding-system} is non-@code{nil}, it specifies a coding system to "
"use to encode the text; if omitted or @code{nil}, the default coding system "
"is used, like in @code{secure-hash}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4749
msgid ""
"Normally, @code{md5} signals an error if the text can't be encoded using the "
"specified or chosen coding system.  However, if @var{noerror} is "
"non-@code{nil}, it silently uses @code{raw-text} coding instead."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4751
#, no-wrap
msgid "buffer-hash &optional buffer-or-name"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4763
msgid ""
"Return a hash of @var{buffer-or-name}.  If @code{nil}, this defaults to the "
"current buffer.  As opposed to @code{secure-hash}, this function computes "
"the hash based on the internal representation of the buffer, disregarding "
"any coding systems.  It's therefore only useful when comparing two buffers "
"running in the same Emacs, and is not guaranteed to return the same hash "
"between different Emacs versions.  It should be somewhat more efficient on "
"larger buffers than @code{secure-hash} is, and should not allocate more "
"memory."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4771
#, no-wrap
msgid "AEAD cipher"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4772
#, no-wrap
msgid "cipher, AEAD"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4773
#, no-wrap
msgid "symmetric cipher"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4774
#, no-wrap
msgid "cipher, symmetric"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4779
msgid ""
"If compiled with GnuTLS, Emacs offers built-in cryptographic support.  "
"Following the GnuTLS API terminology, the available tools are digests, MACs, "
"symmetric ciphers, and AEAD ciphers."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4785
msgid ""
"The terms used herein, such as IV (Initialization Vector), require some "
"familiarity with cryptography and will not be defined in detail.  Please "
"consult @uref{https://www.gnutls.org/} for specific documentation which may "
"help you understand the terminology and structure of the GnuTLS library."
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:4789
msgid "Format of GnuTLS Cryptography Inputs::"
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:4789 ../../../../../doc/lispref/text.texi:4831 ../../../../../doc/lispref/text.texi:4832
#, no-wrap
msgid "GnuTLS Cryptographic Functions"
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:4791 ../../../../../doc/lispref/text.texi:4792
#, no-wrap
msgid "Format of GnuTLS Cryptography Inputs"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4793
#, no-wrap
msgid "format of gnutls cryptography inputs"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4794
#, no-wrap
msgid "gnutls cryptography inputs format"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4798
msgid ""
"The inputs to GnuTLS cryptographic functions can be specified in several "
"ways, both as primitive Emacs Lisp types or as lists."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4801
msgid ""
"The list form is currently similar to how @code{md5} and @code{secure-hash} "
"operate."
msgstr ""

#. type: var{#1}
#: ../../../../../doc/lispref/text.texi:4803
#, no-wrap
msgid "buffer"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4805
msgid "Simply passing a buffer as input means the whole buffer should be used."
msgstr ""

#. type: var{#1}
#: ../../../../../doc/lispref/text.texi:4806
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4810
msgid ""
"A string as input will be used directly.  It may be modified by the function "
"(unlike most other Emacs Lisp functions) to reduce the chance of exposing "
"sensitive data after the function does its work."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4811
#, no-wrap
msgid ""
"(@var{buffer-or-string} @var{start} @var{end} @var{coding-system} "
"@var{noerror})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4814
msgid ""
"This specifies a buffer or a string as described above, but an optional "
"range can be specified with @var{start} and @var{end}."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4816
msgid "In addition an optional @var{coding-system} can be specified if needed."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4821
msgid ""
"The last optional item, @var{noerror}, overrides the normal error when the "
"text can't be encoded using the specified or chosen coding system.  When "
"@var{noerror} is non-@code{nil}, this function silently uses @code{raw-text} "
"coding instead."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:4822
#, no-wrap
msgid "(@code{iv-auto} @var{length})"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:4828
msgid ""
"This will generate an IV (Initialization Vector) of the specified length "
"using the GnuTLS @code{GNUTLS_RND_NONCE} generator and pass it to the "
"function.  This ensures that the IV is unpredictable and unlikely to be "
"reused in the same session.  The actual value of the IV is returned by the "
"function as described below."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4833
#, no-wrap
msgid "gnutls cryptographic functions"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4835
#, no-wrap
msgid "gnutls-digests"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4837
msgid "This function returns the alist of the GnuTLS digest algorithms."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4843
msgid ""
"Each entry has a key which represents the algorithm, followed by a plist "
"with internal details about the algorithm.  The plist will have @code{:type "
"gnutls-digest-algorithm} and also will have the key "
"@code{:digest-algorithm-length 64} to indicate the size, in bytes, of the "
"resulting digest."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4846 ../../../../../doc/lispref/text.texi:4875
msgid ""
"There is a name parallel between GnuTLS MAC and digest algorithms but they "
"are separate things internally and should not be mixed."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4848
#, no-wrap
msgid "gnutls-hash-digest digest-method input"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4852
msgid ""
"The @var{digest-method} can be the whole plist from @code{gnutls-digests}, "
"or just the symbol key, or a string with the name of that symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4855 ../../../../../doc/lispref/text.texi:4888
msgid ""
"The @var{input} can be specified as a buffer or string or in other ways "
"(@pxref{Format of GnuTLS Cryptography Inputs})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4859
msgid ""
"This function returns @code{nil} on error, and signals a Lisp error if the "
"@var{digest-method} or @var{input} are invalid.  On success, it returns a "
"list of a binary string (the output) and the IV used."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4861
#, no-wrap
msgid "gnutls-macs"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4863
msgid "This function returns the alist of the GnuTLS MAC algorithms."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4870
msgid ""
"Each entry has a key which represents the algorithm, followed by a plist "
"with internal details about the algorithm.  The plist will have @code{:type "
"gnutls-mac-algorithm} and also will have the keys "
"@code{:mac-algorithm-length} @code{:mac-algorithm-keysize} "
"@code{:mac-algorithm-noncesize} to indicate the size, in bytes, of the "
"resulting hash, the key, and the nonce respectively."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4872
msgid "The nonce is currently unused and only some MACs support it."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4877
#, no-wrap
msgid "gnutls-hash-mac hash-method key input"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4881
msgid ""
"The @var{hash-method} can be the whole plist from @code{gnutls-macs}, or "
"just the symbol key, or a string with the name of that symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4885 ../../../../../doc/lispref/text.texi:4917 ../../../../../doc/lispref/text.texi:4942
msgid ""
"The @var{key} can be specified as a buffer or string or in other ways "
"(@pxref{Format of GnuTLS Cryptography Inputs}).  The @var{key} will be wiped "
"after use if it's a string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4891
msgid ""
"This function returns @code{nil} on error, and signals a Lisp error if the "
"@var{hash-method} or @var{key} or @var{input} are invalid."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4894 ../../../../../doc/lispref/text.texi:4932 ../../../../../doc/lispref/text.texi:4957
msgid ""
"On success, it returns a list of a binary string (the output) and the IV "
"used."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4896
#, no-wrap
msgid "gnutls-ciphers"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4898
msgid "This function returns the alist of the GnuTLS ciphers."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4907
msgid ""
"Each entry has a key which represents the cipher, followed by a plist with "
"internal details about the algorithm.  The plist will have @code{:type "
"gnutls-symmetric-cipher} and also will have the keys "
"@code{:cipher-aead-capable} set to @code{nil} or @code{t} to indicate AEAD "
"capability; and @code{:cipher-tagsize} @code{:cipher-blocksize} "
"@code{:cipher-keysize} @code{:cipher-ivsize} to indicate the size, in bytes, "
"of the tag, block size of the resulting data, the key, and the IV "
"respectively."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4909
#, no-wrap
msgid "gnutls-symmetric-encrypt cipher key iv input &optional aead_auth"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4913 ../../../../../doc/lispref/text.texi:4938
msgid ""
"The @var{cipher} can be the whole plist from @code{gnutls-ciphers}, or just "
"the symbol key, or a string with the name of that symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4921 ../../../../../doc/lispref/text.texi:4946
msgid ""
"The @var{iv} and @var{input} and the optional @var{aead_auth} can be "
"specified as a buffer or string or in other ways (@pxref{Format of GnuTLS "
"Cryptography Inputs})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4924 ../../../../../doc/lispref/text.texi:4949
msgid ""
"@var{aead_auth} is only checked with AEAD ciphers, that is, ciphers whose "
"plist has @code{:cipher-aead-capable t}.  Otherwise it's ignored."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4929
msgid ""
"This function returns @code{nil} on error, and signals a Lisp error if the "
"@var{cipher} or @var{key}, @var{iv}, or @var{input} are invalid, or if "
"@var{aead_auth} was specified with an AEAD cipher and was invalid."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4934
#, no-wrap
msgid "gnutls-symmetric-decrypt cipher key iv input &optional aead_auth"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4954
msgid ""
"This function returns @code{nil} on decryption error, and signals a Lisp "
"error if the @var{cipher} or @var{key}, @var{iv}, or @var{input} are "
"invalid, or if @var{aead_auth} was specified with an AEAD cipher and was "
"invalid."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:4960
#, no-wrap
msgid "Parsing HTML and XML"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:4961
#, no-wrap
msgid "parsing html"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4964
msgid "Emacs can be compiled with built-in libxml2 support."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4965
#, no-wrap
msgid "libxml-available-p"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4968
msgid ""
"This function returns non-@code{nil} if built-in libxml2 support is "
"available in this Emacs session."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:4972
msgid ""
"When libxml2 support is available, the following functions can be used to "
"parse HTML or XML text into Lisp object trees."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4973
#, no-wrap
msgid "libxml-parse-html-region start end &optional base-url discard-comments"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4978
msgid ""
"This function parses the text between @var{start} and @var{end} as HTML, and "
"returns a list representing the HTML @dfn{parse tree}.  It attempts to "
"handle real-world HTML by robustly coping with syntax mistakes."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4981
msgid ""
"The optional argument @var{base-url}, if non-@code{nil}, should be a string "
"specifying the base URL for relative URLs occurring in links."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4987
msgid ""
"If the optional argument @var{discard-comments} is non-@code{nil}, any "
"top-level comment is discarded.  (This argument is obsolete and will be "
"removed in future Emacs versions.  To remove comments, use the "
"@code{xml-remove-comments} utility function on the data before you call the "
"parsing function.)"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4992
msgid ""
"In the parse tree, each HTML node is represented by a list in which the "
"first element is a symbol representing the node name, the second element is "
"an alist of node attributes, and the remaining elements are the subnodes."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:4995
msgid ""
"The following example demonstrates this.  Given this (malformed) HTML "
"document:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:4998
#, no-wrap
msgid "<html><head></head><body width=101><div class=thing>Foo<div>Yes\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5003
msgid ""
"A call to @code{libxml-parse-html-region} returns this @acronym{DOM} "
"(document object model):"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:5012
#, no-wrap
msgid ""
"(html nil\n"
" (head nil)\n"
" (body ((width . \"101\"))\n"
"  (div ((class . \"thing\"))\n"
"   \"Foo\"\n"
"   (div nil\n"
"    \"Yes\"))))\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5015
#, no-wrap
msgid "rendering html"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5016
#, no-wrap
msgid "shr-insert-document dom"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5021
msgid ""
"This function renders the parsed HTML in @var{dom} into the current buffer.  "
"The argument @var{dom} should be a list as generated by "
"@code{libxml-parse-html-region}.  This function is, e.g., used by @ref{Top, "
"EWW,, eww, The Emacs Web Wowser Manual}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5023
#, no-wrap
msgid "parsing xml"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5024
#, no-wrap
msgid "libxml-parse-xml-region start end &optional base-url discard-comments"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5028
msgid ""
"This function is the same as @code{libxml-parse-html-region}, except that it "
"parses the text as XML rather than HTML (so it is stricter about syntax)."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5032 ../../../../../doc/lispref/text.texi:5034 ../../../../../doc/lispref/text.texi:5035 ../../../../../doc/lispref/text.texi:5039
#, no-wrap
msgid "Document Object Model"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:5032
msgid "Access, manipulate and search the @acronym{DOM}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5036
#, no-wrap
msgid "HTML DOM"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5037
#, no-wrap
msgid "XML DOM"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5038
#, no-wrap
msgid "DOM"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5046
msgid ""
"The @acronym{DOM} returned by @code{libxml-parse-html-region} (and the other "
"@acronym{XML} parsing functions) is a tree structure where each node has a "
"node name (called a @dfn{tag}), and optional key/value @dfn{attribute} list, "
"and then a list of @dfn{child nodes}.  The child nodes are either strings or "
"@acronym{DOM} objects."
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:5053
#, no-wrap
msgid ""
"(body ((width . \"101\"))\n"
" (div ((class . \"thing\"))\n"
"  \"Foo\"\n"
"  (div nil\n"
"   \"Yes\")))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5055
#, no-wrap
msgid "dom-node tag &optional attributes &rest children"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5059
msgid ""
"This function creates a @acronym{DOM} node of type @var{tag}.  If given, "
"@var{attributes} should be a key/value pair list.  If given, @var{children} "
"should be @acronym{DOM} nodes."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5064
msgid ""
"The following functions can be used to work with this structure.  Each "
"function takes a @acronym{DOM} node, or a list of nodes.  In the latter "
"case, only the first node in the list is used."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5066
msgid "Simple accessors:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5068
#, no-wrap
msgid "dom-tag @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5070
msgid "Return the @dfn{tag} (also called ``node name'') of the node."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5071
#, no-wrap
msgid "dom-attr @var{node} @var{attribute}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5074
msgid "Return the value of @var{attribute} in the node.  A common usage would be:"
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:5078
#, no-wrap
msgid ""
"(dom-attr img 'href)\n"
"=> \"https://fsf.org/logo.png\"\n"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5080
#, no-wrap
msgid "dom-children @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5082
msgid "Return all the children of the node."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5083
#, no-wrap
msgid "dom-non-text-children @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5085
msgid "Return all the non-string children of the node."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5086
#, no-wrap
msgid "dom-attributes @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5088
msgid "Return the key/value pair list of attributes of the node."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5089
#, no-wrap
msgid "dom-text @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5091
msgid "Return all the textual elements of the node as a concatenated string."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5092
#, no-wrap
msgid "dom-texts @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5097
msgid ""
"Return all the textual elements of the node, as well as the textual elements "
"of all the children of the node, recursively, as a concatenated string.  "
"This function also takes an optional separator to be inserted between the "
"textual elements."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5098
#, no-wrap
msgid "dom-parent @var{dom} @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5100
msgid "Return the parent of @var{node} in @var{dom}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5101
#, no-wrap
msgid "dom-remove @var{dom} @var{node}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5103
msgid "Remove @var{node} from @var{dom}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5106
msgid "The following are functions for altering the @acronym{DOM}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5108
#, no-wrap
msgid "dom-set-attribute @var{node} @var{attribute} @var{value}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5110
msgid "Set the @var{attribute} of the node to @var{value}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5111
#, no-wrap
msgid "dom-append-child @var{node} @var{child}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5113
msgid "Append @var{child} as the last child of @var{node}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5114
#, no-wrap
msgid "dom-add-child-before @var{node} @var{child} @var{before}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5117
msgid ""
"Add @var{child} to @var{node}'s child list before the @var{before} node.  If "
"@var{before} is @code{nil}, make @var{child} the first child."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5118
#, no-wrap
msgid "dom-set-attributes @var{node} @var{attributes}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5120
msgid "Replace all the attributes of the node with a new key/value list."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5124
msgid ""
"The following are functions for searching for elements in the "
"@acronym{DOM}.  They all return lists of matching nodes."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5126
#, no-wrap
msgid "dom-by-tag @var{dom} @var{tag}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5129
msgid ""
"Return all nodes in @var{dom} that are of type @var{tag}.  A typical use "
"would be:"
msgstr ""

#. type: lisp
#: ../../../../../doc/lispref/text.texi:5133
#, no-wrap
msgid ""
"(dom-by-tag dom 'td)\n"
"=> '((td ...) (td ...) (td ...))\n"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5135
#, no-wrap
msgid "dom-by-class @var{dom} @var{match}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5138
msgid ""
"Return all nodes in @var{dom} that have class names that match @var{match}, "
"which is a regular expression."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5139
#, no-wrap
msgid "dom-by-style @var{dom} @var{style}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5142
msgid ""
"Return all nodes in @var{dom} that have styles that match @var{match}, which "
"is a regular expression."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5143
#, no-wrap
msgid "dom-by-id @var{dom} @var{style}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5146
msgid ""
"Return all nodes in @var{dom} that have IDs that match @var{match}, which is "
"a regular expression."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5147
#, no-wrap
msgid "dom-search @var{dom} @var{predicate}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5151
msgid ""
"Return all nodes in @var{dom} where @var{predicate} returns a non-@code{nil} "
"value.  @var{predicate} is called with the node to be tested as its "
"parameter."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5152
#, no-wrap
msgid "dom-strings @var{dom}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5154
msgid "Return all strings in @var{dom}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5158
msgid "Utility functions:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5160
#, no-wrap
msgid "dom-pp @var{dom} &optional @var{remove-empty}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5163
msgid ""
"Pretty-print @var{dom} at point.  If @var{remove-empty}, don't print textual "
"nodes that just contain white-space."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:5167
#, no-wrap
msgid "Parsing and generating JSON values"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5168
#, no-wrap
msgid "JSON"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5169
#, no-wrap
msgid "JavaScript Object Notation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5175
msgid ""
"When Emacs is compiled with @acronym{JSON} (@dfn{JavaScript Object "
"Notation}) support, it provides several functions to convert between Lisp "
"objects and JSON values.  Any JSON value can be converted to a Lisp object, "
"but not vice versa.  Specifically:"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:5182
msgid ""
"JSON uses three keywords: @code{true}, @code{null}, @code{false}.  "
"@code{true} is represented by the symbol @code{t}.  By default, the "
"remaining two are represented, respectively, by the symbols @code{:null} and "
"@code{:false}."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:5186
msgid ""
"JSON only has floating-point numbers.  They can represent both Lisp integers "
"and Lisp floating-point numbers."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:5190
msgid ""
"JSON strings are always Unicode strings encoded in UTF-8.  Lisp strings can "
"contain non-Unicode characters."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:5194
msgid ""
"JSON has only one sequence type, the array.  JSON arrays are represented "
"using Lisp vectors."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/text.texi:5201
msgid ""
"JSON has only one map type, the object.  JSON objects are represented using "
"Lisp hashtables, alists or plists.  When an alist or plist contains several "
"elements with the same key, Emacs uses only the first element for "
"serialization, in accordance with the behavior of @code{assq}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5208
msgid ""
"Note that @code{nil}, being both a valid alist and a valid plist, represents "
"@code{@{@}}, the empty JSON object; not @code{null}, @code{false}, or an "
"empty array, all of which are different JSON values."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5212
msgid ""
"If some Lisp object can't be represented in JSON, the serialization "
"functions will signal an error of type @code{wrong-type-argument}.  The "
"parsing functions can also signal the following errors:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5214
#, no-wrap
msgid "json-end-of-file"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5216
msgid "Signaled when encountering a premature end of the input text."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5217
#, no-wrap
msgid "json-trailing-content"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5220
msgid ""
"Signaled when encountering unexpected input after the first JSON object "
"parsed."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5221
#, no-wrap
msgid "json-parse-error"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5223
msgid "Signaled when encountering invalid JSON syntax."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5229
msgid ""
"Only top-level values (arrays and objects) can be serialized to JSON@.  The "
"subobjects within these top-level values can be of any type.  Likewise, the "
"parsing functions will only return vectors, hashtables, alists, and plists."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5230
#, no-wrap
msgid "json-serialize object &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5234
msgid ""
"This function returns a new Lisp string which contains the JSON "
"representation of @var{object}.  The argument @var{args} is a list of "
"keyword/argument pairs.  The following keywords are accepted:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5236 ../../../../../doc/lispref/text.texi:5274
#, no-wrap
msgid ":null-object"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5239 ../../../../../doc/lispref/text.texi:5277
msgid ""
"The value decides which Lisp object to use to represent the JSON keyword "
"@code{null}.  It defaults to the symbol @code{:null}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5240 ../../../../../doc/lispref/text.texi:5278
#, no-wrap
msgid ":false-object"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5243 ../../../../../doc/lispref/text.texi:5281
msgid ""
"The value decides which Lisp object to use to represent the JSON keyword "
"@code{false}.  It defaults to the symbol @code{:false}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5247
#, no-wrap
msgid "json-insert object &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5251
msgid ""
"This function inserts the JSON representation of @var{object} into the "
"current buffer before point.  The argument @var{args} are interpreted as in "
"@code{json-parse-string}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5253
#, no-wrap
msgid "json-parse-string string &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5257
msgid ""
"This function parses the JSON value in @var{string}, which must be a Lisp "
"string.  If @var{string} doesn't contain a valid JSON object, this function "
"signals the @code{json-parse-error} error."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5260
msgid ""
"The argument @var{args} is a list of keyword/argument pairs.  The following "
"keywords are accepted:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5262
#, no-wrap
msgid ":object-type"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5268
msgid ""
"The value decides which Lisp object to use for representing the key-value "
"mappings of a JSON object.  It can be either @code{hash-table}, the default, "
"to make hashtables with strings as keys; @code{alist} to use alists with "
"symbols as keys; or @code{plist} to use plists with keyword symbols as keys."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5269
#, no-wrap
msgid ":array-type"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5273
msgid ""
"The value decides which Lisp object to use for representing a JSON array.  "
"It can be either @code{array}, the default, to use Lisp arrays; or "
"@code{list} to use lists."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5285
#, no-wrap
msgid "json-parse-buffer &rest args"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5291
msgid ""
"This function reads the next JSON value from the current buffer, starting at "
"point.  It moves point to the position immediately after the value if "
"contains a valid JSON object; otherwise it signals the "
"@code{json-parse-error} error and doesn't move point.  The arguments "
"@var{args} are interpreted as in @code{json-parse-string}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:5294
#, no-wrap
msgid "JSONRPC communication"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5295
#, no-wrap
msgid "JSON remote procedure call protocol"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5304
msgid ""
"The @code{jsonrpc} library implements the @acronym{JSONRPC} specification, "
"version 2.0, as it is described in @uref{https://www.jsonrpc.org/}.  As the "
"name suggests, JSONRPC is a generic @dfn{Remote Procedure Call} protocol "
"designed around @acronym{JSON} objects, which you can convert to and from "
"Lisp objects (@pxref{Parsing JSON})."
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:5310
msgid "JSONRPC Overview::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:5310
msgid "Process-based JSONRPC connections::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/text.texi:5310
msgid "JSONRPC JSON object format::"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5310 ../../../../../doc/lispref/text.texi:5473 ../../../../../doc/lispref/text.texi:5475
#, no-wrap
msgid "JSONRPC deferred requests"
msgstr ""

#. type: node
#: ../../../../../doc/lispref/text.texi:5312
#, no-wrap
msgid "JSONRPC Overview"
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:5313
#, no-wrap
msgid "Overview"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5319
msgid ""
"Quoting from the @uref{https://www.jsonrpc.org/, spec}, JSONRPC \"is "
"transport agnostic in that the concepts can be used within the same process, "
"over sockets, over http, or in many various message passing environments.\""
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5320
#, no-wrap
msgid "jsonrpc-connection"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5329
msgid ""
"To model this agnosticism, the @code{jsonrpc} library uses objects of a "
"@code{jsonrpc-connection} class, which represent a connection to a remote "
"JSON endpoint (for details on Emacs's object system, "
"@pxref{Top,EIEIO,,eieio,EIEIO}).  In modern object-oriented parlance, this "
"class is ``abstract'', i.e.@: the actual class of a useful connection object "
"is always a subclass of @code{jsonrpc-connection}.  Nevertheless, we can "
"define two distinct APIs around the @code{jsonrpc-connection} class:"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5330
#, no-wrap
msgid "JSONRPC application interfaces"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5333
#, no-wrap
msgid "A user interface for building JSONRPC applications"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5335
#, no-wrap
msgid ":request-dispatcher"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5336
#, no-wrap
msgid ":notification-dispatcher"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5337
#, no-wrap
msgid "jsonrpc-notify"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5338
#, no-wrap
msgid "jsonrpc-request"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5339
#, no-wrap
msgid "jsonrpc-async-request"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5351
msgid ""
"In this scenario, the JSONRPC application selects a concrete subclass of "
"@code{jsonrpc-connection}, and proceeds to create objects of that subclass "
"using @code{make-instance}.  To initiate a contact to the remote endpoint, "
"the JSONRPC application passes this object to the functions "
"@code{jsonrpc-notify}, @code{jsonrpc-request}, and/or "
"@code{jsonrpc-async-request}.  For handling remotely initiated contacts, "
"which generally come in asynchronously, the instantiation should include "
"@code{:request-dispatcher} and @code{:notification-dispatcher} initargs, "
"which are both functions of 3 arguments: the connection object; a symbol "
"naming the JSONRPC method invoked remotely; and a JSONRPC @code{params} "
"object."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5352
#, no-wrap
msgid "jsonrpc-error"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5368
msgid ""
"The function passed as @code{:request-dispatcher} is responsible for "
"handling the remote endpoint's requests, which expect a reply from the local "
"endpoint (in this case, the program you're building).  Inside that function, "
"you may either return locally (a normal return) or non-locally (an error "
"return).  A local return value must be a Lisp object that can be serialized "
"as JSON (@pxref{Parsing JSON}).  This determines a success response, and the "
"object is forwarded to the server as the JSONRPC @code{result} object.  A "
"non-local return, achieved by calling the function @code{jsonrpc-error}, "
"causes an error response to be sent to the server.  The details of the "
"accompanying JSONRPC @code{error} are filled out with whatever was passed to "
"@code{jsonrpc-error}.  A non-local return triggered by an unexpected error "
"of any other type also causes an error response to be sent (unless you have "
"set @code{debug-on-error}, in which case this calls the Lisp debugger, "
"@pxref{Error Debugging})."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5369
#, no-wrap
msgid "A inheritance interface for building JSONRPC transport implementations"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5377
msgid ""
"In this scenario, @code{jsonrpc-connection} is subclassed to implement a "
"different underlying transport strategy (for details on how to subclass, see "
"@ref{Inheritance,Inheritance,,eieio}.).  Users of the application-building "
"interface can then instantiate objects of this concrete class (using the "
"@code{make-instance} function) and connect to JSONRPC endpoints using that "
"strategy."
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5379
msgid "This API has mandatory and optional parts."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5380
#, no-wrap
msgid "jsonrpc-connection-send"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5384
msgid ""
"To allow its users to initiate JSONRPC contacts (notifications or requests) "
"or reply to endpoint requests, the subclass must have an implementation of "
"the @code{jsonrpc-connection-send} method."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5385
#, no-wrap
msgid "jsonrpc-connection-receive"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5391
msgid ""
"Likewise, for handling the three types of remote contacts (requests, "
"notifications, and responses to local requests), the transport "
"implementation must arrange for the function "
"@code{jsonrpc-connection-receive} to be called after noticing a new JSONRPC "
"message on the wire (whatever that \"wire\" may be)."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5392
#, no-wrap
msgid "jsonrpc-shutdown"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5393
#, no-wrap
msgid "jsonrpc-running-p"
msgstr ""

#. type: enumerate
#: ../../../../../doc/lispref/text.texi:5401
msgid ""
"Finally, and optionally, the @code{jsonrpc-connection} subclass should "
"implement the @code{jsonrpc-shutdown} and @code{jsonrpc-running-p} methods "
"if these concepts apply to the transport.  If they do, then any system "
"resources (e.g.@: processes, timers, etc.) used to listen for messages on "
"the wire should be released in @code{jsonrpc-shutdown}, i.e.@: they should "
"only be needed while @code{jsonrpc-running-p} is non-nil."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:5404 ../../../../../doc/lispref/text.texi:5405
#, no-wrap
msgid "Process-based JSONRPC connections"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5406
#, no-wrap
msgid "JSONRPC process-based connections"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5408
#, no-wrap
msgid "jsonrpc-process-connection"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5414
msgid ""
"For convenience, the @code{jsonrpc} library comes with a built-in "
"@code{jsonrpc-process-connection} transport implementation that can talk to "
"local subprocesses (using the standard input and standard output); or TCP "
"hosts (using sockets); or any other remote endpoint that Emacs's process "
"object can represent (@pxref{Processes})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5418
msgid ""
"Using this transport, the JSONRPC messages are encoded on the wire as plain "
"text and prefaced by some basic HTTP-style enveloping headers, such as "
"``Content-Length''."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5423
msgid ""
"For an example of an application using this transport scheme on top of "
"JSONRPC, see the "
"@uref{https://microsoft.github.io/language-server-protocol/specification, "
"Language Server Protocol}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5424
#, no-wrap
msgid "JSONRPC connection initargs"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5429
msgid ""
"Along with the mandatory @code{:request-dispatcher} and "
"@code{:notification-dispatcher} initargs, users of the "
"@code{jsonrpc-process-connection} class should pass the following initargs "
"as keyword-value pairs to @code{make-instance}:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5431
#, no-wrap
msgid ":process"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5436
msgid ""
"Value must be a live process object or a function of no arguments producing "
"one such object.  If passed a process object, the object is expected to "
"contain a pre-established connection; otherwise, the function is called "
"immediately after the object is made."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/text.texi:5437
#, no-wrap
msgid ":on-shutdown"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/text.texi:5443
msgid ""
"Value must be a function of a single argument, the "
"@code{jsonrpc-process-connection} object.  The function is called after the "
"underlying process object has been deleted (either deliberately by "
"@code{jsonrpc-shutdown}, or unexpectedly, because of some external cause)."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:5445 ../../../../../doc/lispref/text.texi:5446
#, no-wrap
msgid "JSONRPC JSON object format"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5447
#, no-wrap
msgid "JSONRPC object format"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5454
msgid ""
"JSONRPC JSON objects are exchanged as Lisp plists (@pxref{Property Lists}): "
"JSON-compatible plists are handed to the dispatcher functions and, likewise, "
"JSON-compatible plists should be given to @code{jsonrpc-notify}, "
"@code{jsonrpc-request}, and @code{jsonrpc-async-request}."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5455
#, no-wrap
msgid "jsonrpc-lambda"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5461
msgid ""
"To facilitate handling plists, this library makes liberal use of "
"@code{cl-lib} library (@pxref{Top,cl-lib,,cl,Common Lisp Extensions for GNU "
"Emacs Lisp}) and suggests (but doesn't force) its clients to do the same.  A "
"macro @code{jsonrpc-lambda} can be used to create a lambda for destructuring "
"a JSON-object like in this example:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:5471
#, no-wrap
msgid ""
"(jsonrpc-async-request\n"
" myproc :frobnicate `(:foo \"trix\")\n"
" :success-fn (jsonrpc-lambda (&key bar baz &allow-other-keys)\n"
"               (message \"Server replied back with %s and %s!\"\n"
"                        bar baz))\n"
" :error-fn (jsonrpc-lambda (&key code message _data)\n"
"             (message \"Sadly, server reports %s: %s\"\n"
"                      code message)))\n"
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/text.texi:5474
#, no-wrap
msgid "Deferred JSONRPC requests"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5486
msgid ""
"In many @acronym{RPC} situations, synchronization between the two "
"communicating endpoints is a matter of correctly designing the RPC "
"application: when synchronization is needed, requests (which are blocking) "
"should be used; when it isn't, notifications should suffice.  However, when "
"Emacs acts as one of these endpoints, asynchronous events (e.g. timer- or "
"process-related) may be triggered while there is still uncertainty about the "
"state of the remote endpoint.  Furthermore, acting on these events may only "
"sometimes demand synchronization, depending on the event's specific nature."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5487
#, no-wrap
msgid ":deferred@r{, JSONRPC keyword}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5497
msgid ""
"The @code{:deferred} keyword argument to @code{jsonrpc-request} and "
"@code{jsonrpc-async-request} is designed to let the caller indicate that the "
"specific request needs synchronization and its actual issuance may be "
"delayed to the future, until some condition is satisfied.  Specifying "
"@code{:deferred} for a request doesn't mean it @emph{will} be delayed, only "
"that it @emph{can} be.  If the request isn't sent immediately, "
"@code{jsonrpc} will make renewed efforts to send it at certain key times "
"during communication, such as when receiving or sending other messages to "
"the endpoint."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/text.texi:5498
#, no-wrap
msgid "jsonrpc-connection-ready-p"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5509
msgid ""
"Before any attempt to send the request, the application-specific conditions "
"are checked.  Since the @code{jsonrpc} library can't know what these "
"conditions are, the program can use the @code{jsonrpc-connection-ready-p} "
"generic function (@pxref{Generic Functions}) to specify them.  The default "
"method for this function returns @code{t}, but you can add overriding "
"methods that return @code{nil} in some situations, based on the arguments "
"passed to it, which are the @code{jsonrpc-connection} object (@pxref{JSONRPC "
"Overview}) and whichever value you passed as the @code{:deferred} keyword "
"argument."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/text.texi:5511
#, no-wrap
msgid "Atomic Change Groups"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5512
#, no-wrap
msgid "atomic changes"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5520
msgid ""
"In database terminology, an @dfn{atomic} change is an indivisible "
"change---it can succeed entirely or it can fail entirely, but it cannot "
"partly succeed.  A Lisp program can make a series of changes to one or "
"several buffers as an @dfn{atomic change group}, meaning that either the "
"entire series of changes will be installed in their buffers or, in case of "
"an error, none of them will be."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5524
msgid ""
"To do this for one buffer, the one already current, simply write a call to "
"@code{atomic-change-group} around the code that makes the changes, like "
"this:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:5529
#, no-wrap
msgid ""
"(atomic-change-group\n"
"  (insert foo)\n"
"  (delete-region x y))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5536
msgid ""
"If an error (or other nonlocal exit) occurs inside the body of "
"@code{atomic-change-group}, it unmakes all the changes in that buffer that "
"were during the execution of the body.  This kind of change group has no "
"effect on any other buffers---any such changes remain."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5540
msgid ""
"If you need something more sophisticated, such as to make changes in various "
"buffers constitute one atomic group, you must directly call lower-level "
"functions that @code{atomic-change-group} uses."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5541
#, no-wrap
msgid "prepare-change-group &optional buffer"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5546
msgid ""
"This function sets up a change group for buffer @var{buffer}, which defaults "
"to the current buffer.  It returns a handle that represents the change "
"group.  You must use this handle to activate the change group and "
"subsequently to finish it."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5550
msgid ""
"To use the change group, you must @dfn{activate} it.  You must do this "
"before making any changes in the text of @var{buffer}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5551
#, no-wrap
msgid "activate-change-group handle"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5553
msgid "This function activates the change group that @var{handle} designates."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5560
msgid ""
"After you activate the change group, any changes you make in that buffer "
"become part of it.  Once you have made all the desired changes in the "
"buffer, you must @dfn{finish} the change group.  There are two ways to do "
"this: you can either accept (and finalize) all the changes, or cancel them "
"all."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5561
#, no-wrap
msgid "accept-change-group handle"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5564
msgid ""
"This function accepts all the changes in the change group specified by "
"@var{handle}, making them final."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5566
#, no-wrap
msgid "cancel-change-group handle"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5569
msgid ""
"This function cancels and undoes all the changes in the change group "
"specified by @var{handle}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5574
msgid ""
"You can cause some or all of the changes in a change group to be considered "
"as a single unit for the purposes of the @code{undo} commands (@pxref{Undo}) "
"by using @code{undo-amalgamate-change-group}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5575
#, no-wrap
msgid "undo-amalgamate-change-group"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/text.texi:5582
msgid ""
"Amalgamate all the changes made in the change-group since the state "
"identified by @var{handle}.  This function removes all undo boundaries "
"between undo records of changes since the state described by @var{handle}.  "
"Usually, @var{handle} is the handle returned by @code{prepare-change-group}, "
"in which case all the changes since the beginning of the change-group are "
"amalgamated into a single undo unit."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5594
msgid ""
"Your code should use @code{unwind-protect} to make sure the group is always "
"finished.  The call to @code{activate-change-group} should be inside the "
"@code{unwind-protect}, in case the user types @kbd{C-g} just after it runs.  "
"(This is one reason why @code{prepare-change-group} and "
"@code{activate-change-group} are separate functions, because normally you "
"would call @code{prepare-change-group} before the start of that "
"@code{unwind-protect}.)  Once you finish the group, don't use the handle "
"again---in particular, don't try to finish the same group twice."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5598
msgid ""
"To make a multibuffer change group, call @code{prepare-change-group} once "
"for each buffer you want to cover, then use @code{nconc} to combine the "
"returned values, like this:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/text.texi:5602
#, no-wrap
msgid ""
"(nconc (prepare-change-group buffer-1)\n"
"       (prepare-change-group buffer-2))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5607
msgid ""
"You can then activate the multibuffer change group with a single call to "
"@code{activate-change-group}, and finish it with a single call to "
"@code{accept-change-group} or @code{cancel-change-group}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5612
msgid ""
"Nested use of several change groups for the same buffer works as you would "
"expect.  Non-nested use of change groups for the same buffer will get Emacs "
"confused, so don't let it happen; the first change group you start for any "
"given buffer should be the last one finished."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5615
#, no-wrap
msgid "change hooks"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/text.texi:5616
#, no-wrap
msgid "hooks for text changes"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5622
msgid ""
"These hook variables let you arrange to take notice of changes in buffers "
"(or in a particular buffer, if you make them buffer-local).  See also "
"@ref{Special Properties}, for how to detect changes to specific parts of the "
"text."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5627
msgid ""
"The functions you use in these hooks should save and restore the match data "
"if they do anything that uses regular expressions; otherwise, they will "
"interfere in bizarre ways with the editing operations that call them."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5628
#, no-wrap
msgid "before-change-functions"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5634
msgid ""
"This variable holds a list of functions to call when Emacs is about to "
"modify a buffer.  Each function gets two arguments, the beginning and end of "
"the region that is about to change, represented as integers.  The buffer "
"that is about to change is always the current buffer when the function is "
"called."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5636
#, no-wrap
msgid "after-change-functions"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5643
msgid ""
"This variable holds a list of functions to call after Emacs modifies a "
"buffer.  Each function receives three arguments: the beginning and end of "
"the region just changed, and the length of the text that existed before the "
"change.  All three arguments are integers.  The buffer that has been changed "
"is always the current buffer when the function is called."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5648
msgid ""
"The length of the old text is the difference between the buffer positions "
"before and after that text as it was before the change.  As for the changed "
"text, its length is simply the difference between the first two arguments."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5654
msgid ""
"Output of messages into the @file{*Messages*} buffer does not call these "
"functions, and neither do certain internal buffer changes, such as changes "
"in buffers created by Emacs internally for certain jobs, that should not be "
"visible to Lisp programs."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/text.texi:5670
msgid ""
"The vast majority of buffer changing primitives will call "
"@code{before-change-functions} and @code{after-change-functions} in balanced "
"pairs, once for each change, where the arguments to these hooks exactly "
"delimit the change being made.  Yet, hook functions should not rely on this "
"always being the case, because some complex primitives call "
"@code{before-change-functions} once before making changes, and then call "
"@code{after-change-functions} zero or more times, depending on how many "
"individual changes the primitive is making.  When that happens, the "
"arguments to @code{before-change-functions} will enclose a region in which "
"the individual changes are made, but won't necessarily be the minimal such "
"region, and the arguments to each successive call of "
"@code{after-change-functions} will then delimit the part of text being "
"changed exactly.  In general, we advise using either the before- or the "
"after-change hook, but not both."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5671
#, no-wrap
msgid "combine-after-change-calls body@dots{}"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5675
msgid ""
"The macro executes @var{body} normally, but arranges to call the "
"after-change functions just once for a series of several changes---if that "
"seems safe."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5682
msgid ""
"If a program makes several text changes in the same area of the buffer, "
"using the macro @code{combine-after-change-calls} around that part of the "
"program can make it run considerably faster when after-change hooks are in "
"use.  When the after-change hooks are ultimately called, the arguments "
"specify a portion of the buffer including all of the changes made within the "
"@code{combine-after-change-calls} body."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5686
msgid ""
"@strong{Warning:} You must not alter the values of "
"@code{after-change-functions} within the body of a "
"@code{combine-after-change-calls} form."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5691
msgid ""
"@strong{Warning:} If the changes you combine occur in widely scattered parts "
"of the buffer, this will still work, but it is not advisable, because it may "
"lead to inefficient behavior for some change hook functions."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5693
#, no-wrap
msgid "combine-change-calls beg end body@dots{}"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5700
msgid ""
"This executes @var{body} normally, except any buffer changes it makes do not "
"trigger the calls to @code{before-change-functions} and "
"@code{after-change-functions}.  Instead there is a single call of each of "
"these hooks for the region enclosed by @var{beg} and @var{end}, the "
"parameters supplied to @code{after-change-functions} reflecting the changes "
"made to the size of the region by @var{body}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5702
msgid "The result of this macro is the result returned by @var{body}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5708
msgid ""
"This macro is useful when a function makes a possibly large number of "
"repetitive changes to the buffer, and the change hooks would otherwise take "
"a long time to run, were they to be run for each individual buffer "
"modification.  Emacs itself uses this macro, for example, in the commands "
"@code{comment-region} and @code{uncomment-region}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5712
msgid ""
"@strong{Warning:} You must not alter the values of "
"@code{before-change-functions} or @code{after-change-function} within "
"@var{body}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/text.texi:5715
msgid ""
"@strong{Warning:} You must not make any buffer changes outside of the region "
"specified by @var{beg} and @var{end}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5717
#, no-wrap
msgid "first-change-hook"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5720
msgid ""
"This variable is a normal hook that is run whenever a buffer is changed that "
"was previously in the unmodified state."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5722
#, no-wrap
msgid "inhibit-modification-hooks"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5728
msgid ""
"If this variable is non-@code{nil}, all of the change hooks are disabled; "
"none of them run.  This affects all the hook variables described above in "
"this section, as well as the hooks attached to certain special text "
"properties (@pxref{Special Properties}) and overlay properties "
"(@pxref{Overlay Properties})."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5738
msgid ""
"Also, this variable is bound to non-@code{nil} while running those same hook "
"variables, so that by default modifying the buffer from a modification hook "
"does not cause other modification hooks to be run.  If you do want "
"modification hooks to be run in a particular piece of code that is itself "
"run from a modification hook, then rebind locally "
"@code{inhibit-modification-hooks} to @code{nil}.  However, doing this may "
"cause recursive calls to the modification hooks, so be sure to prepare for "
"that (for example, by binding some variable which tells your hook to do "
"nothing)."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/text.texi:5745
msgid ""
"We recommend that you only bind this variable for modifications that do not "
"result in lasting changes to buffer text contents (for example face changes "
"or temporary modifications).  If you need to delay change hooks during a "
"series of changes (typically for performance reasons), use "
"@code{combine-change-calls} or @code{combine-after-change-calls} instead."
msgstr ""

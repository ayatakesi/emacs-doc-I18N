# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-11 02:50+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: ../../../../../doc/lispref/debugging.texi:6
#, no-wrap
msgid "Debugging"
msgstr ""

#. type: chapter
#: ../../../../../doc/lispref/debugging.texi:7
#, no-wrap
msgid "Debugging Lisp Programs"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:8
#, no-wrap
msgid "debugging lisp programs"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:12
msgid ""
"There are several ways to find and investigate problems in an Emacs Lisp "
"program."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:18
msgid ""
"If a problem occurs when you run the program, you can use the built-in Emacs "
"Lisp debugger to suspend the Lisp evaluator, and examine and/or alter its "
"internal state."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:21
msgid "You can use Edebug, a source-level debugger for Emacs Lisp."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:23
#, no-wrap
msgid "tracing Lisp programs"
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:31
msgid ""
"You can trace the execution of functions involved in the problem using the "
"tracing facilities provided by the @file{trace.el} package.  This package "
"provides the functions @code{trace-function-foreground} and "
"@code{trace-function-background} for tracing function calls, and "
"@code{trace-values} for adding values of select variables to the trace.  For "
"the details, see the documentation of these facilities in @file{trace.el}."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:35
msgid ""
"If a syntactic problem is preventing Lisp from even reading the program, you "
"can locate it using Lisp editing commands."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:39
msgid ""
"You can look at the error and warning messages produced by the byte compiler "
"when it compiles the program.  @xref{Compiler Errors}."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:43
msgid ""
"You can use the Testcover package to perform coverage testing on the "
"program."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:47
msgid ""
"You can use the ERT package to write regression tests for the program.  "
"@xref{Top,the ERT manual,, ert, ERT: Emacs Lisp Regression Testing}."
msgstr ""

#. type: itemize
#: ../../../../../doc/lispref/debugging.texi:50
msgid ""
"You can profile the program to get hints about how to make it more "
"efficient."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:55
msgid ""
"Other useful tools for debugging input and output problems are the dribble "
"file (@pxref{Terminal Input}) and the @code{open-termscript} function "
"(@pxref{Terminal Output})."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:62 ../../../../../doc/lispref/debugging.texi:64
#, no-wrap
msgid "Debugger"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "A debugger for the Emacs Lisp evaluator."
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "Edebug"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "A source-level Emacs Lisp debugger."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:62 ../../../../../doc/lispref/debugging.texi:841
#, no-wrap
msgid "Syntax Errors"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "How to find syntax errors."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/debugging.texi:62 ../../../../../doc/lispref/debugging.texi:939 ../../../../../doc/lispref/debugging.texi:940
#, no-wrap
msgid "Test Coverage"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "Ensuring you have tested all branches in your code."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/debugging.texi:62 ../../../../../doc/lispref/debugging.texi:981 ../../../../../doc/lispref/debugging.texi:982
#, no-wrap
msgid "Profiling"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:62
msgid "Measuring the resources that your code uses."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/debugging.texi:65
#, no-wrap
msgid "The Lisp Debugger"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:66
#, no-wrap
msgid "debugger for Emacs Lisp"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:67
#, no-wrap
msgid "Lisp debugger"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:68
#, no-wrap
msgid "break"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:77
msgid ""
"The ordinary @dfn{Lisp debugger} provides the ability to suspend evaluation "
"of a form.  While evaluation is suspended (a state that is commonly known as "
"a @dfn{break}), you may examine the run time stack, examine the values of "
"local or global variables, or change those values.  Since a break is a "
"recursive edit, all the usual editing facilities of Emacs are available; you "
"can even run programs that will enter the debugger recursively.  "
"@xref{Recursive Editing}."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:91
#, no-wrap
msgid "Error Debugging"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Entering the debugger when an error happens."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:205
#, no-wrap
msgid "Infinite Loops"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Stopping and debugging a program that doesn't exit."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:235
#, no-wrap
msgid "Function Debugging"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Entering it when a certain function is called."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:305
#, no-wrap
msgid "Variable Debugging"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Entering it when a variable is modified."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:335
#, no-wrap
msgid "Explicit Debug"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Entering it at a certain point in the program."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:359
#, no-wrap
msgid "Using Debugger"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "What the debugger does."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:400 ../../../../../doc/lispref/debugging.texi:401
#, no-wrap
msgid "Backtraces"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "What you see while in the debugger."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:468 ../../../../../doc/lispref/debugging.texi:469
#, no-wrap
msgid "Debugger Commands"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Commands used while in the debugger."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:566 ../../../../../doc/lispref/debugging.texi:567
#, no-wrap
msgid "Invoking the Debugger"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "How to call the function @code{debug}."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:89 ../../../../../doc/lispref/debugging.texi:662
#, no-wrap
msgid "Internals of Debugger"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:89
msgid "Subroutines of the debugger, and global variables."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:92
#, no-wrap
msgid "Entering the Debugger on an Error"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:93
#, no-wrap
msgid "error debugging"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:94
#, no-wrap
msgid "debugging errors"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:99
msgid ""
"The most important time to enter the debugger is when a Lisp error happens.  "
"This allows you to investigate the immediate causes of the error."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:107
msgid ""
"However, entry to the debugger is not a normal consequence of an error.  "
"Many commands signal Lisp errors when invoked inappropriately, and during "
"ordinary editing it would be very inconvenient to enter the debugger each "
"time this happens.  So if you want errors to enter the debugger, set the "
"variable @code{debug-on-error} to non-@code{nil}.  (The command "
"@code{toggle-debug-on-error} provides an easy way to do this.)"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:108
#, no-wrap
msgid "debug-on-error"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:114
msgid ""
"This variable determines whether the debugger is called when an error is "
"signaled and not handled.  If @code{debug-on-error} is @code{t}, all kinds "
"of errors call the debugger, except those listed in "
"@code{debug-ignored-errors} (see below).  If it is @code{nil}, none call the "
"debugger."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:121
msgid ""
"The value can also be a list of error conditions (@pxref{Signaling "
"Errors}).  Then the debugger is called only for error conditions in this "
"list (except those also listed in @code{debug-ignored-errors}).  For "
"example, if you set @code{debug-on-error} to the list "
"@code{(void-variable)}, the debugger is only called for errors about a "
"variable that has no value."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:124
msgid ""
"Note that @code{eval-expression-debug-on-error} overrides this variable in "
"some cases; see below."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:128
msgid ""
"When this variable is non-@code{nil}, Emacs does not create an error handler "
"around process filter functions and sentinels.  Therefore, errors in these "
"functions also invoke the debugger.  @xref{Processes}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:130
#, no-wrap
msgid "debug-ignored-errors"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:137
msgid ""
"This variable specifies errors which should not enter the debugger, "
"regardless of the value of @code{debug-on-error}.  Its value is a list of "
"error condition symbols and/or regular expressions.  If the error has any of "
"those condition symbols, or if the error message matches any of the regular "
"expressions, then that error does not enter the debugger."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:144
msgid ""
"The normal value of this variable includes @code{user-error}, as well as "
"several errors that happen often during editing but rarely result from bugs "
"in Lisp programs.  However, ``rarely'' is not ``never''; if your program "
"fails with an error that matches this list, you may try changing this list "
"to debug the error.  The easiest way is usually to set "
"@code{debug-ignored-errors} to @code{nil}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:146
#, no-wrap
msgid "eval-expression-debug-on-error"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:151
msgid ""
"If this variable has a non-@code{nil} value (the default), running the "
"command @code{eval-expression} causes @code{debug-on-error} to be "
"temporarily bound to @code{t}.  @xref{Lisp Eval,, Evaluating Emacs Lisp "
"Expressions, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:154
msgid ""
"If @code{eval-expression-debug-on-error} is @code{nil}, then the value of "
"@code{debug-on-error} is not changed during @code{eval-expression}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:156
#, no-wrap
msgid "debug-on-signal"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:160
msgid ""
"Normally, errors caught by @code{condition-case} never invoke the debugger.  "
"The @code{condition-case} gets a chance to handle the error before the "
"debugger gets a chance."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:166
msgid ""
"If you change @code{debug-on-signal} to a non-@code{nil} value, the debugger "
"gets the first chance at every error, regardless of the presence of "
"@code{condition-case}.  (To invoke the debugger, the error must still "
"fulfill the criteria specified by @code{debug-on-error} and "
"@code{debug-ignored-errors}.)"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:167
#, no-wrap
msgid "emacsclient, getting a backtrace"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:168
#, no-wrap
msgid "backtrace from emacsclient's @option{--eval}"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:173
msgid ""
"For example, setting this variable is useful to get a backtrace from code "
"evaluated by emacsclient's @option{--eval} option.  If Lisp code evaluated "
"by emacsclient signals an error while this variable is non-@code{nil}, the "
"backtrace will popup in the running Emacs."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:180
msgid ""
"@strong{Warning:} Setting this variable to non-@code{nil} may have annoying "
"effects.  Various parts of Emacs catch errors in the normal course of "
"affairs, and you may not even realize that errors happen there.  If you need "
"to debug code wrapped in @code{condition-case}, consider using "
"@code{condition-case-unless-debug} (@pxref{Handling Errors})."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:182
#, no-wrap
msgid "debug-on-event"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:189
msgid ""
"If you set @code{debug-on-event} to a special event (@pxref{Special "
"Events}), Emacs will try to enter the debugger as soon as it receives this "
"event, bypassing @code{special-event-map}.  At present, the only supported "
"values correspond to the signals @code{SIGUSR1} and @code{SIGUSR2} (this is "
"the default).  This can be helpful when @code{inhibit-quit} is set and Emacs "
"is not otherwise responding."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:191
#, no-wrap
msgid "message, finding what causes a particular message"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:192
#, no-wrap
msgid "debug-on-message"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:197
msgid ""
"If you set @code{debug-on-message} to a regular expression, Emacs will enter "
"the debugger if it displays a matching message in the echo area.  For "
"example, this can be useful when trying to find the cause of a particular "
"message."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:204
msgid ""
"To debug an error that happens during loading of the init file, use the "
"option @samp{--debug-init}.  This binds @code{debug-on-error} to @code{t} "
"while loading the init file, and bypasses the @code{condition-case} which "
"normally catches errors in the init file."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:206
#, no-wrap
msgid "Debugging Infinite Loops"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:207
#, no-wrap
msgid "infinite loops"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:208
#, no-wrap
msgid "loops, infinite"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:209
#, no-wrap
msgid "quitting from infinite loop"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:210
#, no-wrap
msgid "stopping an infinite loop"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:215
msgid ""
"When a program loops infinitely and fails to return, your first problem is "
"to stop the loop.  On most operating systems, you can do this with "
"@kbd{C-g}, which causes a @dfn{quit}.  @xref{Quitting}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:222
msgid ""
"Ordinary quitting gives no information about why the program was looping.  "
"To get more information, you can set the variable @code{debug-on-quit} to "
"non-@code{nil}.  Once you have the debugger running in the middle of the "
"infinite loop, you can proceed from the debugger using the stepping "
"commands.  If you step through the entire loop, you may get enough "
"information to solve the problem."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:226
msgid ""
"Quitting with @kbd{C-g} is not considered an error, and "
"@code{debug-on-error} has no effect on the handling of @kbd{C-g}.  Likewise, "
"@code{debug-on-quit} has no effect on errors."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:227
#, no-wrap
msgid "debug-on-quit"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:233
msgid ""
"This variable determines whether the debugger is called when @code{quit} is "
"signaled and not handled.  If @code{debug-on-quit} is non-@code{nil}, then "
"the debugger is called whenever you quit (that is, type @kbd{C-g}).  If "
"@code{debug-on-quit} is @code{nil} (the default), then the debugger is not "
"called when you quit."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:236
#, no-wrap
msgid "Entering the Debugger on a Function Call"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:237
#, no-wrap
msgid "function call debugging"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:238
#, no-wrap
msgid "debugging specific functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:246
msgid ""
"To investigate a problem that happens in the middle of a program, one useful "
"technique is to enter the debugger whenever a certain function is called.  "
"You can do this to the function in which the problem occurs, and then step "
"through the function, or you can do this to a function called shortly before "
"the problem, step quickly over the call to that function, and then step "
"through its caller."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:247
#, no-wrap
msgid "Command debug-on-entry function-name"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:250
msgid ""
"This function requests @var{function-name} to invoke the debugger each time "
"it is called."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:259
msgid ""
"Any function or macro defined as Lisp code may be set to break on entry, "
"regardless of whether it is interpreted code or compiled code.  If the "
"function is a command, it will enter the debugger when called from Lisp and "
"when called interactively (after the reading of the arguments).  You can "
"also set debug-on-entry for primitive functions (i.e., those written in C) "
"this way, but it only takes effect when the primitive is called from Lisp "
"code.  Debug-on-entry is not allowed for special forms."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:264
msgid ""
"When @code{debug-on-entry} is called interactively, it prompts for "
"@var{function-name} in the minibuffer.  If the function is already set up to "
"invoke the debugger on entry, @code{debug-on-entry} does nothing.  "
"@code{debug-on-entry} always returns @var{function-name}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:266
msgid "Here's an example to illustrate use of this function:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:273
#, no-wrap
msgid ""
"(defun fact (n)\n"
"  (if (zerop n) 1\n"
"      (* n (fact (1- n)))))\n"
"     @result{} fact\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:277
#, no-wrap
msgid ""
"(debug-on-entry 'fact)\n"
"     @result{} fact\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:280
#, no-wrap
msgid "(fact 3)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:291
#, no-wrap
msgid ""
"------ Buffer: *Backtrace* ------\n"
"Debugger entered--entering a function:\n"
"* fact(3)\n"
"  eval((fact 3))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"------ Buffer: *Backtrace* ------\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:296
#, no-wrap
msgid "Command cancel-debug-on-entry &optional function-name"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:303
msgid ""
"This function undoes the effect of @code{debug-on-entry} on "
"@var{function-name}.  When called interactively, it prompts for "
"@var{function-name} in the minibuffer.  If @var{function-name} is omitted or "
"@code{nil}, it cancels break-on-entry for all functions.  Calling "
"@code{cancel-debug-on-entry} does nothing to a function which is not "
"currently set up to break on entry."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:306
#, no-wrap
msgid "Entering the debugger when a variable is modified"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:307
#, no-wrap
msgid "variable write debugging"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:308
#, no-wrap
msgid "debugging changes to variables"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:313
msgid ""
"Sometimes a problem with a function is due to a wrong setting of a "
"variable.  Setting up the debugger to trigger whenever the variable is "
"changed is a quick way to find the origin of the setting."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:314
#, no-wrap
msgid "Command debug-on-variable-change variable"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:317
msgid ""
"This function arranges for the debugger to be called whenever @var{variable} "
"is modified."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:323
msgid ""
"It is implemented using the watchpoint mechanism, so it inherits the same "
"characteristics and limitations: all aliases of @var{variable} will be "
"watched together, only dynamic variables can be watched, and changes to the "
"objects referenced by variables are not detected.  For details, see "
"@ref{Watching Variables}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:325
#, no-wrap
msgid "Command cancel-debug-on-variable-change &optional variable"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:332
msgid ""
"This function undoes the effect of @code{debug-on-variable-change} on "
"@var{variable}.  When called interactively, it prompts for @var{variable} in "
"the minibuffer.  If @var{variable} is omitted or @code{nil}, it cancels "
"break-on-change for all variables.  Calling "
"@code{cancel-debug-on-variable-change} does nothing to a variable which is "
"not currently set up to break on change."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:336
#, no-wrap
msgid "Explicit Entry to the Debugger"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:337
#, no-wrap
msgid "debugger, explicit entry"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:338
#, no-wrap
msgid "force entry to debugger"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:340
#, no-wrap
msgid "@code{eval-defun}, and explicit entry to debugger"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:347
msgid ""
"You can cause the debugger to be called at a certain point in your program "
"by writing the expression @code{(debug)} at that point.  To do this, visit "
"the source file, insert the text @samp{(debug)} at the proper place, and "
"type @kbd{C-M-x} (@code{eval-defun}, a Lisp mode key binding).  "
"@strong{Warning:} if you do this for temporary debugging purposes, be sure "
"to undo this insertion before you save the file!"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:353
msgid ""
"The place where you insert @samp{(debug)} must be a place where an "
"additional form can be evaluated and its value ignored.  (If the value of "
"@code{(debug)} isn't ignored, it will alter the execution of the program!)  "
"The most common suitable places are inside a @code{progn} or an implicit "
"@code{progn} (@pxref{Sequencing})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:358
msgid ""
"If you don't know exactly where in the source code you want to put the debug "
"statement, but you want to display a backtrace when a certain message is "
"displayed, you can set @code{debug-on-message} to a regular expression "
"matching the desired message."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:360
#, no-wrap
msgid "Using the Debugger"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:369
msgid ""
"When the debugger is entered, it displays the previously selected buffer in "
"one window and a buffer named @file{*Backtrace*} in another window.  The "
"backtrace buffer contains one line for each level of Lisp function execution "
"currently going on.  At the beginning of this buffer is a message describing "
"the reason that the debugger was invoked (such as the error message and "
"associated data, if it was invoked due to an error)."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/debugging.texi:370
#, no-wrap
msgid "debugger-bury-or-kill"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:385
msgid ""
"The backtrace buffer is read-only and uses a special major mode, Debugger "
"mode, in which letters are defined as debugger commands.  The usual Emacs "
"editing commands are available; thus, you can switch windows to examine the "
"buffer that was being edited at the time of the error, switch buffers, visit "
"files, or do any other sort of editing.  However, the debugger is a "
"recursive editing level (@pxref{Recursive Editing})  and it is wise to go "
"back to the backtrace buffer and exit the debugger (with the @kbd{q} "
"command) when you are finished with it.  Exiting the debugger gets out of "
"the recursive edit and buries the backtrace buffer.  (You can customize what "
"the @kbd{q} command does with the backtrace buffer by setting the variable "
"@code{debugger-bury-or-kill}.  For example, set it to @code{kill} if you "
"prefer to kill the buffer rather than bury it.  Consult the variable's "
"documentation for more possibilities.)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:395
msgid ""
"When the debugger has been entered, the @code{debug-on-error} variable is "
"temporarily set according to @code{eval-expression-debug-on-error}.  If the "
"latter variable is non-@code{nil}, @code{debug-on-error} will temporarily be "
"set to @code{t}.  This means that any further errors that occur while doing "
"a debugging session will (by default) trigger another backtrace.  If this is "
"not what you want, you can either set @code{eval-expression-debug-on-error} "
"to @code{nil}, or set @code{debug-on-error} to @code{nil} in "
"@code{debugger-mode-hook}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:399
msgid ""
"The debugger itself must be run byte-compiled, since it makes assumptions "
"about the state of the Lisp interpreter.  These assumptions are false if the "
"debugger is running interpreted."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:402
#, no-wrap
msgid "backtrace buffer"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:407
msgid ""
"Debugger mode is derived from Backtrace mode, which is also used to show "
"backtraces by Edebug and ERT@.  (@pxref{Edebug}, and @ref{Top,the ERT "
"manual,, ert, ERT: Emacs Lisp Regression Testing}.)"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:408
#, no-wrap
msgid "stack frame"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:415
msgid ""
"The backtrace buffer shows you the functions that are executing and their "
"argument values.  When a backtrace buffer is created, it shows each stack "
"frame on one, possibly very long, line.  (A stack frame is the place where "
"the Lisp interpreter records information about a particular invocation of a "
"function.)  The most recently called function will be at the top."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:416
#, no-wrap
msgid "current stack frame"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:420
msgid ""
"In a backtrace you can specify a stack frame by moving point to a line "
"describing that frame.  The frame whose line point is on is considered the "
"@dfn{current frame}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:429
msgid ""
"If a function name is underlined, that means Emacs knows where its source "
"code is located.  You can click with the mouse on that name, or move to it "
"and type @key{RET}, to visit the source code.  You can also type @key{RET} "
"while point is on any name of a function or variable which is not "
"underlined, to see help information for that symbol in a help buffer, if any "
"exists.  The @code{xref-find-definitions} command, bound to @key{M-.}, can "
"also be used on any identifier in a backtrace (@pxref{Looking Up "
"Identifiers,,,emacs, The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:436
msgid ""
"In backtraces, the tails of long lists and the ends of long strings, vectors "
"or structures, as well as objects which are deeply nested, will be printed "
"as underlined ``...''.  You can click with the mouse on a ``...'', or type "
"@key{RET} while point is on it, to show the part of the object that was "
"hidden.  To control how much abbreviation is done, customize "
"@code{backtrace-line-length}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:438
msgid "Here is a list of commands for navigating and viewing backtraces:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:440
#, no-wrap
msgid "v"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:442
msgid "Toggle the display of local variables of the current stack frame."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:443
#, no-wrap
msgid "p"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:446
msgid ""
"Move to the beginning of the frame, or to the beginning of the previous "
"frame."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:447
#, no-wrap
msgid "n"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:449
msgid "Move to the beginning of the next frame."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:450
#, no-wrap
msgid "+"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:453
msgid ""
"Add line breaks and indentation to the top-level Lisp form at point to make "
"it more readable."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:454
#, no-wrap
msgid "-"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:456
msgid "Collapse the top-level Lisp form at point back to a single line."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:457
#, no-wrap
msgid "#"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:459
msgid "Toggle @code{print-circle} for the frame at point."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:460
#, no-wrap
msgid ":"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:462
msgid "Toggle @code{print-gensym} for the frame at point."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:463
#, no-wrap
msgid "."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:465
msgid "Expand all the forms abbreviated with ``...'' in the frame at point."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:470
#, no-wrap
msgid "debugger command list"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:483
msgid ""
"The debugger buffer (in Debugger mode) provides special commands in addition "
"to the usual Emacs commands and to the Backtrace mode commands described in "
"the previous section.  The most important use of debugger commands is for "
"stepping through code, so that you can see how control flows.  The debugger "
"can step through the control structures of an interpreted function, but "
"cannot do so in a byte-compiled function.  If you would like to step through "
"a byte-compiled function, replace it with an interpreted definition of the "
"same function.  (To do this, visit the source for the function and type "
"@kbd{C-M-x} on its definition.)  You cannot use the Lisp debugger to step "
"through a primitive function."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:488
msgid ""
"Some of the debugger commands operate on the current frame.  If a frame "
"starts with a star, that means that exiting that frame will call the "
"debugger again.  This is useful for examining the return value of a "
"function."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:491
msgid "Here is a list of Debugger mode commands:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:493
#, no-wrap
msgid "c"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:498
msgid ""
"Exit the debugger and continue execution.  This resumes execution of the "
"program as if the debugger had never been entered (aside from any "
"side-effects that you caused by changing variable values or data structures "
"while inside the debugger)."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:499
#, no-wrap
msgid "d"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:504
msgid ""
"Continue execution, but enter the debugger the next time any Lisp function "
"is called.  This allows you to step through the subexpressions of an "
"expression, seeing what values the subexpressions compute, and what else "
"they do."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:509
msgid ""
"The stack frame made for the function call which enters the debugger in this "
"way will be flagged automatically so that the debugger will be called again "
"when the frame is exited.  You can use the @kbd{u} command to cancel this "
"flag."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:510
#, no-wrap
msgid "b"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:514
msgid ""
"Flag the current frame so that the debugger will be entered when the frame "
"is exited.  Frames flagged in this way are marked with stars in the "
"backtrace buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:515
#, no-wrap
msgid "u"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:519
msgid ""
"Don't enter the debugger when the current frame is exited.  This cancels a "
"@kbd{b} command on that frame.  The visible effect is to remove the star "
"from the line in the backtrace buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:520
#, no-wrap
msgid "j"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:524
msgid ""
"Flag the current frame like @kbd{b}.  Then continue execution like @kbd{c}, "
"but temporarily disable break-on-entry for all functions that are set up to "
"do so by @code{debug-on-entry}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:525
#, no-wrap
msgid "e"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:534
msgid ""
"Read a Lisp expression in the minibuffer, evaluate it (with the relevant "
"lexical environment, if applicable), and print the value in the echo area.  "
"The debugger alters certain important variables, and the current buffer, as "
"part of its operation; @kbd{e} temporarily restores their values from "
"outside the debugger, so you can examine and change them.  This makes the "
"debugger more transparent.  By contrast, @kbd{M-:} does nothing special in "
"the debugger; it shows you the variable values within the debugger."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:535
#, no-wrap
msgid "R"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:538
msgid ""
"Like @kbd{e}, but also save the result of evaluation in the buffer "
"@file{*Debugger-record*}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:539
#, no-wrap
msgid "q"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:542
msgid ""
"Terminate the program being debugged; return to top-level Emacs command "
"execution."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:545
msgid ""
"If the debugger was entered due to a @kbd{C-g} but you really want to quit, "
"and not debug, use the @kbd{q} command."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:546
#, no-wrap
msgid "r"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:549
msgid ""
"Return a value from the debugger.  The value is computed by reading an "
"expression with the minibuffer and evaluating it."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:556
msgid ""
"The @kbd{r} command is useful when the debugger was invoked due to exit from "
"a Lisp call frame (as requested with @kbd{b} or by entering the frame with "
"@kbd{d}); then the value specified in the @kbd{r} command is used as the "
"value of that frame.  It is also useful if you call @code{debug} and use its "
"return value.  Otherwise, @kbd{r} has the same effect as @kbd{c}, and the "
"specified return value does not matter."
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:558
msgid "You can't use @kbd{r} when the debugger was entered due to an error."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:559
#, no-wrap
msgid "l"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:563
msgid ""
"Display a list of functions that will invoke the debugger when called.  This "
"is a list of functions that are set to break on entry by means of "
"@code{debug-on-entry}."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:568
#, no-wrap
msgid "invoking lisp debugger"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:572
msgid ""
"Here we describe in full detail the function @code{debug} that is used to "
"invoke the debugger."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:573
#, no-wrap
msgid "Command debug &rest debugger-args"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:579
msgid ""
"This function enters the debugger.  It switches buffers to a buffer named "
"@file{*Backtrace*} (or @file{*Backtrace*<2>} if it is the second recursive "
"entry to the debugger, etc.), and fills it with information about the stack "
"of Lisp function calls.  It then enters a recursive edit, showing the "
"backtrace buffer in Debugger mode."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:584
msgid ""
"The Debugger mode @kbd{c}, @kbd{d}, @kbd{j}, and @kbd{r} commands exit the "
"recursive edit; then @code{debug} switches back to the previous buffer and "
"returns to whatever called @code{debug}.  This is the only way the function "
"@code{debug} can return to its caller."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:589
msgid ""
"The use of the @var{debugger-args} is that @code{debug} displays the rest of "
"its arguments at the top of the @file{*Backtrace*} buffer, so that the user "
"can see them.  Except as described below, this is the @emph{only} way these "
"arguments are used."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/debugging.texi:594
msgid ""
"However, certain values for first argument to @code{debug} have a special "
"significance.  (Normally, these values are used only by the internals of "
"Emacs, and not by programmers calling @code{debug}.)  Here is a table of "
"these special values:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:596
#, no-wrap
msgid "lambda"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:597
#, no-wrap
msgid "@code{lambda} in debug"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:603
msgid ""
"A first argument of @code{lambda} means @code{debug} was called because of "
"entry to a function when @code{debug-on-next-call} was non-@code{nil}.  The "
"debugger displays @samp{Debugger entered--entering a function:} as a line of "
"text at the top of the buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:604
#, no-wrap
msgid "debug"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:610
msgid ""
"@code{debug} as first argument means @code{debug} was called because of "
"entry to a function that was set to debug on entry.  The debugger displays "
"the string @samp{Debugger entered--entering a function:}, just as in the "
"@code{lambda} case.  It also marks the stack frame for that function so that "
"it will invoke the debugger when exited."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:611
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:617
msgid ""
"When the first argument is @code{t}, this indicates a call to @code{debug} "
"due to evaluation of a function call form when @code{debug-on-next-call} is "
"non-@code{nil}.  The debugger displays @samp{Debugger entered--beginning "
"evaluation of function call form:} as the top line in the buffer."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:618
#, no-wrap
msgid "exit"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:625
msgid ""
"When the first argument is @code{exit}, it indicates the exit of a stack "
"frame previously marked to invoke the debugger on exit.  The second argument "
"given to @code{debug} in this case is the value being returned from the "
"frame.  The debugger displays @samp{Debugger entered--returning value:} in "
"the top line of the buffer, followed by the value being returned."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:626
#, no-wrap
msgid "error"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:627
#, no-wrap
msgid "@code{error} in debug"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:633
msgid ""
"When the first argument is @code{error}, the debugger indicates that it is "
"being entered because an error or @code{quit} was signaled and not handled, "
"by displaying @samp{Debugger entered--Lisp error:} followed by the error "
"signaled and any arguments to @code{signal}.  For example,"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:638
#, no-wrap
msgid ""
"(let ((debug-on-error t))\n"
"  (/ 1 0))\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:646
#, no-wrap
msgid ""
"------ Buffer: *Backtrace* ------\n"
"Debugger entered--Lisp error: (arith-error)\n"
"  /(1 0)\n"
"...\n"
"------ Buffer: *Backtrace* ------\n"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:652
msgid ""
"If an error was signaled, presumably the variable @code{debug-on-error} is "
"non-@code{nil}.  If @code{quit} was signaled, then presumably the variable "
"@code{debug-on-quit} is non-@code{nil}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/debugging.texi:653
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/debugging.texi:659
msgid ""
"Use @code{nil} as the first of the @var{debugger-args} when you want to "
"enter the debugger explicitly.  The rest of the @var{debugger-args} are "
"printed on the top line of the buffer.  You can use this feature to display "
"messages---for example, to remind yourself of the conditions under which "
"@code{debug} is called."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:663
#, no-wrap
msgid "Internals of the Debugger"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:667
msgid ""
"This section describes functions and variables used internally by the "
"debugger."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:668
#, no-wrap
msgid "debugger"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:674
msgid ""
"The value of this variable is the function to call to invoke the debugger.  "
"Its value must be a function of any number of arguments, or, more typically, "
"the name of a function.  This function should invoke some kind of debugger.  "
"The default value of the variable is @code{debug}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:678
msgid ""
"The first argument that Lisp hands to the function indicates why it was "
"called.  The convention for arguments is detailed in the description of "
"@code{debug} (@pxref{Invoking the Debugger})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:680
#, no-wrap
msgid "backtrace"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:681
#, no-wrap
msgid "run time stack"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:682
#, no-wrap
msgid "call stack"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:686
msgid ""
"This function prints a trace of Lisp function calls currently active.  The "
"trace is identical to the one that @code{debug} would show in the "
"@file{*Backtrace*} buffer.  The return value is always nil."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:691
msgid ""
"In the following example, a Lisp expression calls @code{backtrace} "
"explicitly.  This prints the backtrace to the stream @code{standard-output}, "
"which, in this case, is the buffer @samp{backtrace-output}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:697
msgid ""
"Each line of the backtrace represents one function call.  The line shows the "
"function followed by a list of the values of the function's arguments if "
"they are all known; if they are still being computed, the line consists of a "
"list containing the function and its unevaluated arguments.  Long lists or "
"deeply nested structures may be elided."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:706
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"backtrace-output\"\n"
"  (let ((var 1))\n"
"    (save-excursion\n"
"      (setq var (eval '(progn\n"
"                         (1+ var)\n"
"                         (list 'testing (backtrace))))))))\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:708
#, no-wrap
msgid "     @result{} (testing nil)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:714
#, no-wrap
msgid ""
"----------- Buffer: backtrace-output ------------\n"
"  backtrace()\n"
"  (list 'testing (backtrace))\n"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/debugging.texi:723
#, no-wrap
msgid ""
"  (progn ...)\n"
"  eval((progn (1+ var) (list 'testing (backtrace))))\n"
"  (setq ...)\n"
"  (save-excursion ...)\n"
"  (let ...)\n"
"  (with-output-to-temp-buffer ...)\n"
"  eval((with-output-to-temp-buffer ...))\n"
"  eval-last-sexp-1(nil)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:727
#, no-wrap
msgid ""
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"----------- Buffer: backtrace-output ------------\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:731
#, no-wrap
msgid "debugger-stack-frame-as-list"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:736
msgid ""
"If this variable is non-@code{nil}, every stack frame of the backtrace is "
"displayed as a list.  This aims at improving the backtrace readability at "
"the cost of special forms no longer being visually different from regular "
"function calls."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/debugging.texi:739
msgid ""
"With @code{debugger-stack-frame-as-list} non-@code{nil}, the above example "
"would look as follows:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:745
#, no-wrap
msgid ""
"----------- Buffer: backtrace-output ------------\n"
"  (backtrace)\n"
"  (list 'testing (backtrace))\n"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/debugging.texi:754
#, no-wrap
msgid ""
"  (progn ...)\n"
"  (eval (progn (1+ var) (list 'testing (backtrace))))\n"
"  (setq ...)\n"
"  (save-excursion ...)\n"
"  (let ...)\n"
"  (with-output-to-temp-buffer ...)\n"
"  (eval (with-output-to-temp-buffer ...))\n"
"  (eval-last-sexp-1 nil)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/debugging.texi:758
#, no-wrap
msgid ""
"  (eval-last-sexp nil)\n"
"  (call-interactively eval-last-sexp)\n"
"----------- Buffer: backtrace-output ------------\n"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:762
#, no-wrap
msgid "debug-on-next-call"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:763
#, no-wrap
msgid "@code{eval}, and debugging"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:764
#, no-wrap
msgid "@code{apply}, and debugging"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:765
#, no-wrap
msgid "@code{funcall}, and debugging"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:769
msgid ""
"If this variable is non-@code{nil}, it says to call the debugger before the "
"next @code{eval}, @code{apply} or @code{funcall}.  Entering the debugger "
"sets @code{debug-on-next-call} to @code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:771
msgid "The @kbd{d} command in the debugger works by setting this variable."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:773
#, no-wrap
msgid "backtrace-debug level flag"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:779
msgid ""
"This function sets the debug-on-exit flag of the stack frame @var{level} "
"levels down the stack, giving it the value @var{flag}.  If @var{flag} is "
"non-@code{nil}, this will cause the debugger to be entered when that frame "
"later exits.  Even a nonlocal exit through that frame will enter the "
"debugger."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:781
msgid "This function is used only by the debugger."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:783
#, no-wrap
msgid "command-debug-status"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:789
msgid ""
"This variable records the debugging status of the current interactive "
"command.  Each time a command is called interactively, this variable is "
"bound to @code{nil}.  The debugger can set this variable to leave "
"information for future debugger invocations during the same command "
"invocation."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:793
msgid ""
"The advantage of using this variable rather than an ordinary global variable "
"is that the data will never carry over to a subsequent command invocation."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/debugging.texi:795
msgid "This variable is obsolete and will be removed in future versions."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:797
#, no-wrap
msgid "backtrace-frame frame-number &optional base"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:801
msgid ""
"The function @code{backtrace-frame} is intended for use in Lisp debuggers.  "
"It returns information about what computation is happening in the stack "
"frame @var{frame-number} levels down."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:804
msgid ""
"If that frame has not evaluated the arguments yet, or is a special form, the "
"value is @code{(nil @var{function} @var{arg-forms}@dots{})}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:808
msgid ""
"If that frame has evaluated its arguments and called its function already, "
"the return value is @code{(t @var{function} @var{arg-values}@dots{})}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:813
msgid ""
"In the return value, @var{function} is whatever was supplied as the @sc{car} "
"of the evaluated list, or a @code{lambda} expression in the case of a macro "
"call.  If the function has a @code{&rest} argument, that is represented as "
"the tail of the list @var{arg-values}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:816
msgid ""
"If @var{base} is specified, @var{frame-number} counts relative to the "
"topmost frame whose @var{function} is @var{base}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:819
msgid ""
"If @var{frame-number} is out of range, @code{backtrace-frame} returns "
"@code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:821
#, no-wrap
msgid "mapbacktrace function &optional base"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:825
msgid ""
"The function @code{mapbacktrace} calls @var{function} once for each frame in "
"the backtrace, starting at the first frame whose function is @var{base} (or "
"from the top if @var{base} is omitted or @code{nil})."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:828
msgid ""
"@var{function} is called with four arguments: @var{evald}, @var{func}, "
"@var{args}, and @var{flags}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:831
msgid ""
"If a frame has not evaluated its arguments yet or is a special form, "
"@var{evald} is @code{nil} and @var{args} is a list of forms."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/debugging.texi:837
msgid ""
"If a frame has evaluated its arguments and called its function already, "
"@var{evald} is @code{t} and @var{args} is a list of values.  @var{flags} is "
"a plist of properties of the current frame: currently, the only supported "
"property is @code{:debug-on-exit}, which is @code{t} if the stack frame's "
"@code{debug-on-exit} flag is set."
msgstr ""

#. type: include
#: ../../../../../doc/lispref/debugging.texi:839
#, no-wrap
msgid "edebug.texi"
msgstr ""

#. type: section
#: ../../../../../doc/lispref/debugging.texi:842
#, no-wrap
msgid "Debugging Invalid Lisp Syntax"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:843
#, no-wrap
msgid "debugging invalid Lisp syntax"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:853
msgid ""
"The Lisp reader reports invalid syntax, but cannot say where the real "
"problem is.  For example, the error @samp{End of file during parsing} in "
"evaluating an expression indicates an excess of open parentheses (or square "
"brackets).  The reader detects this imbalance at the end of the file, but it "
"cannot figure out where the close parenthesis should have been.  Likewise, "
"@samp{Invalid read syntax: \")\"} indicates an excess close parenthesis or "
"missing open parenthesis, but does not say where the missing parenthesis "
"belongs.  How, then, to find what to change?"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:859
msgid ""
"If the problem is not simply an imbalance of parentheses, a useful technique "
"is to try @kbd{C-M-e} (@code{end-of-defun}, @pxref{Moving by Defuns,,,emacs, "
"The GNU Emacs Manual}) at the beginning of each defun, and see if it goes to "
"the place where that defun appears to end.  If it does not, there is a "
"problem in that defun."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:860
#, no-wrap
msgid "unbalanced parentheses"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:861
#, no-wrap
msgid "parenthesis mismatch, debugging"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:866
msgid ""
"However, unmatched parentheses are the most common syntax errors in Lisp, "
"and we can give further advice for those cases.  (In addition, just moving "
"point through the code with Show Paren mode enabled might find the "
"mismatch.)"
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:870 ../../../../../doc/lispref/debugging.texi:872
#, no-wrap
msgid "Excess Open"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:870
msgid "How to find a spurious open paren or missing close."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/debugging.texi:870 ../../../../../doc/lispref/debugging.texi:910
#, no-wrap
msgid "Excess Close"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/debugging.texi:870
msgid "How to find a spurious close paren or missing open."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:873
#, no-wrap
msgid "Excess Open Parentheses"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:874
#, no-wrap
msgid "excess open parentheses"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:881
msgid ""
"The first step is to find the defun that is unbalanced.  If there is an "
"excess open parenthesis, the way to do this is to go to the end of the file "
"and type @kbd{C-u C-M-u} (@code{backward-up-list}, @pxref{Moving by "
"Parens,,,emacs, The GNU Emacs Manual}).  This will move you to the beginning "
"of the first defun that is unbalanced."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:889
msgid ""
"The next step is to determine precisely what is wrong.  There is no way to "
"be sure of this except by studying the program, but often the existing "
"indentation is a clue to where the parentheses should have been.  The "
"easiest way to use this clue is to reindent with @kbd{C-M-q} "
"(@code{indent-pp-sexp}, @pxref{Multi-line Indent,,,emacs, The GNU Emacs "
"Manual}) and see what moves.  @strong{But don't do this yet!} Keep reading, "
"first."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:895
msgid ""
"Before you do this, make sure the defun has enough close parentheses.  "
"Otherwise, @kbd{C-M-q} will get an error, or will reindent all the rest of "
"the file until the end.  So move to the end of the defun and insert a close "
"parenthesis there.  Don't use @kbd{C-M-e} (@code{end-of-defun}) to move "
"there, since that too will fail to work until the defun is balanced."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:904
msgid ""
"Now you can go to the beginning of the defun and type @kbd{C-M-q}.  Usually "
"all the lines from a certain point to the end of the function will shift to "
"the right.  There is probably a missing close parenthesis, or a superfluous "
"open parenthesis, near that point.  (However, don't assume this is true; "
"study the code to make sure.)  Once you have found the discrepancy, undo the "
"@kbd{C-M-q} with @kbd{C-_} (@code{undo}), since the old indentation is "
"probably appropriate to the intended parentheses."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:909
msgid ""
"After you think you have fixed the problem, use @kbd{C-M-q} again.  If the "
"old indentation actually fit the intended nesting of parentheses, and you "
"have put back those parentheses, @kbd{C-M-q} should not change anything."
msgstr ""

#. type: subsection
#: ../../../../../doc/lispref/debugging.texi:911
#, no-wrap
msgid "Excess Close Parentheses"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:912
#, no-wrap
msgid "excess close parentheses"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:918
msgid ""
"To deal with an excess close parenthesis, first go to the beginning of the "
"file, then type @kbd{C-u -1 C-M-u} (@code{backward-up-list} with an argument "
"of @minus{}1) to find the end of the first unbalanced defun."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:924
msgid ""
"Then find the actual matching close parenthesis by typing @kbd{C-M-f} "
"(@code{forward-sexp}, @pxref{Expressions,,,emacs, The GNU Emacs Manual})  at "
"the beginning of that defun.  This will leave you somewhere short of the "
"place where the defun ought to end.  It is possible that you will find a "
"spurious close parenthesis in that vicinity."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:933
msgid ""
"If you don't see a problem at that point, the next thing to do is to type "
"@kbd{C-M-q} (@code{indent-pp-sexp}) at the beginning of the defun.  A range "
"of lines will probably shift left; if so, the missing open parenthesis or "
"spurious close parenthesis is probably near the first of those lines.  "
"(However, don't assume this is true; study the code to make sure.)  Once you "
"have found the discrepancy, undo the @kbd{C-M-q} with @kbd{C-_} "
"(@code{undo}), since the old indentation is probably appropriate to the "
"intended parentheses."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:938
msgid ""
"After you think you have fixed the problem, use @kbd{C-M-q} again.  If the "
"old indentation actually fits the intended nesting of parentheses, and you "
"have put back those parentheses, @kbd{C-M-q} should not change anything."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:941
#, no-wrap
msgid "coverage testing"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:943
#, no-wrap
msgid "testcover-start"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:944
#, no-wrap
msgid "testcover-mark-all"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:945
#, no-wrap
msgid "testcover-next-mark"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:954
msgid ""
"You can do coverage testing for a file of Lisp code by loading the "
"@code{testcover} library and using the command @kbd{M-x testcover-start "
"@key{RET} @var{file} @key{RET}} to instrument the code.  Then test your code "
"by calling it one or more times.  Then use the command @kbd{M-x "
"testcover-mark-all} to display colored highlights on the code to show where "
"coverage is insufficient.  The command @kbd{M-x testcover-next-mark} will "
"move point forward to the next highlighted spot."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:962
msgid ""
"Normally, a red highlight indicates the form was never completely evaluated; "
"a brown highlight means it always evaluated to the same value (meaning there "
"has been little testing of what is done with the result).  However, the red "
"highlight is skipped for forms that can't possibly complete their "
"evaluation, such as @code{error}.  The brown highlight is skipped for forms "
"that are expected to always evaluate to the same value, such as @code{(setq "
"x 14)}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:965
msgid ""
"For difficult cases, you can add do-nothing macros to your code to give "
"advice to the test coverage tool."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/debugging.texi:966
#, no-wrap
msgid "1value form"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/debugging.texi:969
msgid ""
"Evaluate @var{form} and return its value, but inform coverage testing that "
"@var{form}'s value should always be the same."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/debugging.texi:971
#, no-wrap
msgid "noreturn form"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/debugging.texi:974
msgid ""
"Evaluate @var{form}, informing coverage testing that @var{form} should never "
"return.  If it ever does return, you get a run-time error."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:979
msgid ""
"Edebug also has a coverage testing feature (@pxref{Coverage Testing}).  "
"These features partly duplicate each other, and it would be cleaner to "
"combine them."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:983
#, no-wrap
msgid "profiling"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:984
#, no-wrap
msgid "profile"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:985
#, no-wrap
msgid "performance analysis"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:986
#, no-wrap
msgid "measuring resource usage"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:987
#, no-wrap
msgid "memory usage"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:995
msgid ""
"If your program is working correctly, but not fast enough, and you want to "
"make it run more quickly or efficiently, the first thing to do is "
"@dfn{profile} your code so that you know where it spends most of the "
"execution time.  If you find that one particular function is responsible for "
"a significant portion of the execution time, you can start looking for ways "
"to optimize that piece."
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:996
#, no-wrap
msgid "profiler-start"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:997
#, no-wrap
msgid "profiler-report"
msgstr ""

#. type: findex
#: ../../../../../doc/lispref/debugging.texi:998
#, no-wrap
msgid "profiler-stop"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:1010
msgid ""
"Emacs has built-in support for this.  To begin profiling, type @kbd{M-x "
"profiler-start}.  You can choose to profile by processor usage, memory "
"usage, or both.  Then run the code you'd like to speed up.  After that, type "
"@kbd{M-x profiler-report} to display a summary buffer for each resource (cpu "
"and memory) that you chose to profile.  The names of the report buffers "
"include the times at which the reports were generated, so you can generate "
"another report later on without erasing previous results.  When you have "
"finished profiling, type @kbd{M-x profiler-stop} (there is a small overhead "
"associated with profiling, so we don't recommend leaving it active except "
"when you are actually running the code you want to examine)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:1019
msgid ""
"The profiler report buffer shows, on each line, a function that was called, "
"followed by how much resources (cpu or memory) it used in absolute and "
"percentage terms since profiling started.  If a given line has a @samp{+} "
"symbol at the left-hand side, you can expand that line by typing "
"@kbd{@key{RET}}, in order to see the function(s) called by the higher-level "
"function.  Use a prefix argument (@kbd{C-u @key{RET}}) to see the whole call "
"tree below a function.  Pressing @kbd{@key{RET}} again will collapse back to "
"the original state."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:1024
msgid ""
"Press @kbd{j} or @kbd{mouse-2} to jump to the definition of a function at "
"point.  Press @kbd{d} to view a function's documentation.  You can save a "
"profile to a file using @kbd{C-x C-w}.  You can compare two profiles using "
"@kbd{=}."
msgstr ""

#. type: file{#1}
#: ../../../../../doc/lispref/debugging.texi:1027
#, no-wrap
msgid "elp.el"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:1028
#, no-wrap
msgid "timing programs"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:1039
msgid ""
"The @file{elp} library offers an alternative approach, which is useful when "
"you know in advance which Lisp function(s) you want to profile.  Using that "
"library, you begin by setting @code{elp-function-list} to the list of "
"function symbols---those are the functions you want to profile.  Then type "
"@w{@kbd{M-x elp-instrument-list @key{RET} nil @key{RET}}} to arrange for "
"profiling those functions.  After running the code you want to profile, "
"invoke @w{@kbd{M-x elp-results}} to display the current results.  See the "
"file @file{elp.el} for more detailed instructions.  This approach is limited "
"to profiling functions written in Lisp, it cannot profile Emacs primitives."
msgstr ""

#. type: file{#1}
#: ../../../../../doc/lispref/debugging.texi:1040
#, no-wrap
msgid "benchmark.el"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:1041
#, no-wrap
msgid "benchmarking"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/debugging.texi:1047
msgid ""
"You can measure the time it takes to evaluate individual Emacs Lisp forms "
"using the @file{benchmark} library.  See the macros @code{benchmark-run}, "
"@code{benchmark-run-compiled} and @code{benchmark-progn} in "
"@file{benchmark.el}.  You can also use the @code{benchmark} command for "
"timing forms interactively."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/debugging.texi:1050
#, no-wrap
msgid "--enable-profiling option of configure"
msgstr ""

#. type: ifnottex
#: ../../../../../doc/lispref/debugging.texi:1057
msgid ""
"To profile Emacs at the level of its C code, you can build it using the "
"@option{--enable-profiling} option of @command{configure}.  When Emacs "
"exits, it generates a file @file{gmon.out} that you can examine using the "
"@command{gprof} utility.  This feature is mainly useful for debugging "
"Emacs.  It actually stops the Lisp-level @kbd{M-x profiler-@dots{}} commands "
"described above from working."
msgstr ""

# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-12 23:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: ../../../../../doc/lispref/help.texi:6 ../../../../../doc/lispref/help.texi:7
#, no-wrap
msgid "Documentation"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:8
#, no-wrap
msgid "documentation strings"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:14
msgid ""
"GNU Emacs has convenient built-in help facilities, most of which derive "
"their information from documentation strings associated with functions and "
"variables.  This chapter describes how to access documentation strings in "
"Lisp programs."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:20
msgid ""
"The contents of a documentation string should follow certain conventions.  "
"In particular, its first line should be a complete sentence (or two complete "
"sentences) that briefly describes what the function or variable does.  "
"@xref{Documentation Tips}, for how to write good documentation strings."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:28
msgid ""
"Note that the documentation strings for Emacs are not the same thing as the "
"Emacs manual.  Manuals have their own source files, written in the Texinfo "
"language; documentation strings are specified in the definitions of the "
"functions and variables they apply to.  A collection of documentation "
"strings is not sufficient as a manual because a good manual is not organized "
"in that fashion; it is organized in terms of topics of discussion."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:31
msgid ""
"For commands to display documentation strings, see @ref{Help, , Help, emacs, "
"The GNU Emacs Manual}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:42 ../../../../../doc/lispref/help.texi:43
#, no-wrap
msgid "Documentation Basics"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "Where doc strings are defined and stored."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:92
#, no-wrap
msgid "Accessing Documentation"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "How Lisp programs can access doc strings."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:304
#, no-wrap
msgid "Keys in Documentation"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "Substituting current key bindings."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:431 ../../../../../doc/lispref/help.texi:432
#, no-wrap
msgid "Text Quoting Style"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "Quotation marks in doc strings and messages."
msgstr ""

#. type: node
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:478
#, no-wrap
msgid "Describing Characters"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "Making printable descriptions of non-printing characters and key sequences."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:40 ../../../../../doc/lispref/help.texi:589 ../../../../../doc/lispref/help.texi:590
#, no-wrap
msgid "Help Functions"
msgstr ""

#. type: menuentry
#: ../../../../../doc/lispref/help.texi:40
msgid "Subroutines used by Emacs help facilities."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:44
#, no-wrap
msgid "documentation conventions"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:45
#, no-wrap
msgid "writing a documentation string"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:46
#, no-wrap
msgid "string, writing a doc string"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:53
msgid ""
"A documentation string is written using the Lisp syntax for strings, with "
"double-quote characters surrounding the text.  It is, in fact, an actual "
"Lisp string.  When the string appears in the proper place in a function or "
"variable definition, it serves as the function's or variable's "
"documentation."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:54
#, no-wrap
msgid "@code{function-documentation} property"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:61
msgid ""
"In a function definition (a @code{lambda} or @code{defun} form), the "
"documentation string is specified after the argument list, and is normally "
"stored directly in the function object.  @xref{Function Documentation}.  You "
"can also put function documentation in the @code{function-documentation} "
"property of a function name (@pxref{Accessing Documentation})."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:62
#, no-wrap
msgid "@code{variable-documentation} property"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:67
msgid ""
"In a variable definition (a @code{defvar} form), the documentation string is "
"specified after the initial value.  @xref{Defining Variables}.  The string "
"is stored in the variable's @code{variable-documentation} property."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:68
#, no-wrap
msgid "@file{DOC} (documentation) file"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:79
msgid ""
"Sometimes, Emacs does not keep documentation strings in memory.  There are "
"two such circumstances.  Firstly, to save memory, the documentation for "
"preloaded functions and variables (including primitives) is kept in a file "
"named @file{DOC}, in the directory specified by @code{doc-directory} "
"(@pxref{Accessing Documentation}).  Secondly, when a function or variable is "
"loaded from a byte-compiled file, Emacs avoids loading its documentation "
"string (@pxref{Docs and Compilation}).  In both cases, Emacs looks up the "
"documentation string from the file only when needed, such as when the user "
"calls @kbd{C-h f} (@code{describe-function}) for a function."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:85
msgid ""
"Documentation strings can contain special @dfn{key substitution sequences}, "
"referring to key bindings which are looked up only when the user views the "
"documentation.  This allows the help commands to display the correct keys "
"even if a user rearranges the default key bindings.  @xref{Keys in "
"Documentation}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:91
msgid ""
"In the documentation string of an autoloaded command (@pxref{Autoload}), "
"these key-substitution sequences have an additional special effect: they "
"cause @kbd{C-h f} on the command to trigger autoloading.  (This is needed "
"for correctly setting up the hyperlinks in the @file{*Help*} buffer.)"
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:93
#, no-wrap
msgid "Access to Documentation Strings"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:94
#, no-wrap
msgid "accessing documentation strings"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:96
#, no-wrap
msgid "documentation-property symbol property &optional verbatim"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:104
msgid ""
"This function returns the documentation string recorded in @var{symbol}'s "
"property list under property @var{property}.  It is most often used to look "
"up the documentation strings of variables, for which @var{property} is "
"@code{variable-documentation}.  However, it can also be used to look up "
"other kinds of documentation, such as for customization groups (but for "
"function documentation, use the @code{documentation} function, below)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:108
msgid ""
"If the property value refers to a documentation string stored in the "
"@file{DOC} file or a byte-compiled file, this function looks up that string "
"and returns it."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:112
msgid ""
"If the property value isn't @code{nil}, isn't a string, and doesn't refer to "
"text in a file, then it is evaluated as a Lisp expression to obtain a "
"string."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:117
msgid ""
"Finally, this function passes the string through "
"@code{substitute-command-keys} to substitute key bindings (@pxref{Keys in "
"Documentation}).  It skips this step if @var{verbatim} is non-@code{nil}."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:123
#, no-wrap
msgid ""
"(documentation-property 'command-line-processed\n"
"   'variable-documentation)\n"
"     @result{} \"Non-nil once command line has been processed\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:127
#, no-wrap
msgid ""
"(symbol-plist 'command-line-processed)\n"
"     @result{} (variable-documentation 188902)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:131
#, no-wrap
msgid ""
"(documentation-property 'emacs 'group-documentation)\n"
"     @result{} \"Customization of the One True Editor.\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:135
#, no-wrap
msgid "documentation function &optional verbatim"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:139
msgid ""
"This function returns the documentation string of @var{function}.  It "
"handles macros, named keyboard macros, and special forms, as well as "
"ordinary functions."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:144
msgid ""
"If @var{function} is a symbol, this function first looks for the "
"@code{function-documentation} property of that symbol; if that has a "
"non-@code{nil} value, the documentation comes from that value (if the value "
"is not a string, it is evaluated)."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:149
msgid ""
"If @var{function} is not a symbol, or if it has no "
"@code{function-documentation} property, then @code{documentation} extracts "
"the documentation string from the actual function definition, reading it "
"from a file if called for."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:153
msgid ""
"Finally, unless @var{verbatim} is non-@code{nil}, this function calls "
"@code{substitute-command-keys}.  The result is the documentation string to "
"return."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:158
msgid ""
"The @code{documentation} function signals a @code{void-function} error if "
"@var{function} has no function definition.  However, it is OK if the "
"function definition has no documentation string.  In that case, "
"@code{documentation} returns @code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:160
#, no-wrap
msgid "face-documentation face"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:163
msgid "This function returns the documentation string of @var{face} as a face."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:168
msgid ""
"Here is an example of using the two functions, @code{documentation} and "
"@code{documentation-property}, to display the documentation strings for "
"several symbols in a @file{*Help*} buffer."
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/help.texi:170
msgid "describe-symbols example"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:179
#, no-wrap
msgid ""
"(defun describe-symbols (pattern)\n"
"  \"Describe the Emacs Lisp symbols matching PATTERN.\n"
"All symbols that have PATTERN in their name are described\n"
"in the *Help* buffer.\"\n"
"  (interactive \"sDescribe symbols matching: \")\n"
"  (let ((describe-func\n"
"         (lambda (s)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:194
#, no-wrap
msgid ""
"           ;; @r{Print description of symbol.}\n"
"           (if (fboundp s)             ; @r{It is a function.}\n"
"               (princ\n"
"                (format \"%s\\t%s\\n%s\\n\\n\" s\n"
"                  (if (commandp s)\n"
"                      (let ((keys (where-is-internal s)))\n"
"                        (if keys\n"
"                            (concat\n"
"                             \"Keys: \"\n"
"                             (mapconcat 'key-description\n"
"                                        keys \" \"))\n"
"                          \"Keys: none\"))\n"
"                    \"Function\")\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:198
#, no-wrap
msgid ""
"                  (or (documentation s)\n"
"                      \"not documented\"))))\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:200
#, no-wrap
msgid "           (if (boundp s)              ; @r{It is a variable.}\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:206
#, no-wrap
msgid ""
"               (princ\n"
"                (format \"%s\\t%s\\n%s\\n\\n\" s\n"
"                  (if (custom-variable-p s)\n"
"                      \"Option \" \"Variable\")\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:212
#, no-wrap
msgid ""
"                  (or (documentation-property\n"
"                        s 'variable-documentation)\n"
"                      \"not documented\"))))))\n"
"        sym-list)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:219
#, no-wrap
msgid ""
"    ;; @r{Build a list of symbols that match pattern.}\n"
"    (mapatoms (lambda (sym)\n"
"                (if (string-match pattern (symbol-name sym))\n"
"                    (setq sym-list (cons sym sym-list)))))\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:226
#, no-wrap
msgid ""
"    ;; @r{Display the data.}\n"
"    (help-setup-xref (list 'describe-symbols pattern) (interactive-p))\n"
"    (with-help-window (help-buffer)\n"
"      (mapcar describe-func (sort sym-list 'string<)))))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:231
msgid ""
"The @code{describe-symbols} function works like @code{apropos}, but provides "
"more information."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:235
#, no-wrap
msgid ""
"(describe-symbols \"goal\")\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:239
#, no-wrap
msgid ""
"---------- Buffer: *Help* ----------\n"
"goal-column     Option\n"
"Semipermanent goal column for vertical motion, as set by @dots{}\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:246
#, no-wrap
msgid ""
"minibuffer-temporary-goal-position      Variable\n"
"not documented\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:251
#, no-wrap
msgid ""
"set-goal-column Keys: C-x C-n\n"
"Set the current horizontal position as a goal for C-n and C-p.\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:259
#, no-wrap
msgid ""
"Those commands will move to this position in the line moved to\n"
"rather than trying to keep the same horizontal position.\n"
"With a non-nil argument ARG, clears out the goal column\n"
"so that C-n and C-p resume vertical motion.\n"
"The goal column is stored in the variable ‘goal-column’.\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:261
#, no-wrap
msgid "(fn ARG)\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:268
#, no-wrap
msgid ""
"temporary-goal-column   Variable\n"
"Current goal column for vertical motion.\n"
"It is the column where point was at the start of the current run\n"
"of vertical motion commands.\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:273
#, no-wrap
msgid ""
"When moving by visual lines via the function ‘line-move-visual’, it is a "
"cons\n"
"cell (COL . HSCROLL), where COL is the x-position, in pixels,\n"
"divided by the default column width, and HSCROLL is the number of\n"
"columns by which window is scrolled from left margin.\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:277
#, no-wrap
msgid ""
"When the ‘track-eol’ feature is doing its job, the value is\n"
"‘most-positive-fixnum’.\n"
"---------- Buffer: *Help* ----------\n"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/help.texi:281
msgid "Definition of Snarf-documentation"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:281
#, no-wrap
msgid "Snarf-documentation filename"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:287
msgid ""
"This function is used when building Emacs, just before the runnable Emacs is "
"dumped.  It finds the positions of the documentation strings stored in the "
"file @var{filename}, and records those positions into memory in the function "
"definitions and variable property lists.  @xref{Building Emacs}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:292
msgid ""
"Emacs reads the file @var{filename} from the @file{emacs/etc} directory.  "
"When the dumped Emacs is later executed, the same file will be looked for in "
"the directory @code{doc-directory}.  Usually @var{filename} is "
"@code{\"DOC\"}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:294
#, no-wrap
msgid "doc-directory"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:298
msgid ""
"This variable holds the name of the directory which should contain the file "
"@code{\"DOC\"} that contains documentation strings for built-in and "
"preloaded functions and variables."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:302
msgid ""
"In most cases, this is the same as @code{data-directory}.  They may be "
"different when you run Emacs from the directory where you built it, without "
"actually installing it.  @xref{Definition of data-directory}."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:305
#, no-wrap
msgid "Substituting Key Bindings in Documentation"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:306
#, no-wrap
msgid "documentation, keys in"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:307
#, no-wrap
msgid "keys in documentation strings"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:308
#, no-wrap
msgid "substituting keys in documentation"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:309
#, no-wrap
msgid "key substitution sequence"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:317
msgid ""
"When documentation strings refer to key sequences, they should use the "
"current, actual key bindings.  They can do so using certain special text "
"sequences described below.  Accessing documentation strings in the usual way "
"substitutes current key binding information for these special sequences.  "
"This works by calling @code{substitute-command-keys}.  You can also call "
"that function yourself."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:319
msgid "Here is a list of the special sequences and what they mean:"
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:321
#, no-wrap
msgid "\\[@var{command}]"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:324
msgid ""
"stands for a key sequence that will invoke @var{command}, or @samp{M-x "
"@var{command}} if @var{command} has no key bindings."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:325
#, no-wrap
msgid "\\@{@var{mapvar}@}"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:328
msgid ""
"stands for a summary of the keymap which is the value of the variable "
"@var{mapvar}.  The summary is made using @code{describe-bindings}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:329
#, no-wrap
msgid "\\<@var{mapvar}>"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:333
msgid ""
"stands for no text itself.  It is used only for a side effect: it specifies "
"@var{mapvar}'s value as the keymap for any following "
"@samp{\\[@var{command}]} sequences in this documentation string."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:334
#, no-wrap
msgid "`"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:339
msgid ""
"(grave accent) stands for a left quote.  This generates a left single "
"quotation mark, an apostrophe, or a grave accent depending on the value of "
"@code{text-quoting-style}.  @xref{Text Quoting Style}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:340
#, no-wrap
msgid "'"
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:344
msgid ""
"(apostrophe) stands for a right quote.  This generates a right single "
"quotation mark or an apostrophe depending on the value of "
"@code{text-quoting-style}."
msgstr ""

#. type: item
#: ../../../../../doc/lispref/help.texi:345
#, no-wrap
msgid "\\="
msgstr ""

#. type: table
#: ../../../../../doc/lispref/help.texi:349
msgid ""
"quotes the following character and is discarded; thus, @samp{\\=`} puts "
"@samp{`} into the output, @samp{\\=\\[} puts @samp{\\[} into the output, and "
"@samp{\\=\\=} puts @samp{\\=} into the output."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:353
msgid ""
"@strong{Please note:} Each @samp{\\} must be doubled when written in a "
"string in Emacs Lisp."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:354 ../../../../../doc/lispref/help.texi:459
#, no-wrap
msgid "text-quoting-style"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:355 ../../../../../doc/lispref/help.texi:460
#, no-wrap
msgid "curved quotes"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:356 ../../../../../doc/lispref/help.texi:461
#, no-wrap
msgid "curly quotes"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:367
msgid ""
"The value of this variable is a symbol that specifies the style Emacs should "
"use for single quotes in the wording of help and messages.  If the "
"variable's value is @code{curve}, the style is @t{‘like this’} with curved "
"single quotes.  If the value is @code{straight}, the style is @t{'like "
"this'} with straight apostrophes.  If the value is @code{grave}, quotes are "
"not translated and the style is @t{`like this'} with grave accent and "
"apostrophe, the standard style before Emacs version 25.  The default value "
"@code{nil} acts like @code{curve} if curved single quotes seem to be "
"displayable, and like @code{grave} otherwise."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:371 ../../../../../doc/lispref/help.texi:476
msgid ""
"This option is useful on platforms that have problems with curved quotes.  "
"You can customize it freely according to your personal preference."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:373
#, no-wrap
msgid "substitute-command-keys string"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:378
msgid ""
"This function scans @var{string} for the above special sequences and "
"replaces them by what they stand for, returning the result as a string.  "
"This permits display of documentation that refers accurately to the user's "
"own customized key bindings."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:379
#, no-wrap
msgid "advertised binding"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:384
msgid ""
"If a command has multiple bindings, this function normally uses the first "
"one it finds.  You can specify one particular key binding by assigning an "
"@code{:advertised-binding} symbol property to the command, like this:"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/help.texi:387
#, no-wrap
msgid "(put 'undo :advertised-binding [?\\C-/])\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:393
msgid ""
"The @code{:advertised-binding} property also affects the binding shown in "
"menu items (@pxref{Menu Bar}).  The property is ignored if it specifies a "
"key binding that the command does not actually have."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:396
msgid "Here are examples of the special sequences:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:402
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"To abort recursive edit, type `\\\\[abort-recursive-edit]'.\")\n"
"@result{} \"To abort recursive edit, type ‘C-]’.\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:409
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"The keys that are defined for the minibuffer here are:\n"
"  \\\\@{minibuffer-local-must-match-map@}\")\n"
"@result{} \"The keys that are defined for the minibuffer here are:\n"
msgstr ""

#. type: smallexample
#: ../../../../../doc/lispref/help.texi:418
#, no-wrap
msgid ""
"?               minibuffer-completion-help\n"
"SPC             minibuffer-complete-word\n"
"TAB             minibuffer-complete\n"
"C-j             minibuffer-complete-and-exit\n"
"RET             minibuffer-complete-and-exit\n"
"C-g             abort-recursive-edit\n"
"\"\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:424
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"To abort a recursive edit from the minibuffer, type \\\n"
"`\\\\<minibuffer-local-must-match-map>\\\\[abort-recursive-edit]'.\")\n"
"@result{} \"To abort a recursive edit from the minibuffer, type ‘C-g’.\"\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:430
msgid ""
"There are other special conventions for the text in documentation "
"strings---for instance, you can refer to functions, variables, and sections "
"of this manual.  @xref{Documentation Tips}, for details."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:446
msgid ""
"Typically, grave accents and apostrophes are treated specially in "
"documentation strings and diagnostic messages, and translate to matching "
"single quotation marks (also called ``curved quotes'').  For example, the "
"documentation string @t{\"Alias for `foo'.\"} and the function call "
"@code{(message \"Alias for `foo'.\")} both translate to @t{\"Alias for "
"‘foo’.\"}.  Less commonly, Emacs displays grave accents and apostrophes as "
"themselves, or as apostrophes only (e.g., @t{\"Alias for 'foo'.\"}).  "
"Documentation strings and message formats should be written so that they "
"display well with any of these styles.  For example, the documentation "
"string @t{\"Alias for 'foo'.\"} is probably not what you want, as it can "
"display as @t{\"Alias for ’foo’.\"}, an unusual style in English."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:458
msgid ""
"Sometimes you may need to display a grave accent or apostrophe without "
"translation, regardless of text quoting style.  In a documentation string, "
"you can do this with escapes.  For example, in the documentation string "
"@t{\"\\\\=`(a ,(sin 0)) ==> (a 0.0)\"} the grave accent is intended to "
"denote Lisp code, so it is escaped and displays as itself regardless of "
"quoting style.  In a call to @code{message} or @code{error}, you can avoid "
"translation by using a format @t{\"%s\"} with an argument that is a call to "
"@code{format}.  For example, @code{(message \"%s\" (format \"`(a ,(sin %S)) "
"==> (a %S)\" x (sin x)))} displays a message that starts with grave accent "
"regardless of text quoting style."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:472
msgid ""
"The value of this user option is a symbol that specifies the style Emacs "
"should use for single quotes in the wording of help and messages.  If the "
"option's value is @code{curve}, the style is @t{‘like this’} with curved "
"single quotes.  If the value is @code{straight}, the style is @t{'like "
"this'} with straight apostrophes.  If the value is @code{grave}, quotes are "
"not translated and the style is @t{`like this'} with grave accent and "
"apostrophe, the standard style before Emacs version 25.  The default value "
"@code{nil} acts like @code{curve} if curved single quotes seem to be "
"displayable, and like @code{grave} otherwise."
msgstr ""

#. type: section
#: ../../../../../doc/lispref/help.texi:479
#, no-wrap
msgid "Describing Characters for Help Messages"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:480
#, no-wrap
msgid "describe characters and events"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:488
msgid ""
"These functions convert events, key sequences, or characters to textual "
"descriptions.  These descriptions are useful for including arbitrary text "
"characters or key sequences in messages, because they convert non-printing "
"and whitespace characters to sequences of printing characters.  The "
"description of a non-whitespace printing character is the character itself."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:489
#, no-wrap
msgid "key-description sequence &optional prefix"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:490
#, no-wrap
msgid "Emacs event standard notation"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:497
msgid ""
"This function returns a string containing the Emacs standard notation for "
"the input events in @var{sequence}.  If @var{prefix} is non-@code{nil}, it "
"is a sequence of input events leading up to @var{sequence} and is included "
"in the return value.  Both arguments may be strings, vectors or lists.  "
"@xref{Input Events}, for more information about valid events."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:502
#, no-wrap
msgid ""
"(key-description [?\\M-3 delete])\n"
"     @result{} \"M-3 <delete>\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:506
#, no-wrap
msgid ""
"(key-description [delete] \"\\M-3\")\n"
"     @result{} \"M-3 <delete>\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:510
msgid "See also the examples for @code{single-key-description}, below."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:512
#, no-wrap
msgid "single-key-description event &optional no-angles"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:513
#, no-wrap
msgid "event printing"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:514
#, no-wrap
msgid "character printing"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:515
#, no-wrap
msgid "control character printing"
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:516
#, no-wrap
msgid "meta character printing"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:525
msgid ""
"This function returns a string describing @var{event} in the standard Emacs "
"notation for keyboard input.  A normal printing character appears as itself, "
"but a control character turns into a string starting with @samp{C-}, a meta "
"character turns into a string starting with @samp{M-}, and space, tab, etc., "
"appear as @samp{SPC}, @samp{TAB}, etc.  A function key symbol appears inside "
"angle brackets @samp{<@dots{}>}.  An event that is a list appears as the "
"name of the symbol in the @sc{car} of the list, inside angle brackets."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:530
msgid ""
"If the optional argument @var{no-angles} is non-@code{nil}, the angle "
"brackets around function keys and event symbols are omitted; this is for "
"compatibility with old versions of Emacs which didn't use the brackets."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:535
#, no-wrap
msgid ""
"(single-key-description ?\\C-x)\n"
"     @result{} \"C-x\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:539
#, no-wrap
msgid ""
"(key-description \"\\C-x \\M-y \\n \\t \\r \\f123\")\n"
"     @result{} \"C-x SPC M-y SPC C-j SPC TAB SPC RET SPC C-l 1 2 3\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:543
#, no-wrap
msgid ""
"(single-key-description 'delete)\n"
"     @result{} \"<delete>\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:547
#, no-wrap
msgid ""
"(single-key-description 'C-mouse-1)\n"
"     @result{} \"<C-mouse-1>\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:551
#, no-wrap
msgid ""
"(single-key-description 'C-mouse-1 t)\n"
"     @result{} \"C-mouse-1\"\n"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:555
#, no-wrap
msgid "text-char-description character"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:566
msgid ""
"This function returns a string describing @var{character} in the standard "
"Emacs notation for characters that can appear in text---similar to "
"@code{single-key-description}, except that the argument must be a valid "
"character code that passes a @code{characterp} test (@pxref{Character "
"Codes}).  The function produces descriptions of control characters with a "
"leading caret (which is how Emacs usually displays control characters in "
"buffers).  Characters with modifier bits will cause this function to signal "
"an error (@acronym{ASCII} characters with the Control modifier are an "
"exception, they are represented as control characters)."
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:571
#, no-wrap
msgid ""
"(text-char-description ?\\C-c)\n"
"     @result{} \"^C\"\n"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:575
#, no-wrap
msgid ""
"(text-char-description ?\\M-m)\n"
"     @error{} Wrong type argument: characterp, 134217837\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:579
#, no-wrap
msgid "Command read-kbd-macro string &optional need-vector"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:587
msgid ""
"This function is used mainly for operating on keyboard macros, but it can "
"also be used as a rough inverse for @code{key-description}.  You call it "
"with a string containing key descriptions, separated by spaces; it returns a "
"string or vector containing the corresponding events.  (This may or may not "
"be a single valid key sequence, depending on what events you use; @pxref{Key "
"Sequences}.)  If @var{need-vector} is non-@code{nil}, the return value is "
"always a vector."
msgstr ""

#. type: cindex
#: ../../../../../doc/lispref/help.texi:591
#, no-wrap
msgid "help functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:597
msgid ""
"Emacs provides a variety of built-in help functions, all accessible to the "
"user as subcommands of the prefix @kbd{C-h}.  For more information about "
"them, see @ref{Help, , Help, emacs, The GNU Emacs Manual}.  Here we describe "
"some program-level interfaces to the same information."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:598
#, no-wrap
msgid "Command apropos pattern &optional do-all"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:605
msgid ""
"This function finds all meaningful symbols whose names contain a match for "
"the apropos pattern @var{pattern}.  An apropos pattern is either a word to "
"match, a space-separated list of words of which at least two must match, or "
"a regular expression (if any special regular expression characters occur).  "
"A symbol is meaningful if it has a definition as a function, variable, or "
"face, or has properties."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:607
msgid "The function returns a list of elements that look like this:"
msgstr ""

#. type: example
#: ../../../../../doc/lispref/help.texi:611
#, no-wrap
msgid ""
"(@var{symbol} @var{score} @var{function-doc} @var{variable-doc}\n"
" @var{plist-doc} @var{widget-doc} @var{face-doc} @var{group-doc})\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:617
msgid ""
"Here, @var{score} is an integer measure of how important the symbol seems to "
"be as a match.  Each of the remaining elements is a documentation string, or "
"@code{nil}, for @var{symbol} as a function, variable, etc."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:621
msgid ""
"It also displays the symbols in a buffer named @file{*Apropos*}, each with a "
"one-line description taken from the beginning of its documentation string."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:627
msgid ""
"If @var{do-all} is non-@code{nil}, or if the user option "
"@code{apropos-do-all} is non-@code{nil}, then @code{apropos} also shows key "
"bindings for the functions that are found; it also shows @emph{all} interned "
"symbols, not just meaningful ones (and it lists them in the return value as "
"well)."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:629
#, no-wrap
msgid "help-map"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:632
msgid ""
"The value of this variable is a local keymap for characters following the "
"Help key, @kbd{C-h}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:634
#, no-wrap
msgid "{Prefix Command} help-command"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:638
msgid ""
"This symbol is not a function; its function definition cell holds the keymap "
"known as @code{help-map}.  It is defined in @file{help.el} as follows:"
msgstr ""

#. type: group
#: ../../../../../doc/lispref/help.texi:643
#, no-wrap
msgid ""
"(define-key global-map (string help-char) 'help-command)\n"
"(fset 'help-command help-map)\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:647
#, no-wrap
msgid "help-char"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:653
msgid ""
"The value of this variable is the help character---the character that Emacs "
"recognizes as meaning Help.  By default, its value is 8, which stands for "
"@kbd{C-h}.  When Emacs reads this character, if @code{help-form} is a "
"non-@code{nil} Lisp expression, it evaluates that expression, and displays "
"the result in a window if it is a string."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:659
msgid ""
"Usually the value of @code{help-form} is @code{nil}.  Then the help "
"character has no special meaning at the level of command input, and it "
"becomes part of a key sequence in the normal way.  The standard key binding "
"of @kbd{C-h} is a prefix key for several general-purpose help features."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:664
msgid ""
"The help character is special after prefix keys, too.  If it has no binding "
"as a subcommand of the prefix key, it runs @code{describe-prefix-bindings}, "
"which displays a list of all the subcommands of the prefix key."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:666
#, no-wrap
msgid "help-event-list"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:670
msgid ""
"The value of this variable is a list of event types that serve as "
"alternative help characters.  These events are handled just like the event "
"specified by @code{help-char}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:672
#, no-wrap
msgid "help-form"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:676
msgid ""
"If this variable is non-@code{nil}, its value is a form to evaluate whenever "
"the character @code{help-char} is read.  If evaluating the form produces a "
"string, that string is displayed."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:683
msgid ""
"A command that calls @code{read-event}, @code{read-char-choice}, or "
"@code{read-char} probably should bind @code{help-form} to a non-@code{nil} "
"expression while it does input.  (The time when you should not do this is "
"when @kbd{C-h} has some other meaning.)  Evaluating this expression should "
"result in a string that explains what the input is for and how to enter it "
"properly."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:686
msgid ""
"Entry to the minibuffer binds this variable to the value of "
"@code{minibuffer-help-form} (@pxref{Definition of minibuffer-help-form})."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:688
#, no-wrap
msgid "prefix-help-command"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:693
msgid ""
"This variable holds a function to print help for a prefix key.  The function "
"is called when the user types a prefix key followed by the help character, "
"and the help character has no binding after that prefix.  The variable's "
"default value is @code{describe-prefix-bindings}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:695
#, no-wrap
msgid "Command describe-prefix-bindings"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:700
msgid ""
"This function calls @code{describe-bindings} to display a list of all the "
"subcommands of the prefix key of the most recent key sequence.  The prefix "
"described consists of all but the last event of that key sequence.  (The "
"last event is, presumably, the help character.)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:706
msgid ""
"The following two functions are meant for modes that want to provide help "
"without relinquishing control, such as the electric modes.  Their names "
"begin with @samp{Helper} to distinguish them from the ordinary help "
"functions."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:707
#, no-wrap
msgid "Command Helper-describe-bindings"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:711
msgid ""
"This command pops up a window displaying a help buffer containing a listing "
"of all of the key bindings from both the local and global keymaps.  It works "
"by calling @code{describe-bindings}."
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:713
#, no-wrap
msgid "Command Helper-help"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:718
msgid ""
"This command provides help for the current mode.  It prompts the user in the "
"minibuffer with the message @samp{Help (Type ? for further options)}, and "
"then provides assistance in finding out what the key bindings are, and what "
"the mode is intended for.  It returns @code{nil}."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/help.texi:719
#, no-wrap
msgid "Helper-help-map"
msgstr ""

#. type: deffn
#: ../../../../../doc/lispref/help.texi:721
msgid "This can be customized by changing the map @code{Helper-help-map}."
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:723
#, no-wrap
msgid "data-directory"
msgstr ""

#. type: anchor{#1}
#: ../../../../../doc/lispref/help.texi:727
msgid "Definition of data-directory"
msgstr ""

#. type: defvar
#: ../../../../../doc/lispref/help.texi:727
msgid ""
"This variable holds the name of the directory in which Emacs finds certain "
"documentation and text files that come with Emacs."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:729
#, no-wrap
msgid "help-buffer"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:732
msgid ""
"This function returns the name of the help buffer, which is normally "
"@file{*Help*}; if such a buffer does not exist, it is first created."
msgstr ""

#. type: vindex
#: ../../../../../doc/lispref/help.texi:734
#, no-wrap
msgid "help-window-select"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:735
#, no-wrap
msgid "with-help-window buffer-or-name body@dots{}"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:746
msgid ""
"This macro evaluates @var{body} like @code{with-output-to-temp-buffer} "
"(@pxref{Temporary Displays}), inserting any output produced by its forms "
"into a buffer specified by @var{buffer-or-name}, which can be a buffer or "
"the name of a buffer.  (Frequently, @var{buffer-or-name} is the value "
"returned by the function @code{help-buffer}.)  This macro puts the specified "
"buffer into Help mode and displays a message telling the user how to quit "
"and scroll the help window.  It selects the help window if the current value "
"of the user option @code{help-window-select} has been set accordingly.  It "
"returns the last value in @var{body}."
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:748
#, no-wrap
msgid "help-setup-xref item interactive-p"
msgstr ""

#. type: defun
#: ../../../../../doc/lispref/help.texi:759
msgid ""
"This function updates the cross reference data in the @file{*Help*} buffer, "
"which is used to regenerate the help information when the user clicks on the "
"@samp{Back} or @samp{Forward} buttons.  Most commands that use the "
"@file{*Help*} buffer should invoke this function before clearing the "
"buffer.  The @var{item} argument should have the form @code{(@var{function} "
". @var{args})}, where @var{function} is a function to call, with argument "
"list @var{args}, to regenerate the help buffer.  The @var{interactive-p} "
"argument is non-@code{nil} if the calling command was invoked interactively; "
"in that case, the stack of items for the @file{*Help*} buffer's @samp{Back} "
"buttons is cleared."
msgstr ""

#. type: Plain text
#: ../../../../../doc/lispref/help.texi:764
msgid ""
"@xref{describe-symbols example}, for an example of using @code{help-buffer}, "
"@code{with-help-window}, and @code{help-setup-xref}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:765
#, no-wrap
msgid "make-help-screen fname help-line help-text help-map"
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:768
msgid ""
"This macro defines a help command named @var{fname} that acts like a prefix "
"key that shows a list of the subcommands it offers."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:773
msgid ""
"When invoked, @var{fname} displays @var{help-text} in a window, then reads "
"and executes a key sequence according to @var{help-map}.  The string "
"@var{help-text} should describe the bindings available in @var{help-map}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:780
msgid ""
"The command @var{fname} is defined to handle a few events itself, by "
"scrolling the display of @var{help-text}.  When @var{fname} reads one of "
"those special events, it does the scrolling and then reads another event.  "
"When it reads an event that is not one of those few, and which has a binding "
"in @var{help-map}, it executes that key's binding and then returns."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:785
msgid ""
"The argument @var{help-line} should be a single-line summary of the "
"alternatives in @var{help-map}.  In the current version of Emacs, this "
"argument is used only if you set the option @code{three-step-help} to "
"@code{t}."
msgstr ""

#. type: defmac
#: ../../../../../doc/lispref/help.texi:788
msgid ""
"This macro is used in the command @code{help-for-help} which is the binding "
"of @kbd{C-h C-h}."
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:790
#, no-wrap
msgid "three-step-help"
msgstr ""

#. type: defopt
#: ../../../../../doc/lispref/help.texi:795
msgid ""
"If this variable is non-@code{nil}, commands defined with "
"@code{make-help-screen} display their @var{help-line} strings in the echo "
"area at first, and display the longer @var{help-text} strings only if the "
"user types the help character again."
msgstr ""

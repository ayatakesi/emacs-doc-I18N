# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-06 05:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: titlefont{#1}
#: ../../../../../doc/misc/eshell.texi:4 ../../../../../doc/misc/eshell.texi:40
#, no-wrap
msgid "Eshell: The Emacs Shell"
msgstr ""

#. type: include
#: ../../../../../doc/misc/eshell.texi:5
#, no-wrap
msgid "docstyle.texi"
msgstr ""

#. type: copying
#: ../../../../../doc/misc/eshell.texi:12
msgid "This manual is for Eshell, the Emacs shell."
msgstr ""

#. type: copying
#: ../../../../../doc/misc/eshell.texi:14
msgid "Copyright @copyright{} 1999--2021 Free Software Foundation, Inc."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/eshell.texi:22
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.3 or any later "
"version published by the Free Software Foundation; with no Invariant "
"Sections, with the Front-Cover Texts being ``A GNU Manual'', and with the "
"Back-Cover Texts as in (a) below.  A copy of the license is included in the "
"section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/eshell.texi:25
msgid ""
"(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify "
"this GNU manual.''"
msgstr ""

#. type: dircategory
#: ../../../../../doc/misc/eshell.texi:28
#, no-wrap
msgid "Emacs misc features"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:31
msgid "Eshell: (eshell)"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:31
msgid "A command shell implemented in Emacs Lisp."
msgstr ""

#. type: titlefont{#1}
#: ../../../../../doc/misc/eshell.texi:36
#, no-wrap
msgid "User's Guide"
msgstr ""

#. type: titlefont{#1}
#: ../../../../../doc/misc/eshell.texi:38
#, no-wrap
msgid "to"
msgstr ""

#. type: center
#: ../../../../../doc/misc/eshell.texi:43
#, no-wrap
msgid "release 2.4"
msgstr ""

#. type: center
#: ../../../../../doc/misc/eshell.texi:47
#, no-wrap
msgid "John Wiegley & Aidan Gauland"
msgstr ""

#. type: node
#: ../../../../../doc/misc/eshell.texi:62
#, no-wrap
msgid "Top"
msgstr ""

#. type: top
#: ../../../../../doc/misc/eshell.texi:63
#, no-wrap
msgid "Eshell"
msgstr ""

#. type: ifnottex
#: ../../../../../doc/misc/eshell.texi:72
msgid ""
"Eshell is a shell-like command interpreter implemented in Emacs Lisp.  It "
"invokes no external processes except for those requested by the user.  It is "
"intended to be an alternative to the IELM (@pxref{Lisp Interaction, Emacs "
"Lisp Interaction, , emacs, The Emacs Editor})  REPL for Emacs @emph{and} "
"with an interface similar to command shells such as @command{bash}, "
"@command{zsh}, @command{rc}, or @command{4dos}."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:87 ../../../../../doc/misc/eshell.texi:92 ../../../../../doc/misc/eshell.texi:93
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "A brief introduction to the Emacs Shell."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Commands::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Expansion::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Input/Output::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Extension modules::"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:87 ../../../../../doc/misc/eshell.texi:759 ../../../../../doc/misc/eshell.texi:760
#, no-wrap
msgid "Bugs and ideas"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Known problems, and future ideas."
msgstr ""

#. type: appendix
#: ../../../../../doc/misc/eshell.texi:87 ../../../../../doc/misc/eshell.texi:1220 ../../../../../doc/misc/eshell.texi:1221
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "The license for this documentation."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Concept Index::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:87
msgid "Function and Variable Index::"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/eshell.texi:87 ../../../../../doc/misc/eshell.texi:1234 ../../../../../doc/misc/eshell.texi:1235
#, no-wrap
msgid "Command Index"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:94
#, no-wrap
msgid "What is Eshell?"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:95
#, no-wrap
msgid "what is Eshell?"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:96
#, no-wrap
msgid "Eshell, what it is"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:102
msgid ""
"Eshell is a @dfn{command shell} written in Emacs Lisp.  Everything it does, "
"it uses Emacs's facilities to do.  This means that Eshell is as portable as "
"Emacs itself.  It also means that cooperation with Lisp code is natural and "
"seamless."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:109
msgid ""
"What is a command shell? To properly understand the role of a shell, it's "
"necessary to visualize what a computer does for you.  Basically, a computer "
"is a tool; in order to use that tool, you must tell it what to do---or give "
"it ``commands.'' These commands take many forms, such as clicking with a "
"mouse on certain parts of the screen.  But that is only one form of command "
"input."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:117
msgid ""
"By far the most versatile way to express what you want the computer to do is "
"by using an abbreviated language called @dfn{script}.  In script, instead of "
"telling the computer, ``list my files, please'', one writes a standard "
"abbreviated command word---@samp{ls}.  Typing @samp{ls} in a command shell "
"is a script way of telling the computer to list your files.@footnote{This is "
"comparable to viewing the contents of a folder using a graphical display.}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:126
msgid ""
"The real flexibility of this approach is apparent only when you realize that "
"there are many, many different ways to list files.  Perhaps you want them "
"sorted by name, sorted by date, in reverse order, or grouped by type.  Most "
"graphical browsers have simple ways to express this.  But what about showing "
"only a few files, or only files that meet a certain criteria? In very "
"complex and specific situations, the request becomes too difficult to "
"express using a mouse or pointing device.  It is just these kinds of "
"requests that are easily solved using a command shell."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:133
msgid ""
"For example, what if you want to list every Word file on your hard drive, "
"larger than 100 kilobytes in size, and which hasn't been looked at in over "
"six months? That is a good candidate list for deletion, when you go to clean "
"up your hard drive.  But have you ever tried asking your computer for such a "
"list? There is no way to do it! At least, not without using a command shell."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:144
msgid ""
"The role of a command shell is to give you more control over what your "
"computer does for you.  Not everyone needs this amount of control, and it "
"does come at a cost: Learning the necessary script commands to express what "
"you want done.  A complicated query, such as the example above, takes time "
"to learn.  But if you find yourself using your computer frequently enough, "
"it is more than worthwhile in the long run.  Any tool you use often deserves "
"the time spent learning to master it.  @footnote{For the understandably "
"curious, here is what that command looks like: But don't let it fool you; "
"once you know what's going on, it's easier than it looks: @code{ls -lt "
"**/*.doc(Lk+50aM+5)}.}"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:147 ../../../../../doc/misc/eshell.texi:149 ../../../../../doc/misc/eshell.texi:150
#, no-wrap
msgid "Contributors to Eshell"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:147
msgid "People who have helped out!"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:151
#, no-wrap
msgid "contributors"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:152
#, no-wrap
msgid "authors"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:157
msgid ""
"Contributions to Eshell are welcome.  I have limited time to work on this "
"project, but I will gladly add any code you contribute to me to this "
"package."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:159
msgid "The following persons have made contributions to Eshell."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/eshell.texi:165
msgid ""
"Eli Zaretskii made it possible for Eshell to run without requiring "
"asynchronous subprocess support.  This is important for MS-DOS, which does "
"not have such support."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/eshell.texi:168
msgid "Miles Bader contributed many fixes during the port to Emacs 21."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/eshell.texi:172
msgid ""
"Stefan Monnier fixed the things which bothered him, which of course made "
"things better for all."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/eshell.texi:176
msgid ""
"Gerd Moellmann also helped to contribute bug fixes during the initial "
"integration with Emacs 21."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/eshell.texi:180
msgid ""
"Alex Schroeder contributed code for interactively querying the user before "
"overwriting files."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:185
msgid ""
"Apart from these, a lot of people have sent suggestions, ideas, requests, "
"bug reports and encouragement.  Thanks a lot! Without you there would be no "
"new releases of Eshell."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:186 ../../../../../doc/misc/eshell.texi:187
#, no-wrap
msgid "Commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:192
msgid ""
"In a command shell, everything is done by invoking commands.  This chapter "
"covers command invocations in Eshell, including the command history and "
"invoking commands in a script file."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Invocation::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Arguments::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Built-ins::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Variables::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Aliases::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "History::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "Completion::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:203
msgid "for loop::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:203 ../../../../../doc/misc/eshell.texi:538 ../../../../../doc/misc/eshell.texi:539
#, no-wrap
msgid "Scripts"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:205 ../../../../../doc/misc/eshell.texi:206
#, no-wrap
msgid "Invocation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:211
msgid ""
"Unlike regular system shells, Eshell never invokes kernel functions "
"directly, such as @code{exec(3)}.  Instead, it uses the Lisp functions "
"available in the Emacs Lisp library.  It does this by transforming the input "
"line into a callable Lisp form.@footnote{To see the Lisp form that will be "
"invoked, type: @samp{eshell-parse-command \"echo hello\"}}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:217
msgid ""
"The command can be either an Elisp function or an external command.  Eshell "
"looks first for an alias (@pxref{Aliases}) with the same name as the "
"command, then a built-in (@pxref{Built-ins}) or a function with the same "
"name; if there is no match, it then tries to execute it as an external "
"command."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:225
msgid ""
"The semicolon (@code{;}) can be used to separate multiple command "
"invocations on a single line.  A command invocation followed by an ampersand "
"(@code{&}) will be run in the background.  Eshell has no job control, so you "
"can not suspend or background the current process, or bring a background "
"process into the foreground.  That said, background processes invoked from "
"Eshell can be controlled the same way as any other background process in "
"Emacs."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:226 ../../../../../doc/misc/eshell.texi:227
#, no-wrap
msgid "Arguments"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:237
msgid ""
"Command arguments are passed to the functions as either strings or numbers, "
"depending on what the parser thinks they look like.  If you need to use a "
"function that takes some other data type, you will need to call it in an "
"Elisp expression (which can also be used with @ref{Expansion, expansions}).  "
"As with other shells, you can escape special characters and spaces with the "
"backslash (@code{\\}) and apostrophes (@code{''}) and double quotes "
"(@code{\"\"}).  This is needed especially for file names with special "
"characters like pipe (@code{|}), which could be part of remote file names."
msgstr ""

#. type: node
#: ../../../../../doc/misc/eshell.texi:238
#, no-wrap
msgid "Built-ins"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:239
#, no-wrap
msgid "Built-in commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:244
msgid ""
"Several commands are built-in in Eshell.  In order to call the external "
"variant of a built-in command @code{foo}, you could call @code{*foo}.  "
"Usually, this should not be necessary.  You can check what will be applied "
"by the @code{which} command:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:250
#, no-wrap
msgid ""
"~ $ which ls\n"
"eshell/ls is a compiled Lisp function in `em-ls.el'\n"
"~ $ which *ls\n"
"/bin/ls\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:254
msgid ""
"If you want to discard a given built-in command, you could declare an alias "
"(@pxref{Aliases}).  Example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:261
#, no-wrap
msgid ""
"~ $ which sudo\n"
"eshell/sudo is a compiled Lisp function in `em-tramp.el'.\n"
"~ $ alias sudo '*sudo $*'\n"
"~ $ which sudo\n"
"sudo is an alias, defined as \"*sudo $*\"\n"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:263
#, no-wrap
msgid "eshell-prefer-lisp-functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:266
msgid ""
"If you would prefer to use the built-in commands instead of the external "
"commands, set @code{eshell-prefer-lisp-functions} to @code{t}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:270
msgid ""
"Some of the built-in commands have different behavior from their external "
"counterparts, and some have no external counterpart.  Most of these will "
"print a usage message when given the @code{--help} option."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:273 ../../../../../doc/misc/eshell.texi:274
#, no-wrap
msgid "addpath"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:277
msgid ""
"Adds a given path or set of paths to the PATH environment variable, or, with "
"no arguments, prints the current paths in this variable."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:278 ../../../../../doc/misc/eshell.texi:279
#, no-wrap
msgid "alias"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:281
msgid "Define an alias (@pxref{Aliases}).  This adds it to the aliases file."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:282 ../../../../../doc/misc/eshell.texi:283
#, no-wrap
msgid "clear"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:287
msgid ""
"Scrolls the contents of the eshell window out of sight, leaving a blank "
"window.  If provided with an optional non-nil argument, the scrollback "
"contents are cleared instead."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:288 ../../../../../doc/misc/eshell.texi:289
#, no-wrap
msgid "date"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:292
msgid ""
"Similar to, but slightly different from, the GNU Coreutils @command{date} "
"command."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:293 ../../../../../doc/misc/eshell.texi:294
#, no-wrap
msgid "define"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:297
msgid ""
"Define a varalias.  @xref{Variable Aliases, , , elisp, The Emacs Lisp "
"Reference Manual}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:298 ../../../../../doc/misc/eshell.texi:299
#, no-wrap
msgid "diff"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:302
msgid ""
"Use Emacs's internal @code{diff} (not to be confused with @code{ediff}).  "
"@xref{Comparing Files, , , emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:303 ../../../../../doc/misc/eshell.texi:304
#, no-wrap
msgid "grep"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:305 ../../../../../doc/misc/eshell.texi:306
#, no-wrap
msgid "agrep"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:307 ../../../../../doc/misc/eshell.texi:308
#, no-wrap
msgid "egrep"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:309 ../../../../../doc/misc/eshell.texi:310
#, no-wrap
msgid "fgrep"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:311 ../../../../../doc/misc/eshell.texi:312
#, no-wrap
msgid "glimpse"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:315
msgid ""
"The @command{grep} commands are compatible with GNU @command{grep}, but use "
"Emacs's internal @code{grep} instead."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:316 ../../../../../doc/misc/eshell.texi:317
#, no-wrap
msgid "info"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:320
msgid ""
"Same as the external @command{info} command, but uses Emacs's internal Info "
"reader."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:321 ../../../../../doc/misc/eshell.texi:322
#, no-wrap
msgid "jobs"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:325
msgid ""
"List subprocesses of the Emacs process, if any, using the function "
"@code{list-processes}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:326 ../../../../../doc/misc/eshell.texi:327
#, no-wrap
msgid "kill"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:330
msgid ""
"Kill processes.  Takes a PID or a process object and an optional signal "
"specifier which can either be a number or a signal name."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:331 ../../../../../doc/misc/eshell.texi:332
#, no-wrap
msgid "listify"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:336
msgid ""
"Eshell version of @code{list}.  Allows you to create a list using Eshell "
"syntax, rather than Elisp syntax.  For example, @samp{listify foo bar} and "
"@code{(\"foo\" \"bar\")} both evaluate to @code{(\"foo\" \"bar\")}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:337 ../../../../../doc/misc/eshell.texi:338
#, no-wrap
msgid "locate"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:342
msgid ""
"Alias to Emacs's @code{locate} function, which simply runs the external "
"@command{locate} command and parses the results.  @xref{Dired and Find, , , "
"emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:343 ../../../../../doc/misc/eshell.texi:344
#, no-wrap
msgid "make"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:348
msgid ""
"Run @command{make} through @code{compile} when run asynchronously (e.g., "
"@samp{make &}).  @xref{Compilation, , , emacs, The GNU Emacs Manual}.  "
"Otherwise call the external @command{make} command."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:349 ../../../../../doc/misc/eshell.texi:350
#, no-wrap
msgid "occur"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:353
msgid ""
"Alias to Emacs's @code{occur}.  @xref{Other Repeating Search, , , emacs, The "
"GNU Emacs Manual}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:354 ../../../../../doc/misc/eshell.texi:355
#, no-wrap
msgid "printnl"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:357
msgid "Print the arguments separated by newlines."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:358 ../../../../../doc/misc/eshell.texi:359
#, no-wrap
msgid "cd"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:363
msgid ""
"This command changes the current working directory.  Usually, it is invoked "
"as @samp{cd foo} where @file{foo} is the new working directory.  But "
"@command{cd} knows about a few special arguments:"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:365
msgid "When it receives no argument at all, it changes to the home directory."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:368
msgid ""
"Giving the command @samp{cd -} changes back to the previous working "
"directory (this is the same as @samp{cd $-})."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:371
msgid "The command @samp{cd =} shows the directory stack.  Each line is numbered."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:375
msgid ""
"With @samp{cd =foo}, Eshell searches the directory stack for a directory "
"matching the regular expression @samp{foo} and changes to that directory."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:377
msgid "With @samp{cd -42}, you can access the directory stack by number."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:378 ../../../../../doc/misc/eshell.texi:379
#, no-wrap
msgid "su"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:380 ../../../../../doc/misc/eshell.texi:381
#, no-wrap
msgid "sudo"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:385
msgid ""
"Uses TRAMP's @command{su} or @command{sudo} method @pxref{Inline methods, , "
", tramp} to run a command via @command{su} or @command{sudo}.  These "
"commands are in the eshell-tramp module, which is disabled by default."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/eshell.texi:388
#, no-wrap
msgid "Built-in variables"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:390
msgid "Eshell knows a few built-in variables:"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:393 ../../../../../doc/misc/eshell.texi:394
#, no-wrap
msgid "$+"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:396
msgid "This variable always contains the current working directory."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:397 ../../../../../doc/misc/eshell.texi:398
#, no-wrap
msgid "$-"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:401
msgid ""
"This variable always contains the previous working directory (the current "
"working directory from before the last @code{cd} command)."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:402 ../../../../../doc/misc/eshell.texi:403
#, no-wrap
msgid "$_"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:405
msgid "It refers to the last argument of the last command."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:406 ../../../../../doc/misc/eshell.texi:407
#, no-wrap
msgid "$$"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:410
msgid ""
"This is the result of the last command.  In case of an external command, it "
"is @code{t} or @code{nil}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:411 ../../../../../doc/misc/eshell.texi:412
#, no-wrap
msgid "$?"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:415
msgid ""
"This variable contains the exit code of the last command (0 or 1 for Lisp "
"functions, based on successful completion)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:420
msgid ""
"@xref{Aliases}, for the built-in variables @samp{$*}, @samp{$1}, @samp{$2}, "
"@dots{}, in alias definitions."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:421 ../../../../../doc/misc/eshell.texi:422
#, no-wrap
msgid "Variables"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:427
msgid ""
"Since Eshell is just an Emacs REPL@footnote{Read-Eval-Print Loop}, it does "
"not have its own scope, and simply stores variables the same you would in an "
"Elisp program.  Eshell provides a command version of @code{setq} for "
"convenience."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:428 ../../../../../doc/misc/eshell.texi:429
#, no-wrap
msgid "Aliases"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:431
#, no-wrap
msgid "$*"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:440
msgid ""
"Aliases are commands that expand to a longer input line.  For example, "
"@command{ll} is a common alias for @code{ls -l}, and would be defined with "
"the command invocation @kbd{alias ll 'ls -l $*'}; with this defined, running "
"@samp{ll foo} in Eshell will actually run @samp{ls -l foo}.  Aliases defined "
"(or deleted) by the @command{alias} command are automatically written to the "
"file named by @code{eshell-aliases-file}, which you can also edit directly "
"(although you will have to manually reload it)."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:441
#, no-wrap
msgid "$1, $2, @dots{}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:448
msgid ""
"Note that unlike aliases in Bash, arguments must be handled explicitly.  "
"Typically the alias definition would end in @samp{$*} to pass all arguments "
"along.  More selective use of arguments via @samp{$1}, @samp{$2}, etc., is "
"also possible.  For example, @kbd{alias mcd 'mkdir $1 && cd $1'} would cause "
"@kbd{mcd foo} to create and switch to a directory called @samp{foo}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:449 ../../../../../doc/misc/eshell.texi:450
#, no-wrap
msgid "History"
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:451
#, no-wrap
msgid "history"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:457
msgid ""
"The @samp{history} command shows all commands kept in the history ring as "
"numbered list.  If the history ring contains @code{eshell-history-size} "
"commands, those numbers change after every command invocation, therefore the "
"@samp{history} command shall be applied before using the expansion mechanism "
"with history numbers."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:461
msgid ""
"The n-th entry of the history ring can be applied with the @samp{!n} "
"command.  If @code{n} is negative, the entry is counted from the end of the "
"history ring."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:462
#, no-wrap
msgid "event designators"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/eshell.texi:463
#, no-wrap
msgid "eshell-expand-history-references"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:470
msgid ""
"When history event designators are enabled (by adding "
"@code{eshell-expand-history-references} to "
"@code{eshell-expand-input-functions}), @samp{!foo} expands to the last "
"command beginning with @code{foo}, and @samp{!?foo} to the last command "
"containing @code{foo}.  The n-th argument of the last command beginning with "
"@code{foo} is accessible by @code{!foo:n}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:476
msgid ""
"The history ring is loaded from a file at the start of every session, and "
"written back to the file at the end of every session.  The file path is "
"specified in @code{eshell-history-file-name}.  Unlike other shells, such as "
"Bash, Eshell can not be configured to keep a history ring of a different "
"size than that of the history file."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:480
msgid ""
"Since the default buffer navigation and searching key-bindings are still "
"present in the Eshell buffer, the commands for history navigation and "
"searching are bound to different keys:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:482
#, no-wrap
msgid "M-r"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/eshell.texi:483
#, no-wrap
msgid "M-s"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:485
msgid "History I-search."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:486
#, no-wrap
msgid "M-p"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/eshell.texi:487
#, no-wrap
msgid "M-n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:491
msgid ""
"Previous and next history line.  If there is anything on the input line when "
"you run these commands, they will instead jump to the previous or next line "
"that begins with that string."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:493 ../../../../../doc/misc/eshell.texi:494
#, no-wrap
msgid "Completion"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:502
msgid ""
"Eshell uses the pcomplete package for programmable completion, similar to "
"that of other command shells.  Argument completion differs depending on the "
"preceding command: for example, possible completions for @command{rmdir} are "
"only directories, while @command{rm} completions can be directories "
"@emph{and} files.  Eshell provides predefined completions for the built-in "
"functions and some common external commands, and you can define your own for "
"any command."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:508
msgid ""
"Eshell completion also works for lisp forms and glob patterns. If the point "
"is on a lisp form, then @key{TAB} will behave similarly to completion in "
"@code{elisp-mode} and @code{lisp-interaction-mode}.  For glob patterns, the "
"pattern will be removed from the input line, and replaced by the completion."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:511
msgid ""
"If you want to see the entire list of possible completions (e.g. when it's "
"below the @code{completion-cycle-threshold}), press @kbd{M-?}."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/eshell.texi:512
#, no-wrap
msgid "pcomplete"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:517
msgid ""
"Pcomplete, short for programmable completion, is the completion library "
"originally written for Eshell, but usable for command "
"completion@footnote{Command completion as opposed to code completion, which "
"is a beyond the scope of pcomplete.} in other modes."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:523
msgid ""
"Completions are defined as functions (with @code{defun}) named "
"@code{pcomplete/COMMAND}, where @code{COMMAND} is the name of the command "
"for which this function provides completions; you can also name the function "
"@code{pcomplete/MAJOR-MODE/COMMAND} to define completions for a specific "
"major mode."
msgstr ""

#. type: node
#: ../../../../../doc/misc/eshell.texi:524
#, no-wrap
msgid "for loop"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:525
#, no-wrap
msgid "@code{for} loop"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:529
msgid ""
"Because Eshell commands can not (easily) be combined with lisp forms, Eshell "
"provides a command-oriented @command{for}-loop for convenience.  The syntax "
"is as follows:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:532
#, no-wrap
msgid "@code{for VAR in TOKENS @{ command invocation(s) @}}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:537
msgid ""
"where @samp{TOKENS} is a space-separated sequence of values of @var{VAR} for "
"each iteration.  This can even be the output of a command if @samp{TOKENS} "
"is replaced with @samp{@{ command invocation @}}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:540
#, no-wrap
msgid "source"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:548
msgid ""
"@fnindex eshell-source-file You can run Eshell scripts much like scripts for "
"other shells; the main difference is that since Eshell is not a system "
"command, you have to run it from within Emacs.  An Eshell script is simply a "
"file containing a sequence of commands, as with almost any other shell "
"script.  Scripts are invoked from Eshell with @command{source}, or from "
"anywhere in Emacs with @code{eshell-source-file}."
msgstr ""

#. type: cmindex
#: ../../../../../doc/misc/eshell.texi:549
#, no-wrap
msgid "."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:552
msgid ""
"If you wish to load a script into your @emph{current} environment, rather "
"than in a subshell, use the @code{.} command."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:553 ../../../../../doc/misc/eshell.texi:554
#, no-wrap
msgid "Expansion"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:565
msgid ""
"Expansion in a command shell is somewhat like macro expansion in macro "
"parsers (such as @command{cpp} and @command{m4}), but in a command shell, "
"they are less often used for constants, and usually for using variables and "
"string manipulation.@footnote{Eshell has no string-manipulation expansions "
"because the Elisp library already provides many functions for this.} For "
"example, @code{$var} on a line expands to the value of the variable "
"@code{var} when the line is executed.  Expansions are usually passed as "
"arguments, but may also be used as commands.@footnote{E.g., entering just "
"@samp{$var} at the prompt is equivalent to entering the value of @code{var} "
"at the prompt.}"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:569
msgid "Dollars Expansion::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:569 ../../../../../doc/misc/eshell.texi:627 ../../../../../doc/misc/eshell.texi:628
#, no-wrap
msgid "Globbing"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:571 ../../../../../doc/misc/eshell.texi:572
#, no-wrap
msgid "Dollars Expansion"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:576
msgid ""
"Eshell has different @code{$} expansion syntax from other shells.  There are "
"some similarities, but don't let these lull you into a false sense of "
"familiarity."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:579
#, no-wrap
msgid "$var"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:582
msgid ""
"Expands to the value bound to @code{var}.  This is the main way to use "
"variables in command invocations."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:583
#, no-wrap
msgid "$#var"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:587
msgid ""
"Expands to the length of the value bound to @code{var}.  Raises an error if "
"the value is not a sequence (@pxref{Sequences Arrays Vectors, Sequences, , "
"elisp, The Emacs Lisp Reference Manual})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:588
#, no-wrap
msgid "$(lisp)"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:592
msgid ""
"Expands to the result of evaluating the S-expression @code{(lisp)}.  On its "
"own, this is identical to just @code{(lisp)}, but with the @code{$}, it can "
"be used in a string, such as @samp{/some/path/$(lisp).txt}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:593
#, no-wrap
msgid "$@{command@}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:596
msgid ""
"Returns the output of @command{command}, which can be any valid Eshell "
"command invocation, and may even contain expansions."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:597
#, no-wrap
msgid "$var[i]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:601
msgid ""
"Expands to the @code{i}th element of the value bound to @code{var}.  If the "
"value is a string, it will be split at whitespace to make it a list.  Again, "
"raises an error if the value is not a sequence."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:602
#, no-wrap
msgid "$var[: i]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:604
msgid "As above, but now splitting occurs at the colon character."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:605
#, no-wrap
msgid "$var[: i j]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:610
msgid ""
"As above, but instead of returning just a string, it now returns a list of "
"two strings.  If the result is being interpolated into a larger string, this "
"list will be flattened into one big string, with each element separated by a "
"space."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:611
#, no-wrap
msgid "$var[\"\\\\\\\\\" i]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:615
msgid ""
"Separate on backslash characters.  Actually, the first argument -- if it "
"doesn't have the form of a number, or a plain variable name -- can be any "
"regular expression.  So to split on numbers, use @samp{$var[\"[0-9]+\" 10 "
"20]}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:616
#, no-wrap
msgid "$var[hello]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:620
msgid ""
"Calls @code{assoc} on @code{var} with @code{\"hello\"}, expecting it to be "
"an alist (@pxref{Association List Type, Association Lists, , elisp, The "
"Emacs Lisp Reference Manual})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:621
#, no-wrap
msgid "$#var[hello]"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:624
msgid ""
"Returns the length of the cdr of the element of @code{var} who car is equal "
"to @code{\"hello\"}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:638
msgid ""
"Eshell's globbing syntax is very similar to that of Zsh.  Users coming from "
"Bash can still use Bash-style globbing, as there are no incompatibilities.  "
"Most globbing is pattern-based expansion, but there is also predicate-based "
"expansion.  @xref{Filename Generation, , , zsh, The Z Shell Manual}, for "
"full syntax.  To customize the syntax and behavior of globbing in Eshell see "
"the Customize@footnote{@xref{Easy Customization, , , emacs, The GNU Emacs "
"Manual}.} groups ``eshell-glob'' and ``eshell-pred''."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:639 ../../../../../doc/misc/eshell.texi:640
#, no-wrap
msgid "Input/Output"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:643
msgid ""
"Since Eshell does not communicate with a terminal like most command shells, "
"IO is a little different."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:644
#, no-wrap
msgid "Visual Commands"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:650
msgid ""
"If you try to run programs from within Eshell that are not line-oriented, "
"such as programs that use ncurses, you will just get garbage output, since "
"the Eshell buffer is not a terminal emulator.  Eshell solves this problem by "
"running such programs in Emacs's terminal emulator."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:659
msgid ""
"Programs that need a terminal to display output properly are referred to in "
"this manual as ``visual commands'', because they are not simply "
"line-oriented.  You must tell Eshell which commands are visual, by adding "
"them to @code{eshell-visual-commands}; for commands that are visual for only "
"certain @emph{sub}-commands -- e.g., @samp{git log} but not @samp{git "
"status} -- use @code{eshell-visual-subcommands}; and for commands that are "
"visual only when passed certain options, use @code{eshell-visual-options}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:669
msgid ""
"Caution: Some tools such as Git use the pager @samp{less} by default to "
"paginate their output but call it with its @samp{-F} option.  This option "
"causes @samp{less} to echo the output instead of paginating it if the output "
"is less than one page long.  This causes undesirable behavior if, e.g., "
"@samp{git diff}, is defined as a visual subcommand.  It'll work if the "
"output is big enough and fail if it is less than one page long.  If that "
"occurs to you, search for configuration options for calling @samp{less} "
"without the @samp{-F} option.  For Git, you can do that using @samp{git "
"config --global core.pager 'less -+F'}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/eshell.texi:670
#, no-wrap
msgid "eshell-destroy-buffer-when-process-dies"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:675
msgid ""
"If you want the buffers created by visual programs killed when the program "
"exits, customize the variable @code{eshell-destroy-buffer-when-process-dies} "
"to a non-@code{nil} value; the default is @code{nil}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:676
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:683
msgid ""
"Redirection is mostly the same in Eshell as it is in other command shells.  "
"The output redirection operators @code{>} and @code{>>} as well as pipes are "
"supported, but there is not yet any support for input redirection.  Output "
"can also be redirected to buffers, using the @code{>>>} redirection "
"operator, and Elisp functions, using virtual devices."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:690
msgid ""
"The buffer redirection operator, @code{>>>}, expects a buffer object on the "
"right-hand side, into which it inserts the output of the left-hand side.  "
"e.g., @samp{echo hello >>> #<buffer *scratch*>} inserts the string "
"@code{\"hello\"} into the @file{*scratch*} buffer.  The convenience "
"shorthand variant @samp{#<@var{buffer-name}>}, as in @samp{#<*scratch*>}, is "
"also accepted."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:695
msgid ""
"@code{eshell-virtual-targets} is a list of mappings of virtual device names "
"to functions.  Eshell comes with two virtual devices: @file{/dev/kill}, "
"which sends the text to the kill ring, and @file{/dev/clip}, which sends "
"text to the clipboard."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:705
msgid ""
"You can, of course, define your own virtual targets.  They are defined by "
"adding a list of the form @samp{(\"/dev/name\" @var{function} @var{mode})} "
"to @code{eshell-virtual-targets}.  The first element is the device name; "
"@var{function} may be either a lambda or a function name.  If @var{mode} is "
"@code{nil}, then the function is the output function; if it is "
"non-@code{nil}, then the function is passed the redirection mode as a "
"symbol--@code{overwrite} for @code{>}, @code{append} for @code{>>}, or "
"@code{insert} for @code{>>>}--and the function is expected to return the "
"output function."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:708
msgid ""
"The output function is called once on each line of output until @code{nil} "
"is passed, indicating end of output."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/eshell.texi:709 ../../../../../doc/misc/eshell.texi:710
#, no-wrap
msgid "Extension modules"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:722
msgid ""
"Eshell provides a facility for defining extension modules so that they can "
"be disabled and enabled without having to unload and reload them, and to "
"provide a common parent Customize group for the modules.@footnote{ERC "
"provides a similar module facility.} An Eshell module is defined the same as "
"any other library but one requirement: the module must define a "
"Customize@footnote{@xref{Customization, , , elisp, The Emacs Lisp Reference "
"Manual}.} group using @code{eshell-defgroup} (in place of @code{defgroup}) "
"with @code{eshell-module} as the parent group.@footnote{If the module has no "
"user-customizable options, then there is no need to define it as an Eshell "
"module.} You also need to load the following as shown:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:728
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (require 'cl-lib)\n"
"  (require 'esh-mode)\n"
"  (require 'eshell))\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:730
#, no-wrap
msgid "(require 'esh-util)\n"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:739
msgid "Writing a module::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:739
msgid "Module testing::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:739
msgid "Directory handling::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:739
msgid "Key rebinding::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/eshell.texi:739
msgid "Smart scrolling::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:739 ../../../../../doc/misc/eshell.texi:756 ../../../../../doc/misc/eshell.texi:757
#, no-wrap
msgid "Terminal emulation"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:741 ../../../../../doc/misc/eshell.texi:742
#, no-wrap
msgid "Writing a module"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:744 ../../../../../doc/misc/eshell.texi:745
#, no-wrap
msgid "Module testing"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:747 ../../../../../doc/misc/eshell.texi:748
#, no-wrap
msgid "Directory handling"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:750 ../../../../../doc/misc/eshell.texi:751
#, no-wrap
msgid "Key rebinding"
msgstr ""

#. type: section
#: ../../../../../doc/misc/eshell.texi:753 ../../../../../doc/misc/eshell.texi:754
#, no-wrap
msgid "Smart scrolling"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:761
#, no-wrap
msgid "reporting bugs and ideas"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:762
#, no-wrap
msgid "bugs, how to report them"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:763
#, no-wrap
msgid "author, how to reach"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:764
#, no-wrap
msgid "email to the author"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:765
#, no-wrap
msgid "FAQ"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:766
#, no-wrap
msgid "problems, list of common"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:767
#, no-wrap
msgid "known bugs"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/eshell.texi:768
#, no-wrap
msgid "bugs, known"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:774
msgid ""
"If you find a bug or misfeature, don't hesitate to report it, by using "
"@kbd{M-x report-emacs-bug}.  The same applies to feature requests.  It is "
"best to discuss one thing at a time.  If you find several unrelated bugs, "
"please report them separately."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/eshell.texi:783
msgid ""
"Below is a list of some known problems with Eshell version 2.4.2, which is "
"the version included with Emacs 22."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:785
#, no-wrap
msgid "Documentation incomplete"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:787
#, no-wrap
msgid "Differentiate between aliases and functions"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:790
msgid "Allow for a Bash-compatible syntax, such as:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:794
#, no-wrap
msgid ""
"alias arg=blah\n"
"function arg () @{ blah $* @}\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:796
#, no-wrap
msgid ""
"@samp{for i in 1 2 3 @{ grep -q a b && *echo has it @} | wc -l} outputs "
"result after prompt"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:803
msgid ""
"In fact, piping to a process from a looping construct doesn't work in "
"general.  If I change the call to @code{eshell-copy-handles} in "
"@code{eshell-rewrite-for-command} to use @code{eshell-protect}, it seems to "
"work, but the output occurs after the prompt is displayed.  The whole "
"structured command thing is too complicated at present."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:804
#, no-wrap
msgid "Pcomplete sometimes gets stuck"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:808
msgid ""
"You press @key{TAB}, but no completions appear, even though the directory "
"has matching files.  This behavior is rare."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:809
#, no-wrap
msgid "@samp{grep python $<rpm -qa>} doesn't work, but using @samp{*grep} does"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:814
msgid ""
"This happens because the @code{grep} Lisp function returns immediately, and "
"then the asynchronous @command{grep} process expects to examine the "
"temporary file, which has since been deleted."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:815
#, no-wrap
msgid "Problem with C-r repeating text"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:819
msgid ""
"If the text @emph{before point} reads \"./run\", and you type @kbd{C-r r u "
"n}, it will repeat the line for every character typed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:820
#, no-wrap
msgid "Backspace doesn't scroll back after continuing (in smart mode)"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:825
msgid ""
"Hitting space during a process invocation, such as @command{make}, will "
"cause it to track the bottom of the output; but backspace no longer scrolls "
"back."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:826
#, no-wrap
msgid "It's not possible to fully @code{unload-feature} Eshell"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:828
#, no-wrap
msgid "Menu support was removed, but never put back"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:830
#, no-wrap
msgid "Using C-p and C-n with rebind gets into a locked state"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:834
msgid "This happened a few times in Emacs 21, but has been irreproducible since."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:835
#, no-wrap
msgid "If an interactive process is currently running, @kbd{M-!} doesn't work"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:837
#, no-wrap
msgid "Use a timer instead of @code{sleep-for} when killing child processes"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:839
#, no-wrap
msgid "Piping to a Lisp function is not supported"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:844
msgid ""
"Make it so that the Lisp command on the right of the pipe is repeatedly "
"called with the input strings as arguments.  This will require changing "
"@code{eshell-do-pipelines} to handle non-process targets."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:845
#, no-wrap
msgid "Input redirection is not supported"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:848
msgid "See the above entry."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:849
#, no-wrap
msgid "Problem running @command{less} without arguments on Windows"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:852
msgid "The result in the Eshell buffer is:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:855
#, no-wrap
msgid "Spawning child process: invalid argument\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:859
msgid ""
"Also a new @command{less} buffer was created with nothing in it@dots{} "
"(presumably this holds the output of @command{less})."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:862
msgid ""
"If @command{less.exe} is invoked from the Eshell command line, the expected "
"output is written to the buffer."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:866
msgid ""
"Note that this happens on NT-Emacs 20.6.1 on Windows 2000. The term.el "
"package and the supplied shell both use the @command{cmdproxy} program for "
"running shells."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:867
#, no-wrap
msgid "Implement @samp{-r}, @samp{-n} and @samp{-s} switches for @command{cp}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:869
#, no-wrap
msgid "Make @kbd{M-5 M-x eshell} switch to ``*eshell<5>*'', creating if need be"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:871
#, no-wrap
msgid "@samp{mv @var{dir} @var{file}.tar} does not remove directories"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:875
msgid ""
"This is because the tar option --remove-files doesn't do so.  Should it be "
"Eshell's job?"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:876
#, no-wrap
msgid "Bind @code{standard-output} and @code{standard-error}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:880
msgid ""
"This would be so that if a Lisp function calls @code{print}, everything will "
"happen as it should (albeit slowly)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:881
#, no-wrap
msgid "When an extension module fails to load, @samp{cd /} gives a Lisp error"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:883
#, no-wrap
msgid "If a globbing pattern returns one match, should it be a list?"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:885
#, no-wrap
msgid "Make sure syntax table is correct in Eshell mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:888
msgid "So that @kbd{M-@key{DEL}} acts in a predictable manner, etc."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:889
#, no-wrap
msgid "Allow all Eshell buffers to share the same history and list-dir"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:891
#, no-wrap
msgid "There is a problem with script commands that output to @file{/dev/null}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:895
msgid ""
"If a script file, somewhere in the middle, uses @samp{> /dev/null}, output "
"from all subsequent commands is swallowed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:896
#, no-wrap
msgid "Split up parsing of text after @samp{$} in @file{esh-var.el}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:900
msgid ""
"Make it similar to the way that @file{esh-arg.el} is structured.  Then add "
"parsing of @samp{$[?\\n]}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:901
#, no-wrap
msgid "After pressing @kbd{M-@key{RET}}, redisplay before running the next command"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:903
#, no-wrap
msgid "Argument predicates and modifiers should work anywhere in a path"
msgstr ""

#. type: example
#: ../../../../../doc/misc/eshell.texi:908
#, no-wrap
msgid ""
"/usr/local/src/editors/vim $ vi **/CVS(/)/Root(.)  Invalid regexp:\n"
"\"Unmatched ( or \\\\(\"\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:912
msgid ""
"With @command{zsh}, the glob above expands to all files named @file{Root} in "
"directories named @file{CVS}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:913
#, no-wrap
msgid "Typing @samp{echo $@{locate locate@}/bin@key{TAB}} results in a Lisp error"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:921
msgid ""
"Perhaps it should interpolate all permutations, and make that the globbing "
"result, since otherwise hitting return here will result in ``(list of "
"filenames)/bin'', which is never valuable.  Thus, one could @command{cat} "
"only C backup files by using @samp{ls $@{identity *.c@}~}.  In that case, "
"having an alias command name @command{glob} for @command{identity} would be "
"useful."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:922
#, no-wrap
msgid ""
"Once symbolic mode is supported for @command{umask}, implement "
"@command{chmod} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:924
#, no-wrap
msgid "Create @code{eshell-expand-file-name}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:928
msgid ""
"This would use a data table to transform things such as @samp{~+}, "
"@samp{...}, etc."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:929
#, no-wrap
msgid "Abstract @file{em-smart.el} into @file{smart-scroll.el}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:934
msgid ""
"It only really needs: to be hooked onto the output filter and the "
"pre-command hook, and to have the input-end and input-start markers.  And to "
"know whether the last output group was ``successful.''"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:935
#, no-wrap
msgid "Allow for fully persisting the state of Eshell"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:938
msgid "This would include: variables, history, buffer, input, dir stack, etc."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:939
#, no-wrap
msgid "Implement D as an argument predicate"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:943
msgid ""
"It means that files beginning with a dot should be included in the glob "
"match."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:944
#, no-wrap
msgid "A comma in a predicate list should mean OR"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:947
msgid "At the moment, this is not supported."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:948
#, no-wrap
msgid "Error if a glob doesn't expand due to a predicate"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:952
msgid ""
"An error should be generated only if @code{eshell-error-if-no-glob} is "
"non-@code{nil}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:953
#, no-wrap
msgid ""
"@samp{(+ @key{RET} @key{SPC} @key{TAB}} does not cause "
"@code{indent-according-to-mode} to occur"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:955
#, no-wrap
msgid "Create @code{eshell-auto-accumulate-list}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:960
msgid ""
"This is a list of commands for which, if the user presses @kbd{RET}, the "
"text is staged as the next Eshell command, rather than being sent to the "
"current interactive process."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:961
#, no-wrap
msgid "Display file and line number if an error occurs in a script"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:963
#, no-wrap
msgid "@command{wait} doesn't work with process ids at the moment"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:965
#, no-wrap
msgid "Enable the direct-to-process input code in @file{em-term.el}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:967
#, no-wrap
msgid "Problem with repeating @samp{echo $@{find /tmp@}}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:972
msgid ""
"With smart display active, if @kbd{RET} is held down, after a while it can't "
"keep up anymore and starts outputting blank lines.  It only happens if an "
"asynchronous process is involved@dots{}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:979
msgid ""
"I think the problem is that @code{eshell-send-input} is resetting the input "
"target location, so that if the asynchronous process is not done by the time "
"the next @kbd{RET} is received, the input processor thinks that the input is "
"meant for the process; which, when smart display is enabled, will be the "
"text of the last command line! That is a bug in itself."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:987
msgid ""
"In holding down @kbd{RET} while an asynchronous process is running, there "
"will be a point in between termination of the process, and the running of "
"@code{eshell-post-command-hook}, which would cause @code{eshell-send-input} "
"to call @code{eshell-copy-old-input}, and then process that text as a "
"command to be run after the process.  Perhaps there should be a way of "
"killing pending input between the death of the process, and the "
"@code{post-command-hook}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:988
#, no-wrap
msgid "Allow for a more aggressive smart display mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:992
msgid ""
"Perhaps toggled by a command, that makes each output block a smart display "
"block."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:993
#, no-wrap
msgid "Create more meta variables"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:996
#, no-wrap
msgid "$!"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:999
msgid ""
"The reason for the failure of the last disk command, or the text of the last "
"Lisp error."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1000
#, no-wrap
msgid "$="
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1003
msgid ""
"A special associate array, which can take references of the form "
"@samp{$=[REGEXP]}.  It indexes into the directory ring."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1005
#, no-wrap
msgid "Eshell scripts can't execute in the background"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1007
#, no-wrap
msgid ""
"Support zsh's ``Parameter Expansion'' syntax, i.e., "
"@samp{$@{@var{name}:-@var{val}@}}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1009
#, no-wrap
msgid "Write an @command{info} alias that can take arguments"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1012
msgid "So that the user can enter @samp{info chmod}, for example."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1013
#, no-wrap
msgid "Create a mode @code{eshell-browse}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1018
msgid ""
"It would treat the Eshell buffer as an outline.  Collapsing the outline "
"hides all of the output text.  Collapsing again would show only the first "
"command run in each directory"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1019
#, no-wrap
msgid "Allow other revisions of a file to be referenced using @samp{file@{rev@}}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1022
msgid "This would be expanded by @code{eshell-expand-file-name} (see above)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1023
#, no-wrap
msgid "Print ``You have new mail'' when the ``Mail'' icon is turned on"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1025
#, no-wrap
msgid "Implement @kbd{M-|} for Eshell"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1027
#, no-wrap
msgid "Implement input redirection"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1032
msgid ""
"If it's a Lisp function, input redirection implies @command{xargs} (in a "
"way@dots{}).  If input redirection is added, also update the "
"@code{file-name-quote-list}, and the delimiter list."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1033
#, no-wrap
msgid "Allow @samp{#<@var{word} @var{arg}>} as a generic syntax"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1037
msgid ""
"With the handling of @emph{word} specified by an "
"@code{eshell-special-alist}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1038
#, no-wrap
msgid "In @code{eshell-eval-using-options}, allow a @code{:complete} tag"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1042
msgid ""
"It would be used to provide completion rules for that command.  Then the "
"macro will automagically define the completion function."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1043
#, no-wrap
msgid "For @code{eshell-command-on-region}, apply redirections to the result"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1048
msgid ""
"So that @samp{+ > 'blah} would cause the result of the @code{+} (using input "
"from the current region) to be inserting into the symbol @code{blah}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1051
msgid ""
"If an external command is being invoked, the input is sent as standard "
"input, as if a @samp{cat <region> |} had been invoked."
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1057
msgid ""
"If a Lisp command, or an alias, is invoked, then if the line has no newline "
"characters, it is divided by whitespace and passed as arguments to the Lisp "
"function.  Otherwise, it is divided at the newline characters.  Thus, "
"invoking @code{+} on a series of numbers will add them; @code{min} would "
"display the smallest figure, etc."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1058
#, no-wrap
msgid "Write @code{eshell-script-mode} as a minor mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1062
msgid ""
"It would provide syntax, abbrev, highlighting and indenting support like "
"@code{emacs-lisp-mode} and @code{shell-mode}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1063
#, no-wrap
msgid "In the history mechanism, finish the Bash-style support"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1067
msgid ""
"This means @samp{!n}, @samp{!#}, @samp{!:%}, and @samp{!:1-} as separate "
"from @samp{!:1*}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1068
#, no-wrap
msgid "Support the -n command line option for @command{history}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1070
#, no-wrap
msgid "Implement @command{fc} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1072
#, no-wrap
msgid ""
"Specifying a frame as a redirection target should imply the currently active "
"window's buffer"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1074
#, no-wrap
msgid "Implement @samp{>@var{func-or-func-list}}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1080
msgid ""
"This would allow for an ``output translators'', that take a function to "
"modify output with, and a target.  Devise a syntax that works well with "
"pipes, and can accommodate multiple functions (i.e., @samp{>'(upcase "
"regexp-quote)} or @samp{>'upcase})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1081
#, no-wrap
msgid "Allow Eshell to read/write to/from standard input and output"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1085
msgid ""
"This would be optional, rather than always using the Eshell buffer.  This "
"would allow it to be run from the command line (perhaps)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1086
#, no-wrap
msgid "Write a @command{help} command"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1090
msgid ""
"It would call subcommands with @option{--help}, or @option{-h} or "
"@option{/?}, as appropriate."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1091
#, no-wrap
msgid "Implement @command{stty} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1093
#, no-wrap
msgid ""
"Support @command{rc}'s matching operator, e.g., @samp{~ (@var{list}) "
"@var{regexp}}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1095
#, no-wrap
msgid ""
"Implement @command{bg} and @command{fg} as editors of "
"@code{eshell-process-list}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1100
msgid ""
"Using @command{bg} on a process that is already in the background does "
"nothing.  Specifying redirection targets replaces (or adds) to the list "
"current being used."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1101
#, no-wrap
msgid "Have @command{jobs} print only the processes for the current shell"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1103
#, no-wrap
msgid "How can Eshell learn if a background process has requested input?"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1105
#, no-wrap
msgid "Support @samp{2>&1} and @samp{>&} and @samp{2>} and @samp{|&}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1109
msgid ""
"The syntax table for parsing these should be customizable, such that the "
"user could change it to use rc syntax: @samp{>[2=1]}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1110
#, no-wrap
msgid "Allow @samp{$_[-1]}, which would indicate the last element of the array"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1112
#, no-wrap
msgid "Make @samp{$x[*]} equal to listing out the full contents of @samp{x}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1116
msgid ""
"Return them as a list, so that @samp{$_[*]} is all the arguments of the last "
"command."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1117
#, no-wrap
msgid "Copy ANSI code handling from @file{term.el} into @file{em-term.el}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1125
msgid ""
"Make it possible for the user to send char-by-char to the underlying "
"process.  Ultimately, I should be able to move away from using term.el "
"altogether, since everything but the ANSI code handling is already part of "
"Eshell.  Then, things would work correctly on MS-Windows as well (which "
"doesn't have @file{/bin/sh}, although @file{term.el} tries to use it)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1126
#, no-wrap
msgid "Make the shell spawning commands be visual"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1133
msgid ""
"That is, make (@command{su}, @command{bash}, @command{telnet}, "
"@command{rlogin}, @command{rsh}, etc.)@: be part of "
"@code{eshell-visual-commands}.  The only exception is if the shell is being "
"used to invoke a single command.  Then, the behavior should be based on what "
"that command is."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1134
#, no-wrap
msgid "Create a smart viewing command named @command{open}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1138
msgid ""
"This would search for some way to open its argument (similar to opening a "
"file in the Windows Explorer)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1139
#, no-wrap
msgid "Alias @command{read} to be the same as @command{open}, only read-only"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1141
#, no-wrap
msgid "Write a @command{tail} command which uses @code{view-file}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1147
msgid ""
"It would move point to the end of the buffer, and then turns on auto-revert "
"mode in that buffer at frequent intervals---and a @command{head} alias which "
"assumes an upper limit of @code{eshell-maximum-line-length} characters per "
"line."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1148
#, no-wrap
msgid ""
"Make @command{dgrep} load @code{dired}, mark everything, then invoke "
"@code{dired-do-search}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1150
#, no-wrap
msgid "Write @file{mesh.c}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1154
msgid ""
"This would run Emacs with the appropriate arguments to invoke Eshell only.  "
"That way, it could be listed as a login shell."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1155
#, no-wrap
msgid "Use an intangible @code{PS2} string for multi-line input prompts"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1157
#, no-wrap
msgid "Auto-detect when a command is visual, by checking @code{TERMCAP} usage"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1159
#, no-wrap
msgid "The first keypress after @kbd{M-x watson} triggers"
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/eshell.texi:1161
msgid "eshell-send-input"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1162
#, no-wrap
msgid "Make @kbd{/} electric"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1167
msgid ""
"So that it automatically expands and corrects pathnames.  Or make pathname "
"completion for Pcomplete auto-expand @samp{/u/i/std@key{TAB}} to "
"@samp{/usr/include/std@key{TAB}}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1168
#, no-wrap
msgid "Write the @command{pushd} stack to disk along with @code{last-dir-ring}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1170
#, no-wrap
msgid "Add options to @code{eshell/cat} which would allow it to sort and uniq"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1172
#, no-wrap
msgid "Implement @command{wc} in Lisp"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1175
msgid "Add support for counting sentences, paragraphs, pages, etc."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1176
#, no-wrap
msgid "Once piping is added, implement @command{sort} and @command{uniq} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1178
#, no-wrap
msgid "Implement @command{touch} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1180
#, no-wrap
msgid "Implement @command{comm} in Lisp"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1182
#, no-wrap
msgid "Implement an @command{epatch} command in Lisp"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1186
msgid ""
"This would call @code{ediff-patch-file}, or @code{ediff-patch-buffer}, "
"depending on its argument."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1187
#, no-wrap
msgid "Have an option such that @samp{ls -l} generates a dired buffer"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1189
#, no-wrap
msgid "Write a version of @command{xargs} based on command rewriting"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1194
msgid ""
"That is, @samp{find X | xargs Y} would be indicated using @samp{Y $@{find "
"X@}}.  Maybe @code{eshell-do-pipelines} could be changed to perform this "
"on-thy-fly rewriting."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1195
#, no-wrap
msgid "Write an alias for @command{less} that brings up a @code{view-mode} buffer"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1200
msgid ""
"Such that the user can press @key{SPC} and @key{DEL}, and then @kbd{q} to "
"return to Eshell.  It would be equivalent to: @samp{X > #<buffer Y>; "
"view-buffer #<buffer Y>}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1201
#, no-wrap
msgid "Make @code{eshell-mode} as much a full citizen as @code{shell-mode}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1205
msgid ""
"Everywhere in Emacs where @code{shell-mode} is specially noticed, add "
"@code{eshell-mode} there."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1206
#, no-wrap
msgid "Permit the umask to be selectively set on a @command{cp} target"
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1208
#, no-wrap
msgid "Problem using @kbd{M-x eshell} after using @code{eshell-command}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1213
msgid ""
"If the first thing that I do after entering Emacs is to run "
"@code{eshell-command} and invoke @command{ls}, and then use @kbd{M-x "
"eshell}, it doesn't display anything."
msgstr ""

#. type: item
#: ../../../../../doc/misc/eshell.texi:1214
#, no-wrap
msgid "@kbd{M-@key{RET}} during a long command (using smart display) doesn't work"
msgstr ""

#. type: table
#: ../../../../../doc/misc/eshell.texi:1217
msgid "Since it keeps the cursor up where the command was invoked."
msgstr ""

#. type: include
#: ../../../../../doc/misc/eshell.texi:1222
#, no-wrap
msgid "doclicense.texi"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/eshell.texi:1224 ../../../../../doc/misc/eshell.texi:1225
#, no-wrap
msgid "Concept Index"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/eshell.texi:1229 ../../../../../doc/misc/eshell.texi:1230
#, no-wrap
msgid "Function and Variable Index"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/eshell.texi:1242 ../../../../../doc/misc/eshell.texi:1243
#, no-wrap
msgid "Key Index"
msgstr ""

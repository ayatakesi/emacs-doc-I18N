# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-13 00:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: settitle
#: ../../../../../doc/misc/cc-mode.texi:85
#, no-wrap
msgid "CC Mode Manual"
msgstr ""

#. type: include
#: ../../../../../doc/misc/cc-mode.texi:86
#, no-wrap
msgid "docstyle.texi"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:88
msgid "@footnotestyle end"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:97
msgid "xemacs"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:100
msgid "XEmacs User's Manual"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:103
msgid "lispref"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:106
msgid "XEmacs Lisp Reference Manual"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:112
msgid "emacs"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:115
msgid "GNU Emacs Manual"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:118
msgid "elisp"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:121
msgid "GNU Emacs Lisp Reference Manual"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:127
msgid "CC Mode"
msgstr ""

#.  For Info, unlike tex, @syncodeindex needs a matching @defindex.
#. type: copying
#: ../../../../../doc/misc/cc-mode.texi:169
msgid "This manual is for CC Mode in Emacs."
msgstr ""

#. type: copying
#: ../../../../../doc/misc/cc-mode.texi:171
msgid "Copyright @copyright{} 1995--2021 Free Software Foundation, Inc."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/cc-mode.texi:179
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.3 or any later "
"version published by the Free Software Foundation; with no Invariant "
"Sections, with the Front-Cover Texts being ``A GNU Manual'', and with the "
"Back-Cover Texts as in (a) below.  A copy of the license is included in the "
"section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/cc-mode.texi:182
msgid ""
"(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify "
"this GNU manual.''"
msgstr ""

#. type: dircategory
#: ../../../../../doc/misc/cc-mode.texi:187
#, no-wrap
msgid "Emacs editing modes"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:191
msgid "CC Mode: (ccmode)"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:191
msgid ""
"Emacs mode for editing C, C++, Objective-C, Java, Pike, AWK, and CORBA IDL "
"code."
msgstr ""

#. type: titlefont{#1}
#: ../../../../../doc/misc/cc-mode.texi:200
#, no-wrap
msgid "CC Mode 5.34"
msgstr ""

#. type: center
#: ../../../../../doc/misc/cc-mode.texi:202
#, no-wrap
msgid "A GNU Emacs mode for editing C and C-like languages"
msgstr ""

#. type: center
#: ../../../../../doc/misc/cc-mode.texi:204
#, no-wrap
msgid "Barry A. Warsaw, Martin Stjernholm, Alan Mackenzie"
msgstr ""

#. type: titlepage
#: ../../../../../doc/misc/cc-mode.texi:212
msgid ""
"This manual was generated from cc-mode.texi, which is distributed with "
"Emacs, or can be downloaded from "
"@url{https://savannah.gnu.org/projects/emacs/}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:222 ../../../../../doc/misc/cc-mode.texi:362 ../../../../../doc/misc/cc-mode.texi:422 ../../../../../doc/misc/cc-mode.texi:491 ../../../../../doc/misc/cc-mode.texi:603 ../../../../../doc/misc/cc-mode.texi:1846 ../../../../../doc/misc/cc-mode.texi:2293 ../../../../../doc/misc/cc-mode.texi:3078 ../../../../../doc/misc/cc-mode.texi:3297 ../../../../../doc/misc/cc-mode.texi:3714 ../../../../../doc/misc/cc-mode.texi:3967 ../../../../../doc/misc/cc-mode.texi:5319 ../../../../../doc/misc/cc-mode.texi:6927 ../../../../../doc/misc/cc-mode.texi:7134 ../../../../../doc/misc/cc-mode.texi:7178 ../../../../../doc/misc/cc-mode.texi:7237 ../../../../../doc/misc/cc-mode.texi:7346 ../../../../../doc/misc/cc-mode.texi:7412 ../../../../../doc/misc/cc-mode.texi:7541 ../../../../../doc/misc/cc-mode.texi:7561 ../../../../../doc/misc/cc-mode.texi:7605 ../../../../../doc/misc/cc-mode.texi:7612 ../../../../../doc/misc/cc-mode.texi:7627 ../../../../../doc/misc/cc-mode.texi:7642
#, no-wrap
msgid "Top"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:222 ../../../../../doc/misc/cc-mode.texi:362 ../../../../../doc/misc/cc-mode.texi:364 ../../../../../doc/misc/cc-mode.texi:422
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:222
#, no-wrap
msgid "(dir)"
msgstr ""

#. type: top
#: ../../../../../doc/misc/cc-mode.texi:226
#, no-wrap
msgid "@ccmode{}"
msgstr ""

#. type: ifnottex
#: ../../../../../doc/misc/cc-mode.texi:234
msgid ""
"@ccmode{} is a GNU Emacs mode for editing files containing C, C++, "
"Objective-C, Java, CORBA IDL (and the variants PSDL and CIDL), Pike and AWK "
"code.  It provides syntax-based indentation, font locking, and has several "
"handy commands and some minor modes to make the editing easier.  It does not "
"provide tools to look up and navigate between functions, classes, etc.; "
"there are other packages for that."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Introduction::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Overview::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Getting Started::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Commands::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Font Locking::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Config Basics::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Custom Filling and Breaking::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Custom Auto-newlines::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Clean-ups::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Indentation Engine Basics::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Customizing Indentation::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Custom Macros::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Odds and Ends::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Sample Init File::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Performance Issues::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Limitations and Known Bugs::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "FAQ::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Updating CC Mode::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Mailing Lists and Bug Reports::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "GNU Free Documentation License::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Command and Function Index::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:265
msgid "Variable Index::"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/cc-mode.texi:265 ../../../../../doc/misc/cc-mode.texi:7627 ../../../../../doc/misc/cc-mode.texi:7642 ../../../../../doc/misc/cc-mode.texi:7644
#, no-wrap
msgid "Concept and Key Index"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:268
msgid "--- The Detailed Node Listing ---"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:270 ../../../../../doc/misc/cc-mode.texi:491 ../../../../../doc/misc/cc-mode.texi:603 ../../../../../doc/misc/cc-mode.texi:605 ../../../../../doc/misc/cc-mode.texi:640 ../../../../../doc/misc/cc-mode.texi:819 ../../../../../doc/misc/cc-mode.texi:888 ../../../../../doc/misc/cc-mode.texi:1046 ../../../../../doc/misc/cc-mode.texi:1140 ../../../../../doc/misc/cc-mode.texi:1261 ../../../../../doc/misc/cc-mode.texi:1441 ../../../../../doc/misc/cc-mode.texi:1497 ../../../../../doc/misc/cc-mode.texi:1655 ../../../../../doc/misc/cc-mode.texi:1748 ../../../../../doc/misc/cc-mode.texi:1846
#, no-wrap
msgid "Commands"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Indentation Commands::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Comment Commands::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Movement Commands::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Filling and Breaking::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Minor Modes::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Electric Keys::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Auto-newlines::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Hungry WS Deletion::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637
msgid "Subword Movement::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:281 ../../../../../doc/misc/cc-mode.texi:637 ../../../../../doc/misc/cc-mode.texi:1655 ../../../../../doc/misc/cc-mode.texi:1748 ../../../../../doc/misc/cc-mode.texi:1750
#, no-wrap
msgid "Other Commands"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:283 ../../../../../doc/misc/cc-mode.texi:603 ../../../../../doc/misc/cc-mode.texi:1846 ../../../../../doc/misc/cc-mode.texi:1848 ../../../../../doc/misc/cc-mode.texi:1878 ../../../../../doc/misc/cc-mode.texi:1976 ../../../../../doc/misc/cc-mode.texi:2075 ../../../../../doc/misc/cc-mode.texi:2155 ../../../../../doc/misc/cc-mode.texi:2177 ../../../../../doc/misc/cc-mode.texi:2232 ../../../../../doc/misc/cc-mode.texi:2293
#, no-wrap
msgid "Font Locking"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:289 ../../../../../doc/misc/cc-mode.texi:1874
msgid "Font Locking Preliminaries::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:289 ../../../../../doc/misc/cc-mode.texi:1874
msgid "Faces::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:289 ../../../../../doc/misc/cc-mode.texi:1874
msgid "Doc Comments::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:289 ../../../../../doc/misc/cc-mode.texi:1874
msgid "Misc Font Locking::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:289 ../../../../../doc/misc/cc-mode.texi:1874 ../../../../../doc/misc/cc-mode.texi:2177 ../../../../../doc/misc/cc-mode.texi:2232 ../../../../../doc/misc/cc-mode.texi:2234
#, no-wrap
msgid "AWK Mode Font Locking"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/cc-mode.texi:291 ../../../../../doc/misc/cc-mode.texi:2295
#, no-wrap
msgid "Configuration Basics"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:295 ../../../../../doc/misc/cc-mode.texi:2482
msgid "CC Hooks::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:295 ../../../../../doc/misc/cc-mode.texi:2482
msgid "Style Variables::"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:295 ../../../../../doc/misc/cc-mode.texi:297 ../../../../../doc/misc/cc-mode.texi:2412 ../../../../../doc/misc/cc-mode.texi:2482 ../../../../../doc/misc/cc-mode.texi:2559 ../../../../../doc/misc/cc-mode.texi:2647 ../../../../../doc/misc/cc-mode.texi:2649 ../../../../../doc/misc/cc-mode.texi:2682 ../../../../../doc/misc/cc-mode.texi:2760 ../../../../../doc/misc/cc-mode.texi:2818 ../../../../../doc/misc/cc-mode.texi:2906 ../../../../../doc/misc/cc-mode.texi:3029
#, no-wrap
msgid "Styles"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:303 ../../../../../doc/misc/cc-mode.texi:2679
msgid "Built-in Styles::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:303 ../../../../../doc/misc/cc-mode.texi:2679
msgid "Choosing a Style::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:303 ../../../../../doc/misc/cc-mode.texi:2679
msgid "Adding Styles::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:303 ../../../../../doc/misc/cc-mode.texi:2679
msgid "Guessing the Style::"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:303 ../../../../../doc/misc/cc-mode.texi:2437 ../../../../../doc/misc/cc-mode.texi:2679 ../../../../../doc/misc/cc-mode.texi:2906 ../../../../../doc/misc/cc-mode.texi:3029 ../../../../../doc/misc/cc-mode.texi:3031
#, no-wrap
msgid "File Styles"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/cc-mode.texi:305 ../../../../../doc/misc/cc-mode.texi:3299
#, no-wrap
msgid "Customizing Auto-newlines"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:309 ../../../../../doc/misc/cc-mode.texi:3349
msgid "Hanging Braces::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:309 ../../../../../doc/misc/cc-mode.texi:3349
msgid "Hanging Colons::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:309 ../../../../../doc/misc/cc-mode.texi:3349 ../../../../../doc/misc/cc-mode.texi:3591 ../../../../../doc/misc/cc-mode.texi:3634 ../../../../../doc/misc/cc-mode.texi:3636
#, no-wrap
msgid "Hanging Semicolons and Commas"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:311 ../../../../../doc/misc/cc-mode.texi:3353 ../../../../../doc/misc/cc-mode.texi:3355 ../../../../../doc/misc/cc-mode.texi:3503 ../../../../../doc/misc/cc-mode.texi:3591
#, no-wrap
msgid "Hanging Braces"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:313 ../../../../../doc/misc/cc-mode.texi:3500 ../../../../../doc/misc/cc-mode.texi:3503
#, no-wrap
msgid "Custom Braces"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:315 ../../../../../doc/misc/cc-mode.texi:3714 ../../../../../doc/misc/cc-mode.texi:3967 ../../../../../doc/misc/cc-mode.texi:3969 ../../../../../doc/misc/cc-mode.texi:4027 ../../../../../doc/misc/cc-mode.texi:4186 ../../../../../doc/misc/cc-mode.texi:5220 ../../../../../doc/misc/cc-mode.texi:5319
#, no-wrap
msgid "Indentation Engine Basics"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:319 ../../../../../doc/misc/cc-mode.texi:4023
msgid "Syntactic Analysis::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:319 ../../../../../doc/misc/cc-mode.texi:4023
msgid "Syntactic Symbols::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:319 ../../../../../doc/misc/cc-mode.texi:4023 ../../../../../doc/misc/cc-mode.texi:4186 ../../../../../doc/misc/cc-mode.texi:5220 ../../../../../doc/misc/cc-mode.texi:5222
#, no-wrap
msgid "Indentation Calculation"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:321 ../../../../../doc/misc/cc-mode.texi:4027 ../../../../../doc/misc/cc-mode.texi:4186 ../../../../../doc/misc/cc-mode.texi:4188 ../../../../../doc/misc/cc-mode.texi:4434 ../../../../../doc/misc/cc-mode.texi:4477 ../../../../../doc/misc/cc-mode.texi:4624 ../../../../../doc/misc/cc-mode.texi:4692 ../../../../../doc/misc/cc-mode.texi:4728 ../../../../../doc/misc/cc-mode.texi:4795 ../../../../../doc/misc/cc-mode.texi:4859 ../../../../../doc/misc/cc-mode.texi:4919 ../../../../../doc/misc/cc-mode.texi:5008 ../../../../../doc/misc/cc-mode.texi:5049 ../../../../../doc/misc/cc-mode.texi:5076 ../../../../../doc/misc/cc-mode.texi:5114 ../../../../../doc/misc/cc-mode.texi:5193 ../../../../../doc/misc/cc-mode.texi:5220
#, no-wrap
msgid "Syntactic Symbols"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Function Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Class Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Conditional Construct Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Switch Statement Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Brace List Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "External Scope Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Paren List Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Literal Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Multiline Macro Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Objective-C Method Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Java Symbols::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431
msgid "Statement Block Symbols::"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:335 ../../../../../doc/misc/cc-mode.texi:4431 ../../../../../doc/misc/cc-mode.texi:5114 ../../../../../doc/misc/cc-mode.texi:5193 ../../../../../doc/misc/cc-mode.texi:5195
#, no-wrap
msgid "K&R Symbols"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:337 ../../../../../doc/misc/cc-mode.texi:3967 ../../../../../doc/misc/cc-mode.texi:5319 ../../../../../doc/misc/cc-mode.texi:5321 ../../../../../doc/misc/cc-mode.texi:5366 ../../../../../doc/misc/cc-mode.texi:5535 ../../../../../doc/misc/cc-mode.texi:5643 ../../../../../doc/misc/cc-mode.texi:6759 ../../../../../doc/misc/cc-mode.texi:6875 ../../../../../doc/misc/cc-mode.texi:6927
#, no-wrap
msgid "Customizing Indentation"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:343 ../../../../../doc/misc/cc-mode.texi:5362
msgid "c-offsets-alist::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:343 ../../../../../doc/misc/cc-mode.texi:5362
msgid "Interactive Customization::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:343 ../../../../../doc/misc/cc-mode.texi:5362
msgid "Line-Up Functions::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:343 ../../../../../doc/misc/cc-mode.texi:5362
msgid "Custom Line-Up::"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:343 ../../../../../doc/misc/cc-mode.texi:5362 ../../../../../doc/misc/cc-mode.texi:6759 ../../../../../doc/misc/cc-mode.texi:6875
#, no-wrap
msgid "Other Indentation"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:345 ../../../../../doc/misc/cc-mode.texi:5535 ../../../../../doc/misc/cc-mode.texi:5643 ../../../../../doc/misc/cc-mode.texi:5645 ../../../../../doc/misc/cc-mode.texi:5717 ../../../../../doc/misc/cc-mode.texi:5974 ../../../../../doc/misc/cc-mode.texi:6299 ../../../../../doc/misc/cc-mode.texi:6447 ../../../../../doc/misc/cc-mode.texi:6557 ../../../../../doc/misc/cc-mode.texi:6759
#, no-wrap
msgid "Line-Up Functions"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:351 ../../../../../doc/misc/cc-mode.texi:5714
msgid "Brace/Paren Line-Up::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:351 ../../../../../doc/misc/cc-mode.texi:5714
msgid "List Line-Up::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:351 ../../../../../doc/misc/cc-mode.texi:5714
msgid "Operator Line-Up::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:351 ../../../../../doc/misc/cc-mode.texi:5714
msgid "Comment Line-Up::"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:351 ../../../../../doc/misc/cc-mode.texi:5714 ../../../../../doc/misc/cc-mode.texi:6447 ../../../../../doc/misc/cc-mode.texi:6557
#, no-wrap
msgid "Misc Line-Up"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/cc-mode.texi:354 ../../../../../doc/misc/cc-mode.texi:6929
#, no-wrap
msgid "Customizing Macros"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:358 ../../../../../doc/misc/cc-mode.texi:6968
msgid "Macro Backslashes::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:358 ../../../../../doc/misc/cc-mode.texi:6968
msgid "Macros with ;::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:358 ../../../../../doc/misc/cc-mode.texi:6968 ../../../../../doc/misc/cc-mode.texi:7019 ../../../../../doc/misc/cc-mode.texi:7077 ../../../../../doc/misc/cc-mode.texi:7079
#, no-wrap
msgid "Noise Macros"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:362 ../../../../../doc/misc/cc-mode.texi:422 ../../../../../doc/misc/cc-mode.texi:491
#, no-wrap
msgid "Overview"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:367
#, no-wrap
msgid "BOCM"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:368
#, no-wrap
msgid "history"
msgstr ""

#. type: file{#1}
#: ../../../../../doc/misc/cc-mode.texi:369
#, no-wrap
msgid "awk-mode.el"
msgstr ""

#. type: file{#1}
#: ../../../../../doc/misc/cc-mode.texi:370
#, no-wrap
msgid "c-mode.el"
msgstr ""

#. type: file{#1}
#: ../../../../../doc/misc/cc-mode.texi:371
#, no-wrap
msgid "c++-mode.el"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:380
msgid ""
"Welcome to @ccmode{}, a GNU Emacs mode for editing files containing C, C++, "
"Objective-C, Java, CORBA IDL (and the variants CORBA PSDL and CIDL), Pike "
"and AWK code.  This incarnation of the mode is descended from "
"@file{c-mode.el} (also called ``Boring Old C Mode'' or BOCM @t{:-)}, "
"@file{c++-mode.el} version 2, which Barry Warsaw had been maintaining since "
"1992, and @file{awk-mode.el}, a long neglected mode in the (X)Emacs base."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:387
msgid ""
"Late in 1997, Martin Stjernholm joined Barry on the @ccmode{} Maintainers "
"Team, and implemented the Pike support.  In 2000 Martin took over as the "
"sole maintainer.  In 2001 Alan Mackenzie joined the team, implementing AWK "
"support in version 5.30.  @ccmode{} did not originally contain the font lock "
"support for its languages; that was added in version 5.30."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:392
msgid "This manual describes @ccmode{} version 5.34."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:400
msgid ""
"@ccmode{} supports the editing of C, C++, Objective-C, Java, CORBA's "
"Interface Definition Language, Pike@footnote{A C-like scripting language "
"with its roots in the LPC language used in some MUD engines.  See "
"@uref{https://pike.lysator.liu.se/}.} and AWK files.  In this way, you can "
"easily set up consistent font locking and coding styles for use in editing "
"all of these languages, although AWK is not yet as uniformly integrated as "
"the other languages."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:401
#, no-wrap
msgid "c-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:402
#, no-wrap
msgid "c++-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:403
#, no-wrap
msgid "objc-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:404
#, no-wrap
msgid "java-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:405
#, no-wrap
msgid "idl-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:406
#, no-wrap
msgid "pike-mode"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:407
#, no-wrap
msgid "awk-mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:415
msgid ""
"Note that the name of this package is ``@ccmode{}'', but there is no top "
"level @code{cc-mode} entry point.  All of the variables, commands, and "
"functions in @ccmode{} are prefixed with @code{c-@var{thing}}, and "
"@code{c-mode}, @code{c++-mode}, @code{objc-mode}, @code{java-mode}, "
"@code{idl-mode}, @code{pike-mode}, and @code{awk-mode} entry points are "
"provided.  This package is intended to be a replacement for "
"@file{c-mode.el}, @file{c++-mode.el} and @file{awk-mode.el}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:420
msgid ""
"A special word of thanks goes to Krishna Padmasola for his work in "
"converting the original @file{README} file to Texinfo format.  I'd also like "
"to thank all the @ccmode{} victims who help enormously during the early beta "
"stages of @ccmode{}'s development."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:422 ../../../../../doc/misc/cc-mode.texi:491 ../../../../../doc/misc/cc-mode.texi:493 ../../../../../doc/misc/cc-mode.texi:603
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/cc-mode.texi:424
#, no-wrap
msgid "Overview of the Manual"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:430
msgid "The manual starts with several introductory chapters (including this one)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:434
msgid ""
"The next chunk of the manual describes the day to day @emph{use} of "
"@ccmode{} (as contrasted with how to customize it)."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:441
msgid ""
"The chapter ``Commands'' describes in detail how to use (nearly) all of "
"@ccmode{}'s features.  There are extensive cross-references from here to the "
"corresponding sections later in the manual which tell you how to customize "
"these features."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:446
msgid ""
"``Font Locking'' describes how ``syntax highlighting'' is applied to your "
"buffers.  It is mainly background information and can be skipped over at a "
"first reading."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:453
msgid ""
"The next chunk of the manual describes how to @emph{customize} @ccmode{}.  "
"Typically, an overview of a topic is given at the chapter level, then the "
"sections and subsections describe the material in increasing detail."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:460
msgid ""
"The chapter ``Configuration Basics'' tells you @emph{how} to write "
"customizations: whether in hooks, in styles, in both, or in neither, "
"depending on your needs.  It describes the @ccmode{} style system and lists "
"the standard styles that @ccmode{} supplies."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:464
msgid ""
"The next few chapters describe in detail how to customize the various "
"features of @ccmode{}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:468
msgid ""
"Finally, there is a sample @file{.emacs} fragment, which might help you in "
"creating your own customization."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:473
msgid ""
"The manual ends with ``this and that'', things that don't fit cleanly into "
"any of the previous chunks."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:478
msgid ""
"Two chapters discuss the performance of @ccmode{} and known "
"bugs/limitations."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:481
msgid "The FAQ contains a list of common problems and questions."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:485
msgid ""
"The next two chapters tell you how to get in touch with the @ccmode{} "
"project: whether for updating @ccmode{} or submitting bug reports."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:489
msgid "Finally, there are the customary indices."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:500
msgid ""
"If you got this version of @ccmode{} with Emacs or XEmacs, it should work "
"just fine right out of the box.  Note however that you might not have the "
"latest @ccmode{} release and might want to upgrade your copy (see below)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:503
msgid ""
"You should probably start by skimming through the entire Commands chapter "
"(@pxref{Commands}) to get an overview of @ccmode{}'s capabilities."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:508
msgid ""
"After trying out some commands, you may dislike some aspects of @ccmode{}'s "
"default configuration.  Here is an outline of how to change some of the "
"settings that newcomers to @ccmode{} most often want to change:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:510 ../../../../../doc/misc/cc-mode.texi:5338
#, no-wrap
msgid "c-basic-offset"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:514
msgid ""
"This Lisp variable holds an integer, the number of columns @ccmode{} indents "
"nested code.  To set this value to 6, customize @code{c-basic-offset} or put "
"this into your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:517
#, no-wrap
msgid "(setq c-basic-offset 6)\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:519
#, no-wrap
msgid "The (indentation) style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:527
msgid ""
"The basic ``shape'' of indentation created by @ccmode{}---by default, this "
"is @code{gnu} style (except for Java and AWK buffers).  A list of the "
"available styles and their descriptions can be found in @ref{Built-in "
"Styles}.  A complete specification of the @ccmode{} style system, including "
"how to create your own style, can be found in the chapter @ref{Styles}.  To "
"set your style to @code{linux}, either customize @code{c-default-style} or "
"put this into your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:532
#, no-wrap
msgid ""
"(setq c-default-style '((java-mode . \"java\")\n"
"                        (awk-mode . \"awk\")\n"
"                        (other . \"linux\")))\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:534
#, no-wrap
msgid "Electric Indentation"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:542
msgid ""
"Normally, when you type ``punctuation'' characters such as @samp{;} or "
"@samp{@{}, @ccmode{} instantly reindents the current line.  This can be "
"disconcerting until you get used to it.  To disable @dfn{electric "
"indentation} in the current buffer, type @kbd{C-c C-l}.  Type the same thing "
"to enable it again.  To have electric indentation disabled by default, put "
"the following into your @file{.emacs} file@footnote{There is no ``easy "
"customization'' facility for making this change.}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:545
#, no-wrap
msgid "(setq-default c-electric-flag nil)\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:550
msgid ""
"Details of this and other similar ``Minor Modes'' appear in the section "
"@ref{Minor Modes}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:551
#, no-wrap
msgid "Making the @key{RET} key indent the new line"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:557
msgid ""
"The standard Emacs binding for @key{RET} just adds a new line.  If you want "
"it to reindent the new line as well, rebind the key.  Note that the action "
"of rebinding would fail if the pertinent keymap didn't yet exist---we thus "
"need to delay the action until after @ccmode{} has been loaded.  Put the "
"following code into your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:562
#, no-wrap
msgid ""
"(defun my-make-CR-do-indent ()\n"
"  (define-key c-mode-base-map \"\\C-m\" 'c-context-line-break))\n"
"(add-hook 'c-initialization-hook 'my-make-CR-do-indent)\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:568
msgid ""
"This example demonstrates the use of a very powerful @ccmode{} (and Emacs) "
"facility, the hook.  The use of @ccmode{}'s hooks is described in @ref{CC "
"Hooks}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:573
msgid ""
"All these settings should occur in your @file{.emacs} @emph{before} any "
"@ccmode{} buffers get loaded---in particular, before any call of "
"@code{desktop-read}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:577
msgid ""
"As you get to know the mode better, you may want to make more ambitious "
"changes to your configuration.  For this, you should start reading the "
"chapter @ref{Config Basics}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:587
msgid ""
"If you are upgrading an existing @ccmode{} installation, please see the "
"@file{README} file for installation details.  In particular, if you are "
"going to be editing AWK files, @file{README} describes how to configure your "
"(X)Emacs so that @ccmode{} will supersede the obsolete @code{awk-mode.el} "
"which might have been supplied with your (X)Emacs.  @ccmode{} might not work "
"with older versions of Emacs or XEmacs.  See the @ccmode{} release notes at "
"@uref{http://cc-mode.sourceforge.net} for the latest information on Emacs "
"version and package compatibility (@pxref{Updating CC Mode})."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:588
#, no-wrap
msgid "Command c-version"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:589
#, no-wrap
msgid "version @r{(c-)}"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:593
msgid ""
"You can find out what version of @ccmode{} you are using by visiting a C "
"file and entering @kbd{M-x c-version @key{RET}}.  You should see this "
"message in the echo area:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:596
#, no-wrap
msgid "Using CC Mode version 5.XX\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:600
msgid "where @samp{XX} is the minor release number."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:614
msgid ""
"This chapter specifies all of CC Mode's commands, and thus contains nearly "
"everything you need to know to @emph{use} @ccmode{} (as contrasted with "
"configuring it).  @dfn{Commands} here means both control key sequences and "
"@dfn{electric keys}, these being characters such as @samp{;} which, as well "
"as inserting themselves into the buffer, also do other things."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:616
msgid "You might well want to review"
msgstr ""

#. type: ifset
#: ../../../../../doc/misc/cc-mode.texi:618
msgid "@ref{Lists,,,@emacsman{}, @emacsmantitle{}},"
msgstr ""

#. type: ifclear
#: ../../../../../doc/misc/cc-mode.texi:621
msgid "@ref{Moving by Parens,,,@emacsman{}, @emacsmantitle{}},"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:624
msgid "which describes commands for moving around brace and parenthesis structures."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:640 ../../../../../doc/misc/cc-mode.texi:642 ../../../../../doc/misc/cc-mode.texi:819
#, no-wrap
msgid "Indentation Commands"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:640 ../../../../../doc/misc/cc-mode.texi:819 ../../../../../doc/misc/cc-mode.texi:821 ../../../../../doc/misc/cc-mode.texi:888
#, no-wrap
msgid "Comment Commands"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:643 ../../../../../doc/misc/cc-mode.texi:5223 ../../../../../doc/misc/cc-mode.texi:5323
#, no-wrap
msgid "indentation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:651
msgid ""
"The following commands reindent C constructs.  Note that when you change "
"your coding style, either interactively or through some other means, your "
"file does @emph{not} automatically get reindented.  You will need to execute "
"one of the following commands to see the effects of your changes."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:652
#, no-wrap
msgid "GNU indent program"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:659
msgid ""
"Also, variables like @code{c-hanging-*} and @code{c-cleanup-list} "
"(@pxref{Custom Auto-newlines}) only affect how on-the-fly code is "
"formatted.  Changing the ``hanginess'' of a brace and then reindenting, will "
"not move the brace to a different line.  For this, you're better off getting "
"an external program like GNU @code{indent}, which will rearrange brace "
"location, amongst other things."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:663
msgid ""
"Preprocessor directives are handled as syntactic whitespace from other code, "
"i.e., they can be interspersed anywhere without affecting the indentation of "
"the surrounding code, just like comments."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:671
msgid ""
"The code inside macro definitions is, by default, still analyzed "
"syntactically so that you get relative indentation there just as you'd get "
"if the same code was outside a macro.  However, since there is no hint about "
"the syntactic context, i.e., whether the macro expands to an expression, to "
"some statements, or perhaps to whole functions, the syntactic recognition "
"can be wrong.  @ccmode{} manages to figure it out correctly most of the "
"time, though."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:675
msgid ""
"Some macros, when invoked, ``have their own semicolon''.  To get the next "
"line indented correctly, rather than as a continuation line, @xref{Macros "
"with ;}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:679
msgid ""
"Reindenting large sections of code can take a long time.  When @ccmode{} "
"reindents a region of code, it is essentially equivalent to hitting "
"@key{TAB} on every line of the region."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:681
msgid "These commands indent code:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:683
#, no-wrap
msgid "@kbd{@key{TAB}} (@code{c-indent-command})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:684
#, no-wrap
msgid "TAB"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:685
#, no-wrap
msgid "c-indent-command"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:686
#, no-wrap
msgid "indent-command @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:689
msgid ""
"This command indents the current line.  That is all you need to know about "
"it for normal use."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:693
msgid ""
"@code{c-indent-command} does different things, depending on the setting of "
"@code{c-syntactic-indentation} (@pxref{Indentation Engine Basics}):"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:702
msgid ""
"When it's non-@code{nil} (which it normally is), the command indents the "
"line according to its syntactic context.  With a prefix argument (@kbd{C-u "
"@key{TAB}}), it will re-indent the entire expression@footnote{this is only "
"useful for a line starting with a comment opener or an opening brace, "
"parenthesis, or string quote.} that begins at the line's left margin."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:708
msgid ""
"When it's @code{nil}, the command indents the line by an extra "
"@code{c-basic-offset} columns.  A prefix argument acts as a multiplier.  A "
"bare prefix (@kbd{C-u @key{TAB}}) is equivalent to @minus{}1, removing "
"@code{c-basic-offset} columns from the indentation."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:718
msgid ""
"The precise behavior is modified by several variables: With "
"@code{c-tab-always-indent}, you can make @key{TAB} insert whitespace in some "
"circumstances---@code{c-insert-tab-function} then defines precisely what "
"sort of ``whitespace'' this will be.  Set the standard Emacs variable "
"@code{indent-tabs-mode} to @code{t} if you want real @samp{tab} characters "
"to be used in the indentation, to @code{nil} if you want only spaces.  "
"@xref{Just Spaces,,,@emacsman{}, @emacsmantitle{}}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:719
#, no-wrap
msgid "c-tab-always-indent"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:720
#, no-wrap
msgid "tab-always-indent @r{(c-)}"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:721 ../../../../../doc/misc/cc-mode.texi:1470 ../../../../../doc/misc/cc-mode.texi:3743
#, no-wrap
msgid "literal"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:723
msgid "This variable modifies how @key{TAB} operates."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:727
msgid ""
"When it is @code{t} (the default), @key{TAB} simply indents the current "
"line."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:732
msgid ""
"When it is @code{nil}, @key{TAB} (re)indents the line only if point is to "
"the left of the first non-whitespace character on the line.  Otherwise it "
"inserts some whitespace (a tab or an equivalent number of spaces; see below) "
"at point."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:735
msgid ""
"With some other value, the line is reindented.  Additionally, if point is "
"within a string or comment, some whitespace is inserted."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:738
#, no-wrap
msgid "c-insert-tab-function"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:739
#, no-wrap
msgid "insert-tab-function @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:740
#, no-wrap
msgid "tab-to-tab-stop"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:748
msgid ""
"When ``some whitespace'' is inserted as described above, what actually "
"happens is that the function stored in @code{c-insert-tab-function} is "
"called.  Normally, this is @code{insert-tab}, which inserts a real tab "
"character or the equivalent number of spaces (depending on "
"@code{indent-tabs-mode}).  Some people, however, set "
"@code{c-insert-tab-function} to @code{tab-to-tab-stop} so as to get hard tab "
"stops when indenting."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:755
msgid ""
"The kind of indentation the next five commands do depends on the setting of "
"@code{c-syntactic-indentation} (@pxref{Indentation Engine Basics}):"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:759
msgid ""
"when it is non-@code{nil} (the default), the commands indent lines according "
"to their syntactic context;"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:763
msgid ""
"when it is @code{nil}, they just indent each line the same amount as the "
"previous non-blank line.  The commands that indent a region aren't very "
"useful in this case."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:766
#, no-wrap
msgid "@kbd{C-M-q} (@code{c-indent-exp})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:767 ../../../../../doc/misc/cc-mode.texi:7490
#, no-wrap
msgid "C-M-q"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:768
#, no-wrap
msgid "c-indent-exp"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:769
#, no-wrap
msgid "indent-exp @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:773
msgid ""
"Indents an entire balanced brace or parenthesis expression.  Note that point "
"must be on the opening brace or parenthesis of the expression you want to "
"indent."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:774
#, no-wrap
msgid "@kbd{C-c C-q} (@code{c-indent-defun})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:775
#, no-wrap
msgid "C-c C-q"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:776
#, no-wrap
msgid "c-indent-defun"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:777
#, no-wrap
msgid "indent-defun @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:784
msgid ""
"Indents the entire top-level function, class or macro definition "
"encompassing point.  It leaves point unchanged.  This function can't be used "
"to reindent a nested brace construct, such as a nested class or function, or "
"a Java method.  The top-level construct being reindented must be complete, "
"i.e., it must have both a beginning brace and an ending brace."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:785
#, no-wrap
msgid "@kbd{C-M-\\} (@code{indent-region})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:786 ../../../../../doc/misc/cc-mode.texi:7483
#, no-wrap
msgid "C-M-\\"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:787
#, no-wrap
msgid "indent-region"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:791
msgid ""
"Indents an arbitrary region of code.  This is a standard Emacs command, "
"tailored for C code in a @ccmode{} buffer.  Note, of course, that point and "
"mark must delineate the region you want to indent."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:792
#, no-wrap
msgid "@kbd{C-M-h} (@code{c-mark-function})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:793
#, no-wrap
msgid "C-M-h"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:794
#, no-wrap
msgid "c-mark-function"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:795
#, no-wrap
msgid "mark-function @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:800
msgid ""
"While not strictly an indentation command, this is useful for marking the "
"current top-level function or class definition as the current region.  As "
"with @code{c-indent-defun}, this command operates on top-level constructs, "
"and can't be used to mark say, a Java method."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:803
msgid "These variables are also useful when indenting code:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:804
#, no-wrap
msgid "indent-tabs-mode"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:808
msgid ""
"This is a standard Emacs variable that controls how line indentation is "
"composed.  When it's non-@code{nil}, tabs can be used in a line's "
"indentation, otherwise only spaces are used."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:810
#, no-wrap
msgid "c-progress-interval"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:811
#, no-wrap
msgid "progress-interval @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:816
msgid ""
"When indenting large regions of code, this variable controls how often a "
"progress message is displayed.  Set this variable to @code{nil} to inhibit "
"the progress messages, or set it to an integer which is how often (in "
"seconds) progress messages are to be displayed."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:819 ../../../../../doc/misc/cc-mode.texi:888 ../../../../../doc/misc/cc-mode.texi:890 ../../../../../doc/misc/cc-mode.texi:1046
#, no-wrap
msgid "Movement Commands"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:822
#, no-wrap
msgid "comments (insertion of)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:828
msgid ""
"When the commands in this section add comment delimiters, they use either "
"line comments or block comments depending on the setting of the comment "
"style (@pxref{Minor Modes})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:830
#, no-wrap
msgid "@kbd{C-c C-c} (@code{comment-region})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:831
#, no-wrap
msgid "C-c C-c"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:832
#, no-wrap
msgid "comment-region"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:839
msgid ""
"This command comments out the lines that start in the region.  With a "
"negative argument, it does the opposite: it deletes the comment delimiters "
"from these lines.  @xref{Multi-Line Comments,,, emacs, GNU Emacs Manual}, "
"for fuller details.  @code{comment-region} isn't actually part of @ccmode{}; "
"it is given a @ccmode{} binding for convenience."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:840
#, no-wrap
msgid ""
"@kbd{M-;} (@code{comment-dwim} or @code{indent-for-comment} @footnote{The "
"name of this command varies between (X)Emacs versions.})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:841
#, no-wrap
msgid "M-;"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:842
#, no-wrap
msgid "comment-dwim"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:843
#, no-wrap
msgid "indent-for-comment"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:846
msgid ""
"Insert a comment at the end of the current line, if none is there already.  "
"Then reindent the comment according to @code{comment-column}"
msgstr ""

#. type: ifclear
#: ../../../../../doc/misc/cc-mode.texi:848
msgid "(@pxref{Options for Comments,,, emacs, GNU Emacs Manual})"
msgstr ""

#. type: ifset
#: ../../../../../doc/misc/cc-mode.texi:851
msgid "(@pxref{Comments,,, xemacs, XEmacs User's Manual})"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:856
msgid ""
"and the variables below.  Finally, position the point after the comment "
"starter.  @kbd{C-u M-;} kills any comment on the current line, together with "
"any whitespace before it.  This is a standard Emacs command, but @ccmode{} "
"enhances it a bit with two variables:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:857
#, no-wrap
msgid "c-indent-comment-alist"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:858
#, no-wrap
msgid "indent-comment-alist @r{(c-)}"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:859
#, no-wrap
msgid "comment-column"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:867
msgid ""
"This style variable allows you to vary the column that @kbd{M-;} puts the "
"comment at, depending on what sort of code is on the line, and possibly the "
"indentation of any similar comment on the preceding line.  It is an "
"association list that maps different types of lines to actions describing "
"how they should be handled.  If a certain line type isn't present on the "
"list then the line is indented to the column specified by "
"@code{comment-column}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:870
msgid ""
"See the documentation string for a full description of this variable (use "
"@kbd{C-h v c-indent-comment-alist})."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:872
#, no-wrap
msgid "c-indent-comments-syntactically-p"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:873
#, no-wrap
msgid "indent-comments-syntactically-p @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:880
msgid ""
"Normally, when this style variable is @code{nil}, @kbd{M-;} will indent "
"comment-only lines according to @code{c-indent-comment-alist}, just as it "
"does with lines where other code precede the comments.  However, if you want "
"it to act just like @key{TAB} for comment-only lines you can get that by "
"setting @code{c-indent-comments-syntactically-p} to non-@code{nil}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:884
msgid ""
"If @code{c-indent-comments-syntactically-p} is non-@code{nil} then "
"@code{c-indent-comment-alist} won't be consulted at all for comment-only "
"lines."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:888 ../../../../../doc/misc/cc-mode.texi:1046 ../../../../../doc/misc/cc-mode.texi:1140
#, no-wrap
msgid "Filling and Breaking"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:891
#, no-wrap
msgid "movement"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:895
msgid "@ccmode{} contains some useful commands for moving around in C code."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:897
#, no-wrap
msgid "@kbd{C-M-a} (@code{c-beginning-of-defun})"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/cc-mode.texi:898
#, no-wrap
msgid "@kbd{C-M-e} (@code{c-end-of-defun})"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:899
#, no-wrap
msgid "c-beginning-of-defun"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:900
#, no-wrap
msgid "c-end-of-defun"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:901
#, no-wrap
msgid "c-defun-tactic"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:902
#, no-wrap
msgid "defun-tactic @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:908
msgid ""
"Move to the beginning or end of the current or next function.  Other "
"constructs (such as a structs or classes) which have a brace block also "
"count as ``functions'' here.  To move over several functions, you can give "
"these commands a repeat count."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:915
msgid ""
"The start of a function is at its header.  The end of the function is after "
"its closing brace, or after the semicolon of a construct (such as a "
"@code{struct}) which doesn't end at the brace.  These two commands try to "
"leave point at the beginning of a line near the actual start or end of the "
"function.  This occasionally causes point not to move at all."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:924
msgid ""
"By default, these commands will recognize functions contained within a "
"@dfn{declaration scope} such as a C++ @code{class} or @code{namespace} "
"construct, should the point start inside it.  If @ccmode fails to find "
"function beginnings or ends inside the current declaration scope, it will "
"search the enclosing scopes.  If you want @ccmode to recognize functions "
"only at the top level@footnote{this was @ccmode{}'s behavior prior to "
"version 5.32.}, set @code{c-defun-tactic} to @code{t}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:930
msgid ""
"These functions are analogous to the Emacs built-in commands "
"@code{beginning-of-defun} and @code{end-of-defun}, except they eliminate the "
"constraint that the top-level opening brace of the defun must be in column "
"zero.  See @ref{Defuns,,,@emacsman{}, @emacsmantitle{}}, for more "
"information."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:931
#, no-wrap
msgid "@kbd{C-M-a} (AWK Mode) (@code{c-awk-beginning-of-defun})"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/cc-mode.texi:932
#, no-wrap
msgid "@kbd{C-M-e} (AWK Mode) (@code{c-awk-end-of-defun})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:933
#, no-wrap
msgid "C-M-a @r{(AWK Mode)}"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:934
#, no-wrap
msgid "C-M-e @r{(AWK Mode)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:935
#, no-wrap
msgid "c-awk-beginning-of-defun"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:936
#, no-wrap
msgid "awk-beginning-of-defun @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:937
#, no-wrap
msgid "c-awk-end-of-defun"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:938
#, no-wrap
msgid "awk-end-of-defun @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:942
msgid ""
"Move to the beginning or end of the current or next AWK defun.  These "
"commands can take prefix-arguments, their functionality being entirely "
"equivalent to @code{beginning-of-defun} and @code{end-of-defun}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:947
msgid ""
"AWK Mode @dfn{defuns} are either pattern/action pairs (either of which might "
"be implicit) or user defined functions.  Having the @samp{@{} and @samp{@}} "
"(if there are any) in column zero, as is suggested for some modes, is "
"neither necessary nor helpful in AWK mode."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:948
#, no-wrap
msgid "@kbd{M-a} (@code{c-beginning-of-statement})"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/cc-mode.texi:949
#, no-wrap
msgid "@kbd{M-e} (@code{c-end-of-statement})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:950
#, no-wrap
msgid "M-a"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:951
#, no-wrap
msgid "M-e"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:952
#, no-wrap
msgid "c-beginning-of-statement"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:953
#, no-wrap
msgid "c-end-of-statement"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:954
#, no-wrap
msgid "beginning-of-statement @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:955
#, no-wrap
msgid "end-of-statement @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:961
msgid ""
"Move to the beginning or end of the innermost C statement.  If point is "
"already there, move to the next beginning or end of a statement, even if "
"that means moving into a block.  (Use @kbd{C-M-b} or @kbd{C-M-f} to move "
"over a balanced block.)  A prefix argument @var{n} means move over @var{n} "
"statements."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:964
msgid ""
"If point is within or next to a comment or a string which spans more than "
"one line, these commands move by sentences instead of statements."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:970
msgid ""
"When called from a program, these functions take three optional arguments: "
"the repetition count, a buffer position limit which is the farthest back to "
"search for the syntactic context, and a flag saying whether to do sentence "
"motion in or near comments and multiline strings."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:971
#, no-wrap
msgid "@kbd{C-c C-u} (@code{c-up-conditional})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:972
#, no-wrap
msgid "C-c C-u"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:973
#, no-wrap
msgid "c-up-conditional"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:974
#, no-wrap
msgid "up-conditional @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:979
msgid ""
"Move back to the containing preprocessor conditional, leaving the mark "
"behind.  A prefix argument acts as a repeat count.  With a negative "
"argument, move forward to the end of the containing preprocessor "
"conditional."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:983
msgid ""
"@samp{#elif} is treated like @samp{#else} followed by @samp{#if}, so the "
"function stops at them when going backward, but not when going forward."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:986
msgid ""
"This key sequence is not bound in AWK Mode, which doesn't have preprocessor "
"statements."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:987
#, no-wrap
msgid "M-x c-up-conditional-with-else"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:988
#, no-wrap
msgid "c-up-conditional-with-else"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:989
#, no-wrap
msgid "up-conditional-with-else @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:992
msgid ""
"A variety of @code{c-up-conditional} that also stops at @samp{#else} lines.  "
"Normally those lines are ignored."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:993
#, no-wrap
msgid "M-x c-down-conditional"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:994
#, no-wrap
msgid "c-down-conditional"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:995
#, no-wrap
msgid "down-conditional @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1000
msgid ""
"Move forward into the next nested preprocessor conditional, leaving the mark "
"behind.  A prefix argument acts as a repeat count.  With a negative "
"argument, move backward into the previous nested preprocessor conditional."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1003
msgid ""
"@samp{#elif} is treated like @samp{#else} followed by @samp{#if}, so the "
"function stops at them when going forward, but not when going backward."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1004
#, no-wrap
msgid "M-x c-down-conditional-with-else"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1005
#, no-wrap
msgid "c-down-conditional-with-else"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1006
#, no-wrap
msgid "down-conditional-with-else @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1009
msgid ""
"A variety of @code{c-down-conditional} that also stops at @samp{#else} "
"lines.  Normally those lines are ignored."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1010
#, no-wrap
msgid "@kbd{C-c C-p} (@code{c-backward-conditional})"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/cc-mode.texi:1011
#, no-wrap
msgid "@kbd{C-c C-n} (@code{c-forward-conditional})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1012
#, no-wrap
msgid "C-c C-p"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1013
#, no-wrap
msgid "C-c C-n"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1014
#, no-wrap
msgid "c-backward-conditional"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1015
#, no-wrap
msgid "c-forward-conditional"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1016
#, no-wrap
msgid "backward-conditional @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1017
#, no-wrap
msgid "forward-conditional @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1021
msgid ""
"Move backward or forward across a preprocessor conditional, leaving the mark "
"behind.  A prefix argument acts as a repeat count.  With a negative "
"argument, move in the opposite direction."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1024
msgid ""
"These key sequences are not bound in AWK Mode, which doesn't have "
"preprocessor statements."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1025
#, no-wrap
msgid "M-x c-backward-into-nomenclature"
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1026
#, no-wrap
msgid "M-x c-forward-into-nomenclature"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1027
#, no-wrap
msgid "c-backward-into-nomenclature"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1028
#, no-wrap
msgid "c-forward-into-nomenclature"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1029
#, no-wrap
msgid "backward-into-nomenclature @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1030
#, no-wrap
msgid "forward-into-nomenclature @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1035
msgid ""
"A popular programming style, especially for object-oriented languages such "
"as C++ is to write symbols in a mixed case format, where the first letter of "
"each word is capitalized, and not separated by underscores.  E.g., "
"@samp{SymbolsWithMixedCaseAndNoUnderlines}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1039
msgid ""
"These commands move backward or forward to the beginning of the next "
"capitalized word.  With prefix argument @var{n}, move @var{n} times.  If "
"@var{n} is negative, move in the opposite direction."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1043
msgid ""
"Note that these two commands have been superseded by @code{subword-mode}, "
"which you should use instead.  @xref{Subword Movement}.  They might be "
"removed from a future release of @ccmode{}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1046 ../../../../../doc/misc/cc-mode.texi:1140 ../../../../../doc/misc/cc-mode.texi:1142 ../../../../../doc/misc/cc-mode.texi:1143 ../../../../../doc/misc/cc-mode.texi:1261
#, no-wrap
msgid "Minor Modes"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:1048
#, no-wrap
msgid "Filling and Line Breaking Commands"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1049
#, no-wrap
msgid "text filling"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1050
#, no-wrap
msgid "line breaking"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1051
#, no-wrap
msgid "comment handling"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1061
msgid ""
"Since there's a lot of normal text in comments and string literals, "
"@ccmode{} provides features to edit these like in text mode.  The goal is to "
"do it seamlessly, i.e., you can use auto fill mode, sentence and paragraph "
"movement, paragraph filling, adaptive filling etc.@: wherever there's a "
"piece of normal text without having to think much about it.  @ccmode{} keeps "
"the indentation, fixes suitable comment line prefixes, and so on."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1066
msgid ""
"You can configure the exact way comments get filled and broken, and where "
"Emacs does auto-filling (@pxref{Custom Filling and Breaking}).  Typically, "
"the style system (@pxref{Styles}) will have set this up for you, so you "
"probably won't have to bother."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1067
#, no-wrap
msgid "auto-fill-mode"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1068
#, no-wrap
msgid "Auto Fill mode"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1069
#, no-wrap
msgid "paragraph filling"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1078
msgid ""
"Line breaks are by default handled (almost) the same regardless of whether "
"they are made by auto fill mode (@pxref{Auto Fill,,,@emacsman{}, "
"@emacsmantitle{}}), by paragraph filling (e.g., with @kbd{M-q}), or "
"explicitly with @kbd{M-j} or similar methods.  In string literals, the new "
"line gets the same indentation as the previous nonempty line.@footnote{You "
"can change this default by setting the @code{string} syntactic symbol "
"(@pxref{Syntactic Symbols} and @pxref{Customizing Indentation})}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1080
#, no-wrap
msgid "@kbd{M-q} (@code{c-fill-paragraph})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1081
#, no-wrap
msgid "M-q"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1082
#, no-wrap
msgid "c-fill-paragraph"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1083
#, no-wrap
msgid "fill-paragraph @r{(c-)}"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1084 ../../../../../doc/misc/cc-mode.texi:2124
#, no-wrap
msgid "Javadoc markup"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1085 ../../../../../doc/misc/cc-mode.texi:2128
#, no-wrap
msgid "Pike autodoc markup"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1090
msgid ""
"This command fills multiline string literals and both block and line style "
"comments.  In Java buffers, the Javadoc markup words are recognized as "
"paragraph starters.  The line oriented Pike autodoc markup words are "
"recognized in the same way in Pike mode."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1096
msgid ""
"The formatting of the starters (@code{/*}) and enders (@code{*/}) of block "
"comments are kept as they were before the filling.  I.e., if either the "
"starter or ender were on a line of its own, then it stays on its own line; "
"conversely, if the delimiter has comment text on its line, it keeps at least "
"one word of that text with it on the line."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1099
msgid ""
"This command is the replacement for @code{fill-paragraph} in @ccmode{} "
"buffers."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1100
#, no-wrap
msgid "@kbd{M-j} (@code{c-indent-new-comment-line})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1101
#, no-wrap
msgid "M-j"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1102
#, no-wrap
msgid "c-indent-new-comment-line"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1103
#, no-wrap
msgid "indent-new-comment-line @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1109
msgid ""
"This breaks the current line at point and indents the new line.  If point "
"was in a comment, the new line gets the proper comment line prefix.  If "
"point was inside a macro, a backslash is inserted before the line break.  It "
"is the replacement for @code{indent-new-comment-line}."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1110
#, no-wrap
msgid "M-x c-context-line-break"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1111
#, no-wrap
msgid "c-context-line-break"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1112
#, no-wrap
msgid "context-line-break @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1123
msgid ""
"Insert a line break suitable to the context: If the point is inside a "
"comment, the new line gets the suitable indentation and comment line prefix "
"like @code{c-indent-new-comment-line}.  In normal code it's indented like "
"@code{newline-and-indent} would do.  In macros it acts like "
"@code{newline-and-indent} but additionally inserts and optionally aligns the "
"line ending backslash so that the macro remains unbroken.  @xref{Custom "
"Macros}, for details about the backslash alignment.  In a string, a "
"backslash is inserted only if the string is within a macro@footnote{In GCC, "
"unescaped line breaks within strings are valid.}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1128
msgid ""
"This function is not bound to a key by default, but it's intended to be used "
"on the @kbd{RET} key.  If you like the behavior of @code{newline-and-indent} "
"on @kbd{RET}, you should consider switching to this function.  @xref{Sample "
"Init File}."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1129
#, no-wrap
msgid "M-x c-context-open-line"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1130
#, no-wrap
msgid "c-context-open-line"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1131
#, no-wrap
msgid "context-open-line @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1136
msgid ""
"This is to @kbd{C-o} (@kbd{M-x open-line}) as @code{c-context-line-break} is "
"to @kbd{RET}.  I.e., it works just like @code{c-context-line-break} but "
"leaves the point before the inserted line break."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1140 ../../../../../doc/misc/cc-mode.texi:1261 ../../../../../doc/misc/cc-mode.texi:1441
#, no-wrap
msgid "Electric Keys"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1148
msgid ""
"@ccmode{} contains several minor-mode-like features that you might find "
"useful while writing new code or editing old code:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1150
#, no-wrap
msgid "comment style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1155
msgid ""
"This specifies whether comment commands (such as @kbd{M-;}) insert block "
"comments or line comments@footnote{You can emphasize non-default style "
"comments in your code by giving their delimiters "
"@code{font-lock-warning-face}.  @xref{Wrong Comment Style}.}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1155
#, no-wrap
msgid "electric mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1160
msgid ""
"When this is enabled, certain visible characters cause reformatting as they "
"are typed.  This is normally helpful, but can be a nuisance when editing "
"chaotically formatted code.  It can also be disconcerting, especially for "
"users who are new to @ccmode{}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1160
#, no-wrap
msgid "auto-newline mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1164
msgid ""
"This automatically inserts newlines where you'd probably want to type them "
"yourself, e.g., after typing @samp{@}}s.  Its action is suppressed when "
"electric mode is disabled."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1164
#, no-wrap
msgid "hungry-delete mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1169
msgid ""
"This lets you delete a contiguous block of whitespace with a single key: for "
"example, the newline and indentation just inserted by auto-newline when you "
"want to back up and write a comment after the last statement."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1169
#, no-wrap
msgid "subword mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1175
msgid ""
"This mode makes basic word movement commands like @kbd{M-f} "
"(@code{forward-word}) and @kbd{M-b} (@code{backward-word}) treat the parts "
"of sillycapsed symbols as different words.  E.g., @samp{NSGraphicsContext} "
"is treated as three words @samp{NS}, @samp{Graphics}, and @samp{Context}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1175
#, no-wrap
msgid "syntactic-indentation mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1181
msgid ""
"When this is enabled (which it normally is), indentation commands such as "
"@kbd{C-j} indent lines of code according to their syntactic structure.  "
"Otherwise, a line is simply indented to the same level as the previous one "
"and @kbd{@key{TAB}} adjusts the indentation in steps of "
"@code{c-basic-offset}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1186
msgid ""
"Full details on how these minor modes work are at @ref{Electric Keys}, "
"@ref{Auto-newlines}, @ref{Hungry WS Deletion}, @ref{Subword Movement}, and "
"@ref{Indentation Engine Basics}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1193
msgid ""
"You can toggle each of these minor modes on and off, and you can configure "
"@ccmode{} so that it starts up with your favorite combination of them "
"(@pxref{Sample Init File}).  By default, when you initialize a buffer, the "
"comment style is set to the default for the major mode, electric mode and "
"syntactic-indentation mode are enabled, but the other three modes are "
"disabled."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1204
msgid ""
"@ccmode{} displays the current state of the first five of these minor modes "
"on the mode line by appending characters to the major mode's name: @samp{/} "
"or @samp{*} to indicate the comment style (respectively line or block), and "
"one letter for each of the other minor modes which is enabled - @samp{l} for "
"electric mode, @samp{a} for auto-newline mode, @samp{h} for hungry delete "
"mode, and @samp{w} for subword mode.  If the comment style was block and all "
"the other modes were enabled, you'd see @samp{C/*lahw}@footnote{The @samp{C} "
"would be replaced with the name of the language in question for the other "
"languages @ccmode{} supports.}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1206
msgid "Here are the commands to toggle these modes:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1208
#, no-wrap
msgid "@kbd{C-c C-k} (@code{c-toggle-comment-style})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1209
#, no-wrap
msgid "C-c C-k"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1210
#, no-wrap
msgid "c-toggle-comment-style"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1211
#, no-wrap
msgid "toggle-comment-style @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1215
msgid ""
"Toggle the comment style between line style and block style.  In modes (such "
"as AWK Mode) which only have one of these styles, this function does "
"nothing."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1216
#, no-wrap
msgid "@kbd{C-c C-l} (@code{c-toggle-electric-state})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1217
#, no-wrap
msgid "C-c C-l"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1218
#, no-wrap
msgid "c-toggle-electric-state"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1219
#, no-wrap
msgid "toggle-electric-state @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1222
msgid ""
"Toggle electric minor mode.  When the command turns the mode off, it also "
"suppresses auto-newline mode."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1223
#, no-wrap
msgid "@kbd{C-c C-a} (@code{c-toggle-auto-newline})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1224
#, no-wrap
msgid "C-c C-a"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1225
#, no-wrap
msgid "c-toggle-auto-newline"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1226
#, no-wrap
msgid "toggle-auto-newline @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1229
msgid ""
"Toggle auto-newline minor mode.  When the command turns the mode on, it also "
"enables electric minor mode."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1230
#, no-wrap
msgid ""
"@kbd{M-x c-toggle-hungry-state}@footnote{Prior to @ccmode{} 5.31, this "
"command was bound to @kbd{C-c C-d}.}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1231
#, no-wrap
msgid "c-toggle-hungry-state"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1232
#, no-wrap
msgid "toggle-hungry-state @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1234
msgid "Toggle hungry-delete minor mode."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1235
#, no-wrap
msgid ""
"@kbd{M-x c-toggle-auto-hungry-state}@footnote{Prior to @ccmode{} 5.31, this "
"command was bound to @kbd{C-c C-t}.}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1236
#, no-wrap
msgid "c-toggle-auto-hungry-state"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1237
#, no-wrap
msgid "toggle-auto-hungry-state @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1239
msgid "Toggle both auto-newline and hungry delete minor modes."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1240
#, no-wrap
msgid "@kbd{C-c C-w} (@code{M-x subword-mode})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1241
#, no-wrap
msgid "C-c C-w"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1242
#, no-wrap
msgid "subword-mode"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1244
msgid "Toggle subword mode."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:1245
#, no-wrap
msgid "M-x c-toggle-syntactic-indentation"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1246
#, no-wrap
msgid "c-toggle-syntactic-indentation"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1247
#, no-wrap
msgid "toggle-syntactic-indentation @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1249
msgid "Toggle syntactic-indentation mode."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1258
msgid ""
"Common to all the toggle functions above is that if they are called "
"programmatically, they take an optional numerical argument.  For "
"@code{c-toggle-comment style}, a positive value will select block comments, "
"a negative value will select line comments.  For the other functions, a "
"positive value will turn on the minor mode (or both of them in the case of "
"@code{c-toggle-auto-hungry-state}) and a negative value will turn it (or "
"them) off."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1261 ../../../../../doc/misc/cc-mode.texi:1441 ../../../../../doc/misc/cc-mode.texi:1497
#, no-wrap
msgid "Auto-newlines"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:1263
#, no-wrap
msgid "Electric Keys and Keywords"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1264
#, no-wrap
msgid "electric characters"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1272
msgid ""
"Most punctuation keys provide @dfn{electric} behavior: as well as inserting "
"themselves they perform some other action, such as reindenting the line.  "
"This reindentation saves you from having to reindent a line manually after "
"typing, say, a @samp{@}}.  A few keywords, such as @code{else}, also trigger "
"electric action."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1275
msgid ""
"You can inhibit the electric behavior described here by disabling electric "
"minor mode (@pxref{Minor Modes})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1281
msgid ""
"Common to all these keys is that they only behave electrically when used in "
"normal code (as contrasted with getting typed in a string literal or "
"comment).  Those which cause re-indentation do so only when "
"@code{c-syntactic-indentation} has a non-@code{nil} value (which it does by "
"default)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1286
msgid "These keys and keywords are:"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1288 ../../../../../doc/misc/cc-mode.texi:1289
#, no-wrap
msgid "#"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1290
#, no-wrap
msgid "c-electric-pound"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1291
#, no-wrap
msgid "electric-pound @r{(c-)}"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1292
#, no-wrap
msgid "c-electric-pound-behavior"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1293
#, no-wrap
msgid "electric-pound-behavior @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1301
msgid ""
"Pound (bound to @code{c-electric-pound}) is electric when typed as the first "
"non-whitespace character on a line and not within a macro definition.  In "
"this case, the variable @code{c-electric-pound-behavior} is consulted for "
"the electric behavior.  This variable takes a list value, although the only "
"element currently defined is @code{alignleft}, which tells this command to "
"force the @samp{#} character into column zero.  This is useful for entering "
"preprocessor macro definitions."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1307
msgid ""
"Pound is not electric in AWK buffers, where @samp{#} starts a comment, and "
"is bound to @code{self-insert-command} like any typical printable character."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1308 ../../../../../doc/misc/cc-mode.texi:1309 ../../../../../doc/misc/cc-mode.texi:5464
#, no-wrap
msgid "*"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1310 ../../../../../doc/misc/cc-mode.texi:1311 ../../../../../doc/misc/cc-mode.texi:5466
#, no-wrap
msgid "/"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1312
#, no-wrap
msgid "c-electric-star"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1313
#, no-wrap
msgid "electric-star @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1314
#, no-wrap
msgid "c-electric-slash"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1315
#, no-wrap
msgid "electric-slash @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1322
msgid ""
"A star (bound to @code{c-electric-star}) or a slash "
"(@code{c-electric-slash}) causes reindentation when you type it as the "
"second component of a C style block comment opener (@samp{/*}) or a C++ line "
"comment opener (@samp{//}) respectively, but only if the comment opener is "
"the first thing on the line (i.e., there's only whitespace before it)."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1327
msgid ""
"Additionally, you can configure @ccmode{} so that typing a slash at the "
"start of a line within a block comment will terminate the comment.  You "
"don't need to have electric minor mode enabled to get this behavior.  "
"@xref{Clean-ups}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1330
msgid ""
"In AWK mode, @samp{*} and @samp{/} do not delimit comments and are not "
"electric."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1331 ../../../../../doc/misc/cc-mode.texi:1332
#, no-wrap
msgid "<"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1333 ../../../../../doc/misc/cc-mode.texi:1334
#, no-wrap
msgid ">"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1335
#, no-wrap
msgid "c-electric-lt-gt"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1336
#, no-wrap
msgid "electric-lt-gt @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1344
msgid ""
"A less-than or greater-than sign (bound to @code{c-electric-lt-gt}) is "
"electric in two circumstances: when it is an angle bracket in a C++ "
"@samp{template} declaration (and similar constructs in other languages) and "
"when it is the second of two @kbd{<} or @kbd{>} characters in a C++ style "
"stream operator.  In either case, the line is reindented.  Angle brackets in "
"C @samp{#include} directives are not electric."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1345 ../../../../../doc/misc/cc-mode.texi:1346
#, no-wrap
msgid "("
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1347 ../../../../../doc/misc/cc-mode.texi:1348
#, no-wrap
msgid ")"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1349
#, no-wrap
msgid "c-electric-paren"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1350
#, no-wrap
msgid "electric-paren @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1355
msgid ""
"The normal parenthesis characters @samp{(} and @samp{)} (bound to "
"@code{c-electric-paren}) reindent the current line.  This is useful for "
"getting the closing parenthesis of an argument list aligned automatically."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1361
msgid ""
"You can also configure @ccmode{} to insert a space automatically between a "
"function name and the @samp{(} you've just typed, and to remove it "
"automatically after typing @samp{)}, should the argument list be empty.  You "
"don't need to have electric minor mode enabled to get these actions.  "
"@xref{Clean-ups}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1362 ../../../../../doc/misc/cc-mode.texi:1363
#, no-wrap
msgid "@{"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1364 ../../../../../doc/misc/cc-mode.texi:1365
#, no-wrap
msgid "@}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1366
#, no-wrap
msgid "c-electric-brace"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1367
#, no-wrap
msgid "electric-brace @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1374
msgid ""
"Typing a brace (bound to @code{c-electric-brace}) reindents the current "
"line.  Also, one or more newlines might be inserted if auto-newline minor "
"mode is enabled.  @xref{Auto-newlines}.  Additionally, you can configure "
"@ccmode{} to compact excess whitespace inserted by auto-newline mode in "
"certain circumstances.  @xref{Clean-ups}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1375 ../../../../../doc/misc/cc-mode.texi:1376
#, no-wrap
msgid ":"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1377
#, no-wrap
msgid "c-electric-colon"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1378
#, no-wrap
msgid "electric-colon @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1385
msgid ""
"Typing a colon (bound to @code{c-electric-colon}) reindents the current "
"line.  Additionally, one or more newlines might be inserted if auto-newline "
"minor mode is enabled.  @xref{Auto-newlines}.  If you type a second colon "
"immediately after such an auto-newline, by default the whitespace between "
"the two colons is removed, leaving a C++ scope operator.  @xref{Clean-ups}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1389
msgid ""
"If you prefer, you can insert @samp{::} in a single operation, avoiding all "
"these spurious reindentations, newlines, and clean-ups.  @xref{Other "
"Commands}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1390 ../../../../../doc/misc/cc-mode.texi:1391
#, no-wrap
msgid ";"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1392 ../../../../../doc/misc/cc-mode.texi:1393
#, no-wrap
msgid ","
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1394
#, no-wrap
msgid "c-electric-semi&comma"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1395
#, no-wrap
msgid "electric-semi&comma @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1402
msgid ""
"Typing a semicolon or comma (bound to @code{c-electric-semi&comma})  "
"reindents the current line.  Also, a newline might be inserted if "
"auto-newline minor mode is enabled.  @xref{Auto-newlines}.  Additionally, "
"you can configure @ccmode{} so that when auto-newline has inserted "
"whitespace after a @samp{@}}, it will be removed again when you type a "
"semicolon or comma just after it.  @xref{Clean-ups}."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:1405
#, no-wrap
msgid "Command c-electric-continued-statement"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1406
#, no-wrap
msgid "electric-continued-statement @r{(c-)}"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:1413
msgid ""
"Certain keywords are electric, causing reindentation when they are preceded "
"only by whitespace on the line.  The keywords are those that continue an "
"earlier statement instead of starting a new one: @code{else}, @code{while}, "
"@code{catch} (only in C++ and Java) and @code{finally} (only in Java)."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:1415
msgid "An example:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:1422
#, no-wrap
msgid ""
"for (i = 0; i < 17; i++)\n"
"  if (a[i])\n"
"    res += a[i]->offset;\n"
"else\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:1430
msgid ""
"Here, the @code{else} should be indented like the preceding @code{if}, since "
"it continues that statement. @ccmode{} will automatically reindent it after "
"the @code{else} has been typed in full, since only then is it possible to "
"decide whether it's a new statement or a continuation of the preceding "
"@code{if}."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1431 ../../../../../doc/misc/cc-mode.texi:1432
#, no-wrap
msgid "abbrev-mode"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1433
#, no-wrap
msgid "Abbrev mode"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:1437
msgid ""
"@ccmode{} uses Abbrev mode (@pxref{Abbrevs,,,@emacsman{}, @emacsmantitle{}})  "
"to accomplish this. It's therefore turned on by default in all language "
"modes except IDL mode, since CORBA IDL doesn't have any statements."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1441 ../../../../../doc/misc/cc-mode.texi:1497 ../../../../../doc/misc/cc-mode.texi:1655
#, no-wrap
msgid "Hungry WS Deletion"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:1443
#, no-wrap
msgid "Auto-newline Insertion"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1444
#, no-wrap
msgid "auto-newline"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1452
msgid ""
"When you have @dfn{Auto-newline minor mode} enabled (@pxref{Minor Modes}), "
"@ccmode{} inserts newlines for you automatically (in certain syntactic "
"contexts) when you type a left or right brace, a colon, a semicolon, or a "
"comma.  Sometimes a newline appears before the character you type, sometimes "
"after it, sometimes both."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1454
msgid "Auto-newline only triggers when the following conditions hold:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1460
msgid ""
"Auto-newline minor mode is enabled, as evidenced by the indicator @samp{a} "
"after the mode name on the modeline (e.g., @samp{C/a} or @samp{C/la})."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1464
msgid ""
"The character was typed at the end of a line, or with only whitespace after "
"it, and possibly a @samp{\\} escaping the newline."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1468
msgid ""
"The character is not on its own line already.  (This applies only to "
"insertion of a newline @emph{before} the character.)"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1471 ../../../../../doc/misc/cc-mode.texi:4968 ../../../../../doc/misc/cc-mode.texi:5014
#, no-wrap
msgid "syntactic whitespace"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1476
msgid ""
"The character was not typed inside of a literal @footnote{A @dfn{literal} is "
"defined as any comment, string, or preprocessor macro definition.  These "
"constructs are also known as @dfn{syntactic whitespace} since they are "
"usually ignored when scanning C code.}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1480
msgid ""
"No numeric argument was supplied to the command (i.e., it was typed as "
"normal, with no @kbd{C-u} prefix)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1486
msgid ""
"You can configure the precise circumstances in which newlines get inserted "
"(@pxref{Custom Auto-newlines}).  Typically, the style system "
"(@pxref{Styles}) will have set this up for you, so you probably won't have "
"to bother."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1494
msgid ""
"Sometimes @ccmode{} inserts an auto-newline where you don't want one, such "
"as after a @samp{@}} when you're about to type a @samp{;}.  Hungry deletion "
"can help here (@pxref{Hungry WS Deletion}), or you can activate an "
"appropriate @dfn{clean-up}, which will remove the excess whitespace after "
"you've typed the @samp{;}.  See @ref{Clean-ups} for a full description.  See "
"also @ref{Electric Keys} for a summary of clean-ups listed by key."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1497 ../../../../../doc/misc/cc-mode.texi:1655 ../../../../../doc/misc/cc-mode.texi:1748
#, no-wrap
msgid "Subword Movement"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:1499
#, no-wrap
msgid "Hungry Deletion of Whitespace"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1500
#, no-wrap
msgid "hungry-deletion"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1511
msgid ""
"If you want to delete an entire block of whitespace at point, you can use "
"@dfn{hungry deletion}.  This deletes all the contiguous whitespace either "
"before point or after point in a single operation.  ``Whitespace'' here "
"includes tabs and newlines, but not comments or preprocessor commands.  "
"Hungry deletion can markedly cut down on the number of times you have to hit "
"deletion keys when, for example, you've made a mistake on the preceding line "
"and have already pressed @kbd{C-j}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1515
msgid ""
"Hungry deletion is a simple feature that some people find extremely useful.  "
"In fact, you might find yourself wanting it in @strong{all} your editing "
"modes!"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1519
msgid ""
"Loosely speaking, in what follows, @dfn{@key{DEL}} means ``the backspace "
"key'' and @dfn{@key{DELETE}} means ``the forward delete key''.  This is "
"discussed in more detail below."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1521
msgid "There are two different ways you can use hungry deletion:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1523
#, no-wrap
msgid "Using @dfn{Hungry Delete Mode} with @kbd{@key{DEL}} and @kbd{C-d}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1530
msgid ""
"Here you toggle Hungry Delete minor mode with @kbd{M-x "
"c-toggle-hungry-state}@footnote{Prior to @ccmode{} 5.31, this command was "
"bound to @kbd{C-c C-d}.  @kbd{C-c C-d} is now the default binding for "
"@code{c-hungry-delete-forward}.} (@pxref{Minor Modes}.)  This makes "
"@kbd{@key{DEL}} and @kbd{C-d} do backwards and forward hungry deletion."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1532
#, no-wrap
msgid "@kbd{@key{DEL}} (@code{c-electric-backspace})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1533
#, no-wrap
msgid "DEL"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1534
#, no-wrap
msgid "c-electric-backspace"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1535
#, no-wrap
msgid "electric-backspace @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1543
msgid ""
"This command is run by default when you hit the @kbd{@key{DEL}} key.  When "
"hungry delete mode is enabled, it deletes any amount of whitespace in the "
"backwards direction.  Otherwise, or when used with a prefix argument or in a "
"literal (@pxref{Auto-newlines}), the command just deletes backwards in the "
"usual way.  (More precisely, it calls the function contained in the variable "
"@code{c-backspace-function}, passing it the prefix argument, if any.)"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1544 ../../../../../doc/misc/cc-mode.texi:1545
#, no-wrap
msgid "c-backspace-function"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1546
#, no-wrap
msgid "backspace-function @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1547
#, no-wrap
msgid "backward-delete-char-untabify"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1553
msgid ""
"Hook that gets called by @code{c-electric-backspace} when it doesn't do an "
"``electric'' deletion of the preceding whitespace.  The default value is "
"@code{backward-delete-char-untabify} (@pxref{Deletion,,,@lispref{}, "
"@lispreftitle{}}, the function which deletes a single character."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1554
#, no-wrap
msgid "@kbd{C-d} (@code{c-electric-delete-forward})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1555
#, no-wrap
msgid "C-d"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1556
#, no-wrap
msgid "c-electric-delete-forward"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1557
#, no-wrap
msgid "electric-delete-forward @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1564
msgid ""
"This function, which is bound to @kbd{C-d} by default, works just like "
"@code{c-electric-backspace} but in the forward direction.  When it doesn't "
"do an ``electric'' deletion of the following whitespace, it just does "
"@code{delete-char}, more or less.  (Strictly speaking, it calls the function "
"in @code{c-delete-function} with the prefix argument.)"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1565 ../../../../../doc/misc/cc-mode.texi:1566
#, no-wrap
msgid "c-delete-function"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1567
#, no-wrap
msgid "delete-function @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1568
#, no-wrap
msgid "delete-char"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1572
msgid ""
"Hook that gets called by @code{c-electric-delete-forward} when it doesn't do "
"an ``electric'' deletion of the following whitespace.  The default value is "
"@code{delete-char}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1574
#, no-wrap
msgid "Using Distinct Bindings"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1579
msgid ""
"The other (newer and recommended) way to use hungry deletion is to perform "
"@code{c-hungry-delete-backwards} and @code{c-hungry-delete-forward} directly "
"through their key sequences rather than using the minor mode toggling."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1581
#, no-wrap
msgid ""
"@kbd{C-c C-@key{DEL}}, or @kbd{C-c @key{DEL}} "
"(@code{c-hungry-delete-backwards})@footnote{This command was formerly known "
"as @code{c-hungry-backspace}.}"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1582
#, no-wrap
msgid "C-c C-Backspace"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1583
#, no-wrap
msgid "C-c Backspace"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1584
#, no-wrap
msgid "C-c C-DEL"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1585
#, no-wrap
msgid "C-c DEL"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1586
#, no-wrap
msgid "c-hungry-delete-backwards"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1587
#, no-wrap
msgid "hungry-delete-backwards @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1593
msgid ""
"Delete any amount of whitespace in the backwards direction (regardless "
"whether hungry-delete mode is enabled or not).  This command is bound to "
"both @kbd{C-c C-@key{DEL}} and @kbd{C-c @key{DEL}}, since the more natural "
"one, @kbd{C-c C-@key{DEL}}, is sometimes difficult to type at a character "
"terminal."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1594
#, no-wrap
msgid ""
"@kbd{C-c C-d}, @kbd{C-c C-@key{DELETE}}, or @kbd{C-c @key{DELETE}} "
"(@code{c-hungry-delete-forward})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1595
#, no-wrap
msgid "C-c C-d"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1596
#, no-wrap
msgid "C-c C-Delete"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1597
#, no-wrap
msgid "C-c Delete"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1598
#, no-wrap
msgid "c-hungry-delete-forward"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1599
#, no-wrap
msgid "hungry-delete-forward @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1604
msgid ""
"Delete any amount of whitespace in the forward direction (regardless whether "
"hungry-delete mode is enabled or not).  This command is bound to both "
"@kbd{C-c C-@key{Delete}} and @kbd{C-c @key{Delete}} for the same reason as "
"for @key{DEL} above."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1607
#, no-wrap
msgid "Delete"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1608
#, no-wrap
msgid "Backspace"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1614
msgid ""
"When we talk about @kbd{@key{DEL}}, and @kbd{@key{Delete}} above, we "
"actually do so without connecting them to the physical keys commonly known "
"as @key{Backspace} and @key{Delete}.  The default bindings to those two keys "
"depends on the flavor of (X)Emacs you are using."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1615
#, no-wrap
msgid "c-electric-delete"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1616
#, no-wrap
msgid "electric-delete @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1617
#, no-wrap
msgid "c-hungry-delete"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1618
#, no-wrap
msgid "hungry-delete @r{(c-)}"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1619
#, no-wrap
msgid "delete-key-deletes-forward"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1632
msgid ""
"In XEmacs 20.3 and beyond, the @key{Backspace} key is bound to "
"@code{c-electric-backspace} and the @key{Delete} key is bound to "
"@code{c-electric-delete}.  You control the direction it deletes in by "
"setting the variable @code{delete-key-deletes-forward}, a standard XEmacs "
"variable.  When this variable is non-@code{nil}, @code{c-electric-delete} "
"will do forward deletion with @code{c-electric-delete-forward}, otherwise it "
"does backward deletion with @code{c-electric-backspace}.  Similarly, "
"@kbd{C-c @key{Delete}} and @kbd{C-c C-@key{Delete}} are bound to "
"@code{c-hungry-delete} which is controlled in the same way by "
"@code{delete-key-deletes-forward}."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1633
#, no-wrap
msgid "normal-erase-is-backspace-mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1641
msgid ""
"Emacs 21 and later automatically binds @key{Backspace} and @key{Delete} to "
"@kbd{DEL} and @kbd{C-d} according to your environment, and @ccmode{} extends "
"those bindings to @kbd{C-c C-@key{Backspace}} etc.  If you need to change "
"the bindings through @code{normal-erase-is-backspace-mode} then @ccmode{} "
"will also adapt its extended bindings accordingly."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1647
msgid ""
"In earlier (X)Emacs versions, @ccmode{} doesn't bind either @key{Backspace} "
"or @key{Delete} directly.  Only the key codes @kbd{DEL} and @kbd{C-d} are "
"bound, and it's up to the default bindings to map the physical keys to "
"them.  You might need to modify this yourself if the defaults are "
"unsuitable."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1652
msgid ""
"Getting your @key{Backspace} and @key{Delete} keys properly set up can "
"sometimes be tricky.  The information in @ref{DEL Does Not Delete,,,emacs, "
"GNU Emacs Manual}, might be helpful if you're having trouble with this in "
"GNU Emacs."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:1657
#, no-wrap
msgid "Subword Movement and Editing"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1660
#, no-wrap
msgid "nomenclature"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1661
#, no-wrap
msgid "subword"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1668
msgid ""
"In spite of the GNU Coding Standards, it is popular to name a symbol by "
"mixing uppercase and lowercase letters, e.g., @samp{GtkWidget}, "
"@samp{EmacsFrameClass}, or @samp{NSGraphicsContext}.  Here we call these "
"mixed case symbols @dfn{nomenclatures}.  Also, each capitalized (or "
"completely uppercase) part of a nomenclature is called a @dfn{subword}.  "
"Here are some examples:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1672 ../../../../../doc/misc/cc-mode.texi:1676
#, no-wrap
msgid "Nomenclature"
msgstr ""

#. type: iftex
#: ../../../../../doc/misc/cc-mode.texi:1674
msgid "@tab @b{Subwords}"
msgstr ""

#. type: ifnottex
#: ../../../../../doc/misc/cc-mode.texi:1678
msgid "@tab Subwords"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1678
#, no-wrap
msgid "---------------------------------------------------------"
msgstr ""

#. type: samp{#1}
#: ../../../../../doc/misc/cc-mode.texi:1680
#, no-wrap
msgid "GtkWindow"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/cc-mode.texi:1682
msgid "@samp{Gtk} and @samp{Window}"
msgstr ""

#. type: samp{#1}
#: ../../../../../doc/misc/cc-mode.texi:1682
#, no-wrap
msgid "EmacsFrameClass"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/cc-mode.texi:1684
msgid "@samp{Emacs}, @samp{Frame}, and @samp{Class}"
msgstr ""

#. type: samp{#1}
#: ../../../../../doc/misc/cc-mode.texi:1684
#, no-wrap
msgid "NSGraphicsContext"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/cc-mode.texi:1686
msgid "@samp{NS}, @samp{Graphics}, and @samp{Context}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1691
msgid ""
"The subword minor mode replaces the basic word oriented movement and editing "
"commands with variants that recognize subwords in a nomenclature and treat "
"them as separate words:"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1692
#, no-wrap
msgid "c-forward-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1693
#, no-wrap
msgid "forward-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1694
#, no-wrap
msgid "c-backward-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1695
#, no-wrap
msgid "backward-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1696
#, no-wrap
msgid "c-mark-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1697
#, no-wrap
msgid "mark-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1698
#, no-wrap
msgid "c-kill-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1699
#, no-wrap
msgid "kill-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1700
#, no-wrap
msgid "c-backward-kill-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1701
#, no-wrap
msgid "backward-kill-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1702
#, no-wrap
msgid "c-transpose-subwords"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1703
#, no-wrap
msgid "transpose-subwords @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1704
#, no-wrap
msgid "c-capitalize-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1705
#, no-wrap
msgid "capitalize-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1706
#, no-wrap
msgid "c-upcase-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1707
#, no-wrap
msgid "upcase-subword @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1708
#, no-wrap
msgid "c-downcase-subword"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1709
#, no-wrap
msgid "downcase-subword @r{(c-)}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1713
#, no-wrap
msgid "@b{Key}     @tab @b{Word oriented command} @tab @b{Subword oriented command}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1716
#, no-wrap
msgid "Key         @tab Word oriented command     @tab Subword oriented command"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1717
#, no-wrap
msgid "----------------------------------------------------------------------------"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1719
#, no-wrap
msgid "@kbd{M-f}   @tab @code{forward-word}       @tab @code{c-forward-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1720
#, no-wrap
msgid "@kbd{M-b}   @tab @code{backward-word}      @tab @code{c-backward-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1721
#, no-wrap
msgid "@kbd{M-@@}  @tab @code{mark-word}          @tab @code{c-mark-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1722
#, no-wrap
msgid "@kbd{M-d}   @tab @code{kill-word}          @tab @code{c-kill-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1723
#, no-wrap
msgid ""
"@kbd{M-@key{DEL}} @tab @code{backward-kill-word} @tab "
"@code{c-backward-kill-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1724
#, no-wrap
msgid "@kbd{M-t}   @tab @code{transpose-words}    @tab @code{c-transpose-subwords}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1725
#, no-wrap
msgid "@kbd{M-c}   @tab @code{capitalize-word}    @tab @code{c-capitalize-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1726
#, no-wrap
msgid "@kbd{M-u}   @tab @code{upcase-word}        @tab @code{c-upcase-subword}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1727
#, no-wrap
msgid "@kbd{M-l}   @tab @code{downcase-word}      @tab @code{c-downcase-subword}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1734
msgid ""
"Note that if you have changed the key bindings for the word oriented "
"commands in your @file{.emacs} or a similar place, the keys you have "
"configured are also used for the corresponding subword oriented commands."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1738
msgid ""
"Type @kbd{C-c C-w} to toggle subword mode on and off.  To make the mode turn "
"on automatically, put the following code in your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:1742
#, no-wrap
msgid ""
"(add-hook 'c-mode-common-hook\n"
"          (lambda () (subword-mode 1)))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1746
msgid ""
"As a bonus, you can also use @code{subword-mode} in non-@ccmode{} buffers by "
"typing @kbd{M-x subword-mode}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1754
msgid "Here are the various other commands that didn't fit anywhere else:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1756
#, no-wrap
msgid "@kbd{C-c .} (@code{c-set-style})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1757
#, no-wrap
msgid "C-c ."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1758
#, no-wrap
msgid "c-set-style"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1759
#, no-wrap
msgid "set-style @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1761
msgid "Switch to the specified style in the current buffer.  Use like this:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:1764
#, no-wrap
msgid "@kbd{C-c . @var{style-name} @key{RET}}\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1769
msgid ""
"You can use the @key{TAB} in the normal way to do completion on the style "
"name.  Note that all style names are case insensitive, even the ones you "
"define yourself."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1773
msgid ""
"Setting a style in this way does @emph{not} automatically reindent your "
"file.  For commands that you can use to view the effect of your changes, see "
"@ref{Indentation Commands} and @ref{Filling and Breaking}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1775
msgid "For details of the @ccmode{} style system, see @ref{Styles}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1776
#, no-wrap
msgid "@kbd{C-c :} (@code{c-scope-operator})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1777
#, no-wrap
msgid "C-c :"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1778
#, no-wrap
msgid "c-scope-operator"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1779
#, no-wrap
msgid "scope-operator @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1783
msgid ""
"In C++, it is also sometimes desirable to insert the double-colon scope "
"operator without performing the electric behavior of colon insertion.  "
"@kbd{C-c :} does just this."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1784
#, no-wrap
msgid "@kbd{C-c C-z} (@code{c-display-defun-name})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1785
#, no-wrap
msgid "C-c C-z"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1786
#, no-wrap
msgid "c-display-defun-name"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1787
#, no-wrap
msgid "display-defun-name @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1795
msgid ""
"Display the current function name, if any, in the minibuffer.  Additionally, "
"if a prefix argument is given, push the function name to the kill ring.  If "
"there is no current function, @code{c-display-defun-name} does nothing.  In "
"Emacs, you can use this command in the middle of an interactive search if "
"you set the customizable option @code{isearch-allow-scroll} to "
"non-@code{nil}.  @xref{Not Exiting Isearch,,,emacs, GNU Emacs Manual}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1796
#, no-wrap
msgid "@kbd{C-c C-\\} (@code{c-backslash-region})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1797
#, no-wrap
msgid "C-c C-\\"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1798
#, no-wrap
msgid "c-backslash-region"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1799
#, no-wrap
msgid "backslash-region @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1802
msgid ""
"This function inserts and aligns or deletes end-of-line backslashes in the "
"current region.  These are typically used in multi-line macros."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1807
msgid ""
"With no prefix argument, it inserts any missing backslashes and aligns them "
"according to the @code{c-backslash-column} and @code{c-backslash-max-column} "
"variables.  With a prefix argument, it deletes any backslashes."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1811
msgid ""
"The function does not modify blank lines at the start of the region.  If the "
"region ends at the start of a line, it always deletes the backslash (if any) "
"at the end of the previous line."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1813
msgid "To customize the precise workings of this command, @ref{Custom Macros}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1824
msgid ""
"The recommended line breaking function, @code{c-context-line-break} "
"(@pxref{Filling and Breaking}), is especially nice if you edit multiline "
"macros frequently.  When used inside a macro, it automatically inserts and "
"adjusts the mandatory backslash at the end of the line to keep the macro "
"together, and it leaves the point at the right indentation column for the "
"code.  Thus you can write code inside macros almost exactly as you can "
"elsewhere, without having to bother with the trailing backslashes."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:1826
#, no-wrap
msgid "@kbd{C-c C-e} (@code{c-macro-expand})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:1827
#, no-wrap
msgid "C-c C-e"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1828
#, no-wrap
msgid "c-macro-expand"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:1829
#, no-wrap
msgid "macro-expand @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1835
msgid ""
"This command expands C, C++, Objective C or Pike macros in the region, using "
"an appropriate external preprocessor program.  Normally it displays its "
"output in a temporary buffer, but if you give it a prefix arg (with @kbd{C-u "
"C-c C-e}) it will overwrite the original region with the expansion."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1838
msgid ""
"The command does not work in any of the other modes, and the key sequence is "
"not bound in these other modes."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:1843
msgid ""
"@code{c-macro-expand} isn't actually part of @ccmode{}, even though it is "
"bound to a @ccmode{} key sequence.  If you need help setting it up or have "
"other problems with it, you can either read its source code or ask for help "
"in the standard (X)Emacs forums."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1846 ../../../../../doc/misc/cc-mode.texi:2293 ../../../../../doc/misc/cc-mode.texi:2485 ../../../../../doc/misc/cc-mode.texi:2559 ../../../../../doc/misc/cc-mode.texi:2647 ../../../../../doc/misc/cc-mode.texi:3078
#, no-wrap
msgid "Config Basics"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1849
#, no-wrap
msgid "font locking"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1852
#, no-wrap
msgid "Font Lock mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1861
msgid ""
"@ccmode{} provides font locking for its supported languages by supplying "
"patterns for use with Font Lock mode.  This means that you get distinct "
"faces on the various syntactic parts such as comments, strings, keywords and "
"types, which is very helpful in telling them apart at a glance and "
"discovering syntactic errors.  @xref{Font Lock,,, emacs, GNU Emacs Manual}, "
"for ways to enable font locking in @ccmode{} buffers."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1866
msgid ""
"@strong{Please note:} The font locking in AWK mode is currently not "
"integrated with the rest of @ccmode{}.  Only the last section of this "
"chapter, @ref{AWK Mode Font Locking}, applies to AWK@.  The other sections "
"apply to the other languages."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/cc-mode.texi:1874
msgid "Wrong Comment Style::"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1878 ../../../../../doc/misc/cc-mode.texi:1880 ../../../../../doc/misc/cc-mode.texi:1976
#, no-wrap
msgid "Font Locking Preliminaries"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1878 ../../../../../doc/misc/cc-mode.texi:1976 ../../../../../doc/misc/cc-mode.texi:1978 ../../../../../doc/misc/cc-mode.texi:2075
#, no-wrap
msgid "Faces"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1891
msgid ""
"The font locking for most of the @ccmode{} languages were provided directly "
"by the Font Lock package prior to version 5.30 of @ccmode{}.  In the "
"transition to @ccmode{} the patterns have been reworked completely and are "
"applied uniformly across all the languages except AWK mode, just like the "
"indentation rules (although each language still has some peculiarities of "
"its own, of course).  Since the languages previously had completely separate "
"font locking patterns, this means that it's a bit different in most "
"languages now."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1902
msgid ""
"The main goal for the font locking in @ccmode{} is accuracy, to provide a "
"dependable aid in recognizing the various constructs.  Some, like strings "
"and comments, are easy to recognize while others, like declarations and "
"types, can be very tricky.  @ccmode{} can go to great lengths to recognize "
"declarations and casts correctly, especially when the types aren't "
"recognized by standard patterns.  This is a fairly demanding analysis which "
"can be slow on older hardware, and it can therefore be disabled by choosing "
"a lower decoration level with the variable "
"@code{font-lock-maximum-decoration} (@pxref{Font Lock,,, emacs, GNU Emacs "
"Manual})."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1903
#, no-wrap
msgid "font-lock-maximum-decoration"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1906
msgid "The decoration levels are used as follows:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:1912
msgid ""
"Minimal font locking: Fontify only comments, strings and preprocessor "
"directives (in the languages that use cpp)."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:1921
msgid ""
"Fast font locking: In addition to level 1, fontify keywords, simple types "
"and declarations that are easy to recognize.  The variables "
"@code{*-font-lock-extra-types} (where @samp{*} is the name of the language) "
"are used to recognize types (see below).  Documentation comments like "
"Javadoc are fontified according to @code{c-doc-comment-style} (@pxref{Doc "
"Comments})."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:1924
msgid ""
"Use this if you think the font locking is too slow.  It's the closest "
"corresponding level to level 3 in the old font lock patterns."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:1933
msgid ""
"Accurate font locking: Like level 2 but uses a different approach that can "
"recognize types and declarations much more accurately.  The "
"@code{*-font-lock-extra-types} variables are still used, but user defined "
"types are recognized correctly anyway in most cases.  Therefore those "
"variables should be fairly restrictive and not contain patterns that are "
"uncertain."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1934
#, no-wrap
msgid "Lazy Lock mode"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1935
#, no-wrap
msgid "Just-in-time Lock mode"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:1942
msgid ""
"This level is designed for fairly modern hardware and a font lock support "
"mode like Lazy Lock or Just-in-time Lock mode that only fontifies the parts "
"that are actually shown.  Fontifying the whole buffer at once can easily get "
"bothersomely slow even on contemporary hardware. @xref{Font "
"Lock,,,@emacsman{}, @emacsmantitle{}}."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1944
#, no-wrap
msgid "user defined types"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1945
#, no-wrap
msgid "types, user defined"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1949
msgid ""
"Since user defined types are hard to recognize you can provide additional "
"regexps to match those you use:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:1950
#, no-wrap
msgid "c-font-lock-extra-types"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:1951
#, no-wrap
msgid "c++-font-lock-extra-types"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:1952
#, no-wrap
msgid "objc-font-lock-extra-types"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:1953
#, no-wrap
msgid "java-font-lock-extra-types"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:1954
#, no-wrap
msgid "idl-font-lock-extra-types"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:1955
#, no-wrap
msgid "pike-font-lock-extra-types"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:1962
msgid ""
"For each language there's a variable @code{*-font-lock-extra-types}, where "
"@samp{*} stands for the language in question.  It contains a list of regexps "
"that matches identifiers that should be recognized as types, e.g., "
"@samp{\\\\sw+_t} to recognize all identifiers ending with @samp{_t} as is "
"customary in C code.  Each regexp should not match more than a single "
"identifier."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:1968
msgid ""
"The default values contain regexps for many types in standard runtime "
"libraries that are otherwise difficult to recognize, and patterns for "
"standard type naming conventions like the @samp{_t} suffix in C and C++.  "
"Java, Objective-C and Pike have as a convention to start class names with "
"capitals, so there are patterns for that in those languages."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:1972
msgid ""
"Despite the names of these variables, they are not only used for "
"fontification but in other places as well where @ccmode{} needs to recognize "
"types."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:1976 ../../../../../doc/misc/cc-mode.texi:2075 ../../../../../doc/misc/cc-mode.texi:2155
#, no-wrap
msgid "Doc Comments"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:1979
#, no-wrap
msgid "faces"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:1987
msgid ""
"@ccmode{} attempts to use the standard faces for programming languages in "
"accordance with their intended purposes as far as possible.  No extra faces "
"are currently provided, with the exception of a replacement face "
"@code{c-invalid-face} for emacsen that don't provide "
"@code{font-lock-warning-face}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1990 ../../../../../doc/misc/cc-mode.texi:1996
#, no-wrap
msgid "font-lock-comment-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:1992
msgid "Normal comments are fontified in @code{font-lock-comment-face}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1994
#, no-wrap
msgid "font-lock-doc-face"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:1995
#, no-wrap
msgid "font-lock-doc-string-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2001
msgid ""
"Comments that are recognized as documentation (@pxref{Doc Comments})  get "
"@code{font-lock-doc-face} (Emacs) or @code{font-lock-doc-string-face} "
"(XEmacs) if those faces exist.  If they don't then "
"@code{font-lock-comment-face} is used."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/cc-mode.texi:2003 ../../../../../doc/misc/cc-mode.texi:2256
#, no-wrap
msgid "font-lock-string-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2006
msgid "String and character literals are fontified in @code{font-lock-string-face}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2008
#, no-wrap
msgid "font-lock-keyword-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2010
msgid "Keywords are fontified with @code{font-lock-keyword-face}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2012
#, no-wrap
msgid "font-lock-function-name-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2016
msgid ""
"@code{font-lock-function-name-face} is used for function names in "
"declarations and definitions, and classes in those contexts.  It's also used "
"for preprocessor defines with arguments."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/cc-mode.texi:2018 ../../../../../doc/misc/cc-mode.texi:2245
#, no-wrap
msgid "font-lock-variable-name-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2022
msgid ""
"Variables in declarations and definitions, and other identifiers in such "
"variable contexts, get @code{font-lock-variable-name-face}.  It's also used "
"for preprocessor defines without arguments."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2024 ../../../../../doc/misc/cc-mode.texi:2038
#, no-wrap
msgid "font-lock-constant-face"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2025 ../../../../../doc/misc/cc-mode.texi:2039 ../../../../../doc/misc/cc-mode.texi:2054
#, no-wrap
msgid "font-lock-reference-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2031
msgid ""
"Builtin constants are fontified in @code{font-lock-constant-face} if it "
"exists, @code{font-lock-reference-face} otherwise.  As opposed to the "
"preceding two faces, this is used on the names in expressions, and it's not "
"used in declarations, even if there happen to be a @samp{const} in them "
"somewhere."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2033
#, no-wrap
msgid "font-lock-type-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2036
msgid ""
"@code{font-lock-type-face} is put on types (both predefined and user "
"defined) and classes in type contexts."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2042
msgid ""
"Label identifiers get @code{font-lock-constant-face} if it exists, "
"@code{font-lock-reference-face} otherwise."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2046
msgid ""
"Name qualifiers and identifiers for scope constructs are fontified like "
"labels."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2050
msgid "Special markup inside documentation comments are also fontified like labels."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2052
#, no-wrap
msgid "font-lock-preprocessor-face"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2053
#, no-wrap
msgid "font-lock-builtin-face"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2058
msgid ""
"Preprocessor directives get @code{font-lock-preprocessor-face} if it exists "
"(i.e., XEmacs).  In Emacs they get @code{font-lock-builtin-face} or "
"@code{font-lock-reference-face}, for lack of a closer equivalent."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2060
#, no-wrap
msgid "font-lock-warning-face"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2061
#, no-wrap
msgid "c-invalid-face"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2062
#, no-wrap
msgid "invalid-face @r{(c-)}"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2068
msgid ""
"Some kinds of syntactic errors are fontified with "
"@code{font-lock-warning-face} in Emacs.  In older XEmacs versions there's no "
"corresponding standard face, so there a special @code{c-invalid-face} is "
"used, which is defined to stand out sharply by default."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2071
msgid ""
"Note that it's not used for @samp{#error} or @samp{#warning} directives, "
"since those aren't syntactic errors in themselves."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2075 ../../../../../doc/misc/cc-mode.texi:2155 ../../../../../doc/misc/cc-mode.texi:2177
#, no-wrap
msgid "Wrong Comment Style"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:2077
#, no-wrap
msgid "Documentation Comments"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2078
#, no-wrap
msgid "documentation comments"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2085
msgid ""
"There are various tools to supply documentation in the source as specially "
"structured comments, e.g., the standard Javadoc tool in Java.  @ccmode{} "
"provides an extensible mechanism to fontify such comments and the special "
"markup inside them."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2086
#, no-wrap
msgid "c-doc-comment-style"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2087
#, no-wrap
msgid "doc-comment-style @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2090
msgid ""
"This is a style variable that specifies which documentation comment style to "
"recognize, e.g., @code{javadoc} for Javadoc comments."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2094
msgid ""
"The value may also be a list of styles, in which case all of them are "
"recognized simultaneously (presumably with markup cues that don't conflict)."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2100
msgid ""
"The value may also be an association list to specify different comment "
"styles for different languages.  The symbol for the major mode is then "
"looked up in the alist, and the value of that element is interpreted as "
"above if found.  If it isn't found then the symbol @code{other} is looked up "
"and its value is used instead."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2103
msgid ""
"The default value for @code{c-doc-comment-style} is @w{@code{((java-mode "
". javadoc) (pike-mode . autodoc) (c-mode . gtkdoc))}}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2110
msgid ""
"Note that @ccmode{} uses this variable to set other variables that handle "
"fontification etc.  That's done at mode initialization or when you switch to "
"a style which sets this variable.  Thus, if you change it in some other way, "
"e.g., interactively in a CC Mode buffer, you will need to do @kbd{M-x "
"java-mode} (or whatever mode you're currently using) to reinitialize."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2111
#, no-wrap
msgid "c-setup-doc-comment-style"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2112
#, no-wrap
msgid "setup-doc-comment-style @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2117
msgid ""
"Note also that when @ccmode{} starts up, the other variables are modified "
"before the mode hooks are run.  If you change this variable in a mode hook, "
"you'll have to call @code{c-setup-doc-comment-style} afterwards to redo that "
"work."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2121
msgid "@ccmode{} currently provides handing of the following doc comment styles:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2123
#, no-wrap
msgid "javadoc"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2126
msgid "Javadoc comments, the standard tool in Java."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2127
#, no-wrap
msgid "autodoc"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2130
msgid "For Pike autodoc markup, the standard in Pike."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2131
#, no-wrap
msgid "gtkdoc"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2132
#, no-wrap
msgid "GtkDoc markup"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2134
msgid "For GtkDoc markup, widely used in the Gnome community."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2139
msgid ""
"The above is by no means complete.  If you'd like to see support for other "
"doc comment styles, please let us know (@pxref{Mailing Lists and Bug "
"Reports})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2150
msgid ""
"You can also write your own doc comment fontification support to use with "
"@code{c-doc-comment-style}: Supply a variable or function "
"@code{*-font-lock-keywords} where @samp{*} is the name you want to use in "
"@code{c-doc-comment-style}.  If it's a variable, it's prepended to "
"@code{font-lock-keywords}.  If it's a function, it's called at mode "
"initialization and the result is prepended.  For an example, see "
"@code{javadoc-font-lock-keywords} in @file{cc-fonts.el}.  It is even "
"possible, to a limited extent, to fontify constructs inside a doc comment "
"with other faces.  For an example, see pike autodoc comment style towards "
"the end of @file{cc-fonts-el}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2153
msgid ""
"If you add support for another doc comment style, please consider "
"contributing it: send a note to @email{bug-cc-mode@@gnu.org}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2155 ../../../../../doc/misc/cc-mode.texi:2177 ../../../../../doc/misc/cc-mode.texi:2232
#, no-wrap
msgid "Misc Font Locking"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:2157
#, no-wrap
msgid "Marking ``Wrong'' style comments"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2164
msgid ""
"Most languages supported by @ccmode{} have two styles of comments, namely "
"block comments and line comments.  Your project may have such a strong "
"preference for one of them, that you wish ``wrong'' style comments to be "
"clearly marked."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2168
msgid ""
"You can get @ccmode{} to do this by setting the default comment style, if "
"necessary, (@pxref{Minor Modes}) and setting the customizable option "
"@code{c-mark-wrong-style-of-comment} to non-@code{nil}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2169
#, no-wrap
msgid "c-mark-wrong-style-of-comment"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2170
#, no-wrap
msgid "mark-wrong-style-of-comment (c-)"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2174
msgid ""
"When this customizable option is non-@code{nil}, comment delimiters which "
"aren't of the default style will be fontified with "
"@code{font-lock-warning-face}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:2179
#, no-wrap
msgid "Miscellaneous Font Locking"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2187
msgid ""
"In some languages, particularly in C++, there are constructs which are "
"syntactically ambiguous---they could be either declarations or expressions, "
"and @ccmode{} cannot tell for sure which.  Often such a construct is one of "
"the operators @samp{*} or @samp{&} surrounded by two identifiers."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2191
msgid ""
"Experience shows that very often when such a construct is a declaration it "
"will be written with the operator touching exactly one of the identifiers, "
"like:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2194
#, no-wrap
msgid "foo *bar\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2196 ../../../../../doc/misc/cc-mode.texi:2219
msgid "or"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2198
#, no-wrap
msgid "foo& bar\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2202
msgid ""
".  Whether such code is fontified depends on the setting of "
"@code{c-asymmetry-fontification-flag}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2203
#, no-wrap
msgid "c-asymmetry-fontification-flag"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2204
#, no-wrap
msgid "asymmetry-fontification-flag @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2209
msgid ""
"When @code{c-asymmetry-fontification-flag} is non-nil (which it is by "
"default), code like the above, with white space either before or after the "
"operator, but not both, is fontified as a declaration.  When the variable is "
"nil, such a construct gets the default face."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2214
msgid ""
"When the construct is an expression there will often be white space both "
"before and after the operator or there will be no white space around it at "
"all, like:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2217
#, no-wrap
msgid "foo * bar\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2221
#, no-wrap
msgid "foo&bar\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2223
msgid "."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2226
msgid ""
"Such code is not fontified as a declaration.  (Typically, the identifiers "
"don't get a non-default face.)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2230
msgid ""
"For clarity's sake, we emphasize that the ``asymmetry'' rule in this section "
"only applies when CC Mode cannot disambiguate a construct in any other way."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2240
msgid ""
"The general appearance of font-locking in AWK mode is much like in any other "
"programming mode.  @xref{Faces for Font Lock,,,elisp, GNU Emacs Lisp "
"Reference Manual}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2243
msgid ""
"The following faces are, however, used in a non-standard fashion in AWK "
"mode:"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2250
msgid ""
"This face was intended for variable declarations.  Since variables are not "
"declared in AWK, this face is used instead for AWK system variables (such as "
"@code{NF}) and ``Special File Names'' (such as @code{\"/dev/stderr\"})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2251
#, no-wrap
msgid ""
"@code{font-lock-builtin-face} (Emacs)/@code{font-lock-preprocessor-face} "
"(XEmacs)"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2255
msgid ""
"This face is normally used for preprocessor directives in @ccmode{}.  There "
"are no such things in AWK, so this face is used instead for standard "
"functions (such as @code{match})."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2260
msgid ""
"As well as being used for strings, including localizable strings, (delimited "
"by @samp{\"} and @samp{_\"}), this face is also used for AWK regular "
"expressions (delimited by @samp{/})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2261
#, no-wrap
msgid "@code{font-lock-warning-face} (Emacs)/@code{c-invalid-face} (XEmacs)"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2264
msgid "This face highlights the following syntactically invalid AWK constructs:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2272
msgid ""
"An unterminated string or regular expression.  Here the opening delimiter "
"(@samp{\"} or @samp{/} or @samp{_\"}) is displayed in "
"@code{font-lock-warning-face}.  This is most noticeable when typing in a new "
"string/regular expression into a buffer, when the warning-face serves as a "
"continual reminder to terminate the construct."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2277
msgid ""
"AWK mode fontifies unterminated strings/regular expressions differently from "
"other modes: Only the text up to the end of the line is fontified as a "
"string (escaped newlines being handled correctly), rather than the text up "
"to the next string quote."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2284
msgid ""
"A space between the function name and opening parenthesis when calling a "
"user function.  The last character of the function name and the opening "
"parenthesis are highlighted.  This font-locking rule will spuriously "
"highlight a valid concatenation expression where an identifier precedes a "
"parenthesized expression.  Unfortunately."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2288
msgid ""
"Whitespace following the @samp{\\} in what otherwise looks like an escaped "
"newline.  The @samp{\\} is highlighted."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2293 ../../../../../doc/misc/cc-mode.texi:3078 ../../../../../doc/misc/cc-mode.texi:3297
#, no-wrap
msgid "Custom Filling and Breaking"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2298
#, no-wrap
msgid "Emacs Initialization File"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2299
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2308
msgid ""
"You configure @ccmode{} by setting Lisp variables and calling (and perhaps "
"writing) Lisp functions@footnote{DON'T PANIC!!! This isn't difficult.}, "
"which is usually done by adding code to an Emacs initialization file.  This "
"file might be @file{site-start.el} or @file{.emacs} or @file{init.el} or "
"@file{default.el} or perhaps some other file.  @xref{Init "
"File,,,@emacsman{}, @emacsmantitle{}}.  For the sake of conciseness, we just "
"call this file ``your @file{.emacs}'' throughout the rest of the manual."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2315
msgid ""
"Several of these variables (currently 16), are known collectively as "
"@dfn{style variables}.  @ccmode{} provides a special mechanism, known as "
"@dfn{styles} to make it easier to set these variables as a group, to "
"``inherit'' settings from one style into another, and so on.  Style "
"variables remain ordinary Lisp variables, whose values can be read and "
"changed independently of the style system.  @xref{Style Variables}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2320
msgid ""
"There are several ways you can write the code, depending on the precise "
"effect you want---they are described further down on this page.  If you are "
"new to @ccmode{}, we suggest you begin with the simplest method, ``Top-level "
"commands or the customization interface''."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2324
msgid ""
"If you make conflicting settings in several of these ways, the way that "
"takes precedence is the one that appears latest in this list:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2328 ../../../../../doc/misc/cc-mode.texi:2339
#, no-wrap
msgid "Style"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2329 ../../../../../doc/misc/cc-mode.texi:2340
#, no-wrap
msgid ""
"File Style@footnote{In earlier versions of @ccmode{}, a File Style setting "
"took precedence over any other setting apart from a File Local Variable "
"setting.}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2330 ../../../../../doc/misc/cc-mode.texi:2341
#, no-wrap
msgid "Top-level command or ``customization interface''"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2331 ../../../../../doc/misc/cc-mode.texi:2342
#, no-wrap
msgid "Hook"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2332 ../../../../../doc/misc/cc-mode.texi:2343 ../../../../../doc/misc/cc-mode.texi:2431
#, no-wrap
msgid "File Local Variable setting"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2350
msgid ""
"Here is a summary of the different ways of writing your configuration "
"settings:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2352
#, no-wrap
msgid "Top-level commands or the ``customization interface''"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2361
msgid ""
"Most simply, you can write @code{setq} and similar commands at the top level "
"of your @file{.emacs} file.  When you load a @ccmode{} buffer, it "
"initializes its configuration from these global values (at least, for those "
"settings you have given values to), so it makes sense to have these "
"@code{setq} commands run @emph{before} @ccmode{} is first initialized---in "
"particular, before any call to @code{desktop-read} (@pxref{Saving Emacs "
"Sessions,,, emacs, GNU Emacs Manual}).  For example, you might set "
"c-basic-offset thus:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2364
#, no-wrap
msgid "(setq c-basic-offset 4)\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2375
msgid ""
"You can use the more user friendly Customization interface instead, but this "
"manual does not cover in detail how that works.  To do this, start by typing "
"@kbd{M-x customize-group @key{RET} c @key{RET}}.  @xref{Easy "
"Customization,,,@emacsman{}, @emacsmantitle{}}.  Emacs normally writes the "
"customizations at the end of your @file{.emacs} file.  If you use "
"@code{desktop-read}, you should edit your @file{.emacs} to place the call to "
"@code{desktop-read} @emph{after} the customizations."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2379
msgid ""
"The first initialization of @ccmode{} puts a snapshot of the configuration "
"settings into the special style @code{user}.  @xref{Built-in Styles}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2385
msgid ""
"For basic use of Emacs, either of these ways of configuring is adequate.  "
"However, the settings are then the same in all @ccmode{} buffers and it can "
"be clumsy to communicate them between programmers.  For more flexibility, "
"you'll want to use one (or both) of @ccmode{}'s more sophisticated "
"facilities, hooks and styles."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:2386 ../../../../../doc/misc/cc-mode.texi:2487
#, no-wrap
msgid "Hooks"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2397
msgid ""
"An Emacs @dfn{hook} is a place to put Lisp functions that you want Emacs to "
"execute later in specific circumstances.  @xref{Hooks,,,@lispref{}, "
"@lispreftitle{}}.  @ccmode{} supplies a main hook and a language-specific "
"hook for each language it supports; any functions you put onto these hooks "
"get executed as the last part of a buffer's initialization.  Typically you "
"put most of your customization within the main hook, and use the "
"language-specific hooks to vary the customization settings between language "
"modes.  For example, if you wanted different (non-standard) values of "
"@code{c-basic-offset} in C Mode and Java Mode buffers, you could do it like "
"this:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:2403
#, no-wrap
msgid ""
"(defun my-c-mode-hook ()\n"
"  (setq c-basic-offset 3))\n"
"(add-hook 'c-mode-hook 'my-c-mode-hook)\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:2407
#, no-wrap
msgid ""
"(defun my-java-mode-hook ()\n"
"  (setq c-basic-offset 6))\n"
"(add-hook 'java-mode-hook 'my-java-mode-hook)\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2411
msgid "See @ref{CC Hooks} for more details on the use of @ccmode{} hooks."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2421
msgid ""
"A @ccmode{} @dfn{style} is a coherent collection of customizations with a "
"name.  At any time, exactly one style is active in each @ccmode{} buffer, "
"either the one you have selected or a default.  @ccmode{} is delivered with "
"several existing styles.  Additionally, you can create your own styles, "
"possibly based on these existing styles.  If you worked in a programming "
"team called the ``Free Group'', which had its own coding standards, you "
"might well have this in your @file{.emacs} file:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2426
#, no-wrap
msgid ""
"(setq c-default-style '((java-mode . \"java\")\n"
"                        (awk-mode . \"awk\")\n"
"                        (other . \"free-group-style\")))\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2430
msgid ""
"See @ref{Styles} for fuller details on using @ccmode{} styles and how to "
"create them."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2436
msgid ""
"A @dfn{file local variable setting} is a setting which applies to an "
"individual source file.  You put this in a @dfn{local variables list}, a "
"special block at the end of the source file (@pxref{Specifying File "
"Variables,,,@emacsman{}})."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2443
msgid ""
"A @dfn{file style} is a rarely used variant of the ``style'' mechanism "
"described above, which applies to an individual source file.  @xref{File "
"Styles}.  You use this by setting certain special variables in a local "
"variables list (@pxref{Specifying File Variables,,,@emacsman{}})."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2444
#, no-wrap
msgid "Hooks with Styles"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2450
msgid ""
"For ultimate flexibility, you can use hooks and styles together.  For "
"example, if your team were developing a product which required a Linux "
"driver, you'd probably want to use the ``linux'' style for the driver, and "
"your own team's style for the rest of the code.  You could achieve this with "
"code like this in your @file{.emacs}:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:2460
#, no-wrap
msgid ""
"(defun my-c-mode-hook ()\n"
"  (c-set-style\n"
"   (if (and (buffer-file-name)\n"
"            (string-match \"/usr/src/linux\" (buffer-file-name)))\n"
"       \"linux\"\n"
"     \"free-group-style\")))\n"
"(add-hook 'c-mode-hook 'my-c-mode-hook)\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2468
msgid ""
"In a programming team, a hook is also a good place for each member to put "
"his own personal preferences.  For example, you might be the only person in "
"your team who likes Auto-newline minor mode.  You could have it enabled by "
"default by placing the following in your @file{.emacs}:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:2474
#, no-wrap
msgid ""
"(defun my-turn-on-auto-newline ()\n"
"  (c-toggle-auto-newline 1))\n"
"(add-hook 'c-mode-common-hook 'my-turn-on-auto-newline)\n"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2485 ../../../../../doc/misc/cc-mode.texi:2559
#, no-wrap
msgid "CC Hooks"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2485 ../../../../../doc/misc/cc-mode.texi:2559 ../../../../../doc/misc/cc-mode.texi:2561 ../../../../../doc/misc/cc-mode.texi:2647
#, no-wrap
msgid "Style Variables"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2488
#, no-wrap
msgid "mode hooks"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2508
msgid ""
"@ccmode{} provides several hooks that you can use to customize the mode for "
"your coding style.  The main hook is @code{c-mode-common-hook}; typically, "
"you'll put the bulk of your customizations here.  In addition, each language "
"mode has its own hook, allowing you to fine tune your settings individually "
"for the different @ccmode{} languages, and there is a package initialization "
"hook.  Finally, there is @code{c-special-indent-hook}, which enables you to "
"solve anomalous indentation problems.  It is described in @ref{Other "
"Indentation}, not here.  All these hooks adhere to the standard Emacs "
"conventions."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2514
msgid ""
"When you open a buffer, @ccmode{} first initializes it with the currently "
"active style (@pxref{Styles}).  Then it calls @code{c-mode-common-hook}, and "
"finally it calls the language-specific hook.  Thus, any style settings done "
"in these hooks will override those set by @code{c-default-style}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2515
#, no-wrap
msgid "c-initialization-hook"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2516
#, no-wrap
msgid "initialization-hook @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2520
msgid ""
"Hook run only once per Emacs session, when @ccmode{} is initialized.  This "
"is a good place to change key bindings (or add new ones) in any of the "
"@ccmode{} key maps.  @xref{Sample Init File}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2522
#, no-wrap
msgid "c-mode-common-hook"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2523
#, no-wrap
msgid "mode-common-hook @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2526
msgid ""
"Common hook across all languages.  It's run immediately before the language "
"specific hook."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2528
#, no-wrap
msgid "c-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2529
#, no-wrap
msgid "c++-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2530
#, no-wrap
msgid "objc-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2531
#, no-wrap
msgid "java-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2532
#, no-wrap
msgid "idl-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2533
#, no-wrap
msgid "pike-mode-hook"
msgstr ""

#. type: defvarx
#: ../../../../../doc/misc/cc-mode.texi:2534
#, no-wrap
msgid "awk-mode-hook"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2537
msgid ""
"The language specific mode hooks.  The appropriate one is run as the last "
"thing when you enter that language mode."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2543
msgid ""
"Although these hooks are variables defined in @ccmode{}, you can give them "
"values before @ccmode{}'s code is loaded---indeed, this is the only way to "
"use @code{c-initialization-hook}.  Their values aren't overwritten when "
"@ccmode{} gets loaded."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2549
msgid ""
"Here's a simplified example of what you can add to your @file{.emacs} file "
"to do things whenever any @ccmode{} language is edited.  See the Emacs "
"manuals for more information on customizing Emacs via hooks.  @xref{Sample "
"Init File}, for a more complete sample @file{.emacs} file."
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2556
#, no-wrap
msgid ""
"(defun my-c-mode-common-hook ()\n"
"  ;; my customizations for all of c-mode and related modes\n"
"  (no-case-fold-search)\n"
"  )\n"
"(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2562 ../../../../../doc/misc/cc-mode.texi:2650
#, no-wrap
msgid "styles"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2565
#, no-wrap
msgid "style variables"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2571
msgid ""
"The variables that @ccmode{}'s style system control are called @dfn{style "
"variables}.  Note that style variables are ordinary Lisp variables, which "
"the style system initializes; you can change their values at any time (e.g., "
"in a hook function).  The style system can also set other variables, to some "
"extent.  @xref{Styles}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2573
msgid "@dfn{Style variables} are handled specially in several ways:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2580
msgid ""
"Style variables are by default buffer-local variables.  However, they can "
"instead be made global by setting @code{c-style-variables-are-local-p} to "
"@code{nil} before @ccmode{} is initialized."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2582
#, no-wrap
msgid "c-old-style-variable-behavior"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2583
#, no-wrap
msgid "old-style-variable-behavior @r{(c-)}"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2599
msgid ""
"The default global binding of any style variable (with two exceptions - see "
"below) is the special symbol @code{set-from-style}.  When the style system "
"initializes a buffer-local copy of a style variable for a @ccmode{} buffer, "
"if its global binding is still that symbol then it will be set from the "
"current style.  Otherwise it will retain its global default@footnote{This is "
"a big change from versions of @ccmode{} earlier than 5.26, where such "
"settings would get overridden by the style system unless special precautions "
"were taken.  That was changed since it was counterintuitive and confusing, "
"especially to novice users.  If your configuration depends on the old "
"overriding behavior, you can set the variable "
"@code{c-old-style-variable-behavior} to non-@code{nil}.}.  This "
"``otherwise'' happens, for example, when you've set the variable with "
"@code{setq} at the top level of your @file{.emacs} (@pxref{Config Basics})."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2611
msgid ""
"The style variable @code{c-offsets-alist} (@pxref{c-offsets-alist}) is an "
"association list with an element for each syntactic symbol.  It's handled a "
"little differently from the other style variables.  Its default global "
"binding is the empty list @code{nil}, rather than @code{set-from-style}.  "
"Before the style system is initialized, you can add individual elements to "
"@code{c-offsets-alist} by calling @code{c-set-offset} "
"(@pxref{c-offsets-alist}) just like you would set other style variables with "
"@code{setq}.  Those elements will then prevail when the style system later "
"initializes a buffer-local copy of @code{c-offsets-alist}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2619
msgid ""
"The style variable @code{c-special-indent-hook} is also handled in a special "
"way.  Styles can only add functions to this hook, not remove them, so any "
"global settings you put on it are always preserved@footnote{This did not "
"change in version 5.26.}.  The value you give this variable in a style "
"definition can be either a function or a list of functions."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:2624
msgid ""
"The global bindings of the style variables get captured in the special "
"@code{user} style when the style system is first initialized.  "
"@xref{Built-in Styles}, for details."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2645
msgid ""
"The style variables are:@* @code{c-indent-comment-alist}, "
"@code{c-indent-comments-syntactically-p} (@pxref{Indentation Commands});@* "
"@code{c-doc-comment-style} (@pxref{Doc Comments});@* "
"@code{c-block-comment-prefix}, @code{c-comment-prefix-regexp} (@pxref{Custom "
"Filling and Breaking});@* @code{c-hanging-braces-alist} (@pxref{Hanging "
"Braces});@* @code{c-hanging-colons-alist} (@pxref{Hanging Colons});@* "
"@code{c-hanging-semi&comma-criteria} (@pxref{Hanging Semicolons and "
"Commas});@* @code{c-cleanup-list} (@pxref{Clean-ups});@* "
"@code{c-basic-offset} (@pxref{Customizing Indentation});@* "
"@code{c-offsets-alist} (@pxref{c-offsets-alist});@* "
"@code{c-comment-only-line-offset} (@pxref{Comment Line-Up});@* "
"@code{c-special-indent-hook}, @code{c-label-minimum-indentation} "
"(@pxref{Other Indentation});@* @code{c-backslash-column}, "
"@code{c-backslash-max-column} (@pxref{Custom Macros})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2657
msgid ""
"By @dfn{style} we mean the layout of the code---things like how many columns "
"to indent a block of code, whether an opening brace gets indented to the "
"level of the code it encloses, or of the construct that introduces it, or "
"``hangs'' at the end of a line."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2668
msgid ""
"Most people only need to edit code formatted in just a few well-defined and "
"consistent styles.  For example, their organization might impose a "
"``blessed'' style that all its programmers must conform to.  Similarly, "
"people who work on GNU software will have to use the GNU coding style.  Some "
"shops are more lenient, allowing a variety of coding styles, and as "
"programmers come and go, there could be a number of styles in use.  For this "
"reason, @ccmode{} makes it convenient for you to set up logical groupings of "
"customizations called @dfn{styles}, associate a single name for any "
"particular style, and pretty easily start editing new or existing code using "
"these styles."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2672
msgid ""
"As an alternative to writing a style definition yourself, you can have "
"@ccmode{} @dfn{guess} (at least part of) your style by looking at an already "
"formatted piece of your code, @ref{Guessing the Style}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2682 ../../../../../doc/misc/cc-mode.texi:2684 ../../../../../doc/misc/cc-mode.texi:2760
#, no-wrap
msgid "Built-in Styles"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2682 ../../../../../doc/misc/cc-mode.texi:2760 ../../../../../doc/misc/cc-mode.texi:2762 ../../../../../doc/misc/cc-mode.texi:2818
#, no-wrap
msgid "Choosing a Style"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2685
#, no-wrap
msgid "styles, built-in"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2690
msgid ""
"If you're lucky, one of @ccmode{}'s built-in styles might be just what "
"you're looking for.  These are:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2692
#, no-wrap
msgid "gnu"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2693
#, no-wrap
msgid "GNU style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2696
msgid ""
"Coding style blessed by the Free Software Foundation for C code in GNU "
"programs."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2697
#, no-wrap
msgid "k&r"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2698
#, no-wrap
msgid "K&R style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2702
msgid ""
"The classic Kernighan and Ritchie style for C code. If you're looking for "
"the style used in the 2nd edition of their book ``The C Programming "
"Language'', then check out the @code{stroustrup} style."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2703
#, no-wrap
msgid "bsd"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2704
#, no-wrap
msgid "BSD style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2706
msgid "Also known as ``Allman style'' after Eric Allman."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2707
#, no-wrap
msgid "whitesmith"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2708
#, no-wrap
msgid "Whitesmith style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2711
msgid ""
"Popularized by the examples that came with Whitesmiths C, an early "
"commercial C compiler."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2712
#, no-wrap
msgid "stroustrup"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2713
#, no-wrap
msgid "Stroustrup style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2715
msgid "The classic Stroustrup style for C++ code."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2716
#, no-wrap
msgid "ellemtel"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2717
#, no-wrap
msgid "Ellemtel style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2724
msgid ""
"Popular C++ coding standards as defined by ``Programming in C++, Rules and "
"Recommendations,'' Erik Nyquist and Mats Henricson, Ellemtel@footnote{This "
"document is available at "
"@uref{https://www.doc.ic.ac.uk/lab/cplus/c++.rules/} among other places.}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2725
#, no-wrap
msgid "linux"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2726
#, no-wrap
msgid "Linux style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2728
msgid "C coding standard for Linux (the kernel)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2729
#, no-wrap
msgid "python"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2730
#, no-wrap
msgid "Python style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2734
msgid ""
"C coding standard for Python extension modules@footnote{Python is a high "
"level scripting language with a C/C++ foreign function interface.  For more "
"information, see @uref{https://www.python.org/}.}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2735
#, no-wrap
msgid "java"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2736
#, no-wrap
msgid "Java style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2740
msgid ""
"The style for editing Java code.  Note that the default value for "
"@code{c-default-style} installs this style when you enter @code{java-mode}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2741
#, no-wrap
msgid "awk"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2742
#, no-wrap
msgid "AWK style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2746
msgid ""
"The style for editing AWK code.  Note that the default value for "
"@code{c-default-style} installs this style when you enter @code{awk-mode}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2747
#, no-wrap
msgid "user"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2748
#, no-wrap
msgid "User style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2756
msgid ""
"This is a special style created by you.  It consists of the factory defaults "
"for all the style variables as modified by the customizations you do either "
"with the Customization interface or by writing @code{setq}s and "
"@code{c-set-offset}s at the top level of your @file{.emacs} file "
"(@pxref{Config Basics}).  The style system creates this style as part of its "
"initialization and doesn't modify it afterwards."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2760 ../../../../../doc/misc/cc-mode.texi:2818 ../../../../../doc/misc/cc-mode.texi:2906
#, no-wrap
msgid "Adding Styles"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2768
msgid ""
"When you create a new buffer, its style will be set from "
"@code{c-default-style}.  The factory default is the style @code{gnu}, except "
"in Java and AWK modes where it's @code{java} and @code{awk}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2773
msgid ""
"Remember that if you set a style variable with the Customization interface "
"or at the top level of your @file{.emacs} file before the style system is "
"initialized (@pxref{Config Basics}), this setting will override the one that "
"the style system would have given the variable."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2777
msgid ""
"To set a buffer's style interactively, use the command @kbd{C-c .} "
"(@pxref{Other Commands}).  To set it from a file's local variable list, "
"@ref{File Styles}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2778
#, no-wrap
msgid "c-default-style"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2779
#, no-wrap
msgid "default-style @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2783
msgid ""
"This variable specifies which style to install by default in new buffers.  "
"It takes either a style name string, or an association list of major mode "
"symbols to style names:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:2788
msgid ""
"When @code{c-default-style} is a string, it must be an existing style name.  "
"This style is then used for all modes."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:2792
msgid ""
"When @code{c-default-style} is an association list, the mode language is "
"looked up to find a style name string."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:2797
msgid ""
"If @code{c-default-style} is an association list where the mode language "
"mode isn't found then the special symbol @samp{other} is looked up.  If it's "
"found then the associated style is used."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:2800
msgid "If @samp{other} is not found then the @samp{gnu} style is used."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2806
msgid ""
"In all cases, the style described in @code{c-default-style} is installed "
"@emph{before} the language hooks are run, so you can always override this "
"setting by including an explicit call to @code{c-set-style} in your language "
"mode hook, or in @code{c-mode-common-hook}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2809
msgid ""
"The standard value of @code{c-default-style} is @w{@code{((java-mode "
". \"java\") (awk-mode . \"awk\") (other . \"gnu\"))}}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2811
#, no-wrap
msgid "c-indentation-style"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2812
#, no-wrap
msgid "indentation-style @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2815
msgid "This variable always contains the buffer's current style name, as a string."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2818 ../../../../../doc/misc/cc-mode.texi:2906 ../../../../../doc/misc/cc-mode.texi:2908 ../../../../../doc/misc/cc-mode.texi:3029
#, no-wrap
msgid "Guessing the Style"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:2820
#, no-wrap
msgid "Adding and Amending Styles"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2829
msgid ""
"If none of the built-in styles is appropriate, you'll probably want to "
"create a new @dfn{style definition}, possibly based on an existing style.  "
"To do this, put the new style's settings into a list with the following "
"format; the list can then be passed as an argument to the function "
"@code{c-add-style}.  You can see an example of a style definition in "
"@ref{Sample Init File}."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:2830
#, no-wrap
msgid "style definition"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:2833
#, no-wrap
msgid "Structure of a Style Definition List"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2835
msgid "([@var{base-style}] [(@var{variable} . @var{value}) @dots{}])"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2844
msgid ""
"Optional @var{base-style}, if present, must be a string which is the name of "
"the @dfn{base style} from which this style inherits.  At most one "
"@var{base-style} is allowed in a style definition.  If @var{base-style} is "
"not specified, the style inherits from the table of factory default "
"values@footnote{This table is stored internally in the variable "
"c-fallback-style.} instead.  All styles eventually inherit from this "
"internal table.  Style loops generate errors.  The list of pre-existing "
"styles can be seen in @ref{Built-in Styles}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2855
msgid ""
"The dotted pairs (@var{variable} . @var{value}) each consist of a variable "
"and the value it is to be set to when the style is later "
"activated.@footnote{Note that if the variable has been given a value by the "
"Customization interface or a @code{setq} at the top level of your "
"@file{.emacs}, this value will override the one the style system tries to "
"give it. @xref{Config Basics}.} The variable can be either a @ccmode{} style "
"variable or an arbitrary Emacs variable.  In the latter case, it is "
"@emph{not} made buffer-local by the @ccmode{} style system."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2857
msgid "Two variables are treated specially in the dotted pair list:"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:2859 ../../../../../doc/misc/cc-mode.texi:4192 ../../../../../doc/misc/cc-mode.texi:5366 ../../../../../doc/misc/cc-mode.texi:5368 ../../../../../doc/misc/cc-mode.texi:5376 ../../../../../doc/misc/cc-mode.texi:5535
#, no-wrap
msgid "c-offsets-alist"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2861
msgid "The value is in turn a list of dotted pairs of the form"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:2864
#, no-wrap
msgid "(@r{@var{syntactic-symbol}} . @r{@var{offset}})\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2869
msgid ""
"as described in @ref{c-offsets-alist}.  These are passed to "
"@code{c-set-offset} so there is no need to set every syntactic symbol in "
"your style, only those that are different from the inherited style."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2870 ../../../../../doc/misc/cc-mode.texi:6898
#, no-wrap
msgid "c-special-indent-hook"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2874
msgid ""
"The value is added to @code{c-special-indent-hook} using @code{add-hook}, so "
"any functions already on it are kept.  If the value is a list, each element "
"of the list is added with @code{add-hook}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2880
msgid ""
"Styles are kept in the @code{c-style-alist} variable, but you should never "
"modify this variable directly.  Instead, @ccmode{} provides the function "
"@code{c-add-style} for this purpose."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:2881
#, no-wrap
msgid "c-add-style stylename description &optional set-p"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2882
#, no-wrap
msgid "add-style @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:2889
msgid ""
"Add or update a style called @var{stylename}, a string.  @var{description} "
"is the new style definition in the form described above.  If @var{stylename} "
"already exists in @code{c-style-alist} then it is replaced by "
"@var{description}.  (Note, this replacement is total.  The old style is "
"@emph{not} merged into the new one.)  Otherwise, a new style is added."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:2894
msgid ""
"If the optional @var{set-p} is non-@code{nil} then the new style is applied "
"to the current buffer as well.  The use of this facility is deprecated and "
"it might be removed from @ccmode{} in a future release.  You should use "
"@code{c-set-style} instead."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:2897
msgid ""
"The sample @file{.emacs} file provides a concrete example of how a new style "
"can be added and automatically set.  @xref{Sample Init File}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2899
#, no-wrap
msgid "c-style-alist"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2900
#, no-wrap
msgid "style-alist @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:2903
msgid ""
"This is the variable that holds the definitions for the styles.  It should "
"not be changed directly; use @code{c-add-style} instead."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2919
msgid ""
"Instead of specifying a style, you can get @ccmode{} to @dfn{guess} your "
"style by examining an already formatted code buffer.  @ccmode{} then "
"determines the ``most frequent'' offset (@pxref{c-offsets-alist})  for each "
"of the syntactic symbols (@pxref{Indentation Engine Basics})  encountered in "
"the buffer, and the ``most frequent'' value of c-basic-offset "
"(@pxref{Customizing Indentation}), then merges the current style with these "
"``guesses'' to form a new style.  This combined style is known as the "
"@dfn{guessed style}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2923
msgid ""
"To do this, call @code{c-guess} (or one of the other 5 guessing commands) on "
"your sample buffer.  The analysis of your code may take some time."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:2928
msgid ""
"You can then set the guessed style in any @ccmode{} buffer with "
"@code{c-guess-install}.  You can display the style with @code{c-guess-view}, "
"and preserve it by copying it into your @file{.emacs} for future use, "
"preferably after editing it."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2930
#, no-wrap
msgid "M-x c-guess-no-install"
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2931
#, no-wrap
msgid "M-x c-guess-buffer-no-install"
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2932
#, no-wrap
msgid "M-x c-guess-region-no-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2933
#, no-wrap
msgid "c-guess-no-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2934
#, no-wrap
msgid "c-guess-buffer-no-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2935
#, no-wrap
msgid "c-guess-region-no-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2936
#, no-wrap
msgid "guess-no-install @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2937
#, no-wrap
msgid "guess-buffer-no-install @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2938
#, no-wrap
msgid "guess-region-no-install @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2941
msgid ""
"These commands analyze a part of the current buffer and guess the style from "
"it."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2946
msgid ""
"The part of the buffer examined is either the region "
"(@code{c-guess-region-no-install}), the entire buffer "
"(@code{c-guess-buffer-no-install}), or the first @code{c-guess-region-max} "
"bytes (@code{c-guess-no-install})."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2950 ../../../../../doc/misc/cc-mode.texi:2974
msgid ""
"Each of these commands can be given an optional prefix argument.  This "
"instructs @ccmode{} to combine the new guesses with the current guesses "
"before forming the guessed style."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2953
#, no-wrap
msgid "M-x c-guess"
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2954
#, no-wrap
msgid "M-x c-guess-buffer"
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2955
#, no-wrap
msgid "M-x c-guess-region"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2956
#, no-wrap
msgid "c-guess"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2957
#, no-wrap
msgid "c-guess-buffer"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2958
#, no-wrap
msgid "c-guess-region"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2959
#, no-wrap
msgid "guess @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2960
#, no-wrap
msgid "guess-buffer @r{(c-)}"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2961
#, no-wrap
msgid "guess-region @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2966
msgid ""
"These commands analyze a part of the current buffer, guess the style from "
"it, then install the guessed style on the buffer.  The guessed style is "
"given a name based on the buffer's absolute file name, and you can then set "
"this style on any @ccmode{} buffer with @kbd{C-c .}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:2970
msgid ""
"The part of the buffer examined is either the region "
"(@code{c-guess-region}), the entire buffer (@code{c-guess-buffer}), or the "
"first @code{c-guess-region-max} bytes (@code{c-guess})."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2976
#, no-wrap
msgid "c-guess-region-max"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2977
#, no-wrap
msgid "guess-region-max @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2981
msgid ""
"This variable, default 50000, is the size in bytes of the buffer portion "
"examined by c-guess and c-guess-no-install.  If set to @code{nil}, the "
"entire buffer is examined."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2983
#, no-wrap
msgid "c-guess-offset-threshold"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:2984
#, no-wrap
msgid "guess-offset-threshold @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:2989
msgid ""
"This variable, default 10, is the maximum offset, either outwards or "
"inwards, which will be taken into account by the analysis process.  Any "
"offset bigger than this will be ignored.  For no limit, set this variable to "
"a large number."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:2992
#, no-wrap
msgid "M-x c-guess-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2993
#, no-wrap
msgid "c-guess-install"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:2994
#, no-wrap
msgid "guess-install @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3000
msgid ""
"Set the current buffer's style to the guessed style.  This prompts you to "
"enter an optional new style name to give to the guessed style.  By default, "
"this name is based on the buffer's absolute file name.  You can then use "
"this style like any other."
msgstr ""

#. type: kbd{#1}
#: ../../../../../doc/misc/cc-mode.texi:3001
#, no-wrap
msgid "M-x c-guess-view"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3002
#, no-wrap
msgid "c-guess-view"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3003
#, no-wrap
msgid "guess-view @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3008
msgid ""
"Display the most recently guessed style in a temporary buffer.  This display "
"is in the form of a @code{c-add-style} form (@pxref{Adding Styles}) which "
"can be easily copied to your @file{.emacs}.  You will probably want to edit "
"it first."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3010
msgid "The display of the guessed style contains these elements:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3012
#, no-wrap
msgid "Placeholder Name"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3014
msgid "You should replace this with a style name of your own."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3014
#, no-wrap
msgid "Parent Style"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3018
msgid ""
"The style current when the guessing began, from which the guessed style "
"inherits (@pxref{Config Basics}) the settings which weren't guessed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3018
#, no-wrap
msgid "Guessed Offsets"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3021
msgid ""
"These are the core result of the guessing process.  Each of them is marked "
"by a comment."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3021
#, no-wrap
msgid "Inherited Offsets"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3025
msgid ""
"These are syntactic offsets which have been taken over from the parent "
"style.  To avoid possible future conflicts, you should remove either these "
"offsets or the parent style name."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3032
#, no-wrap
msgid "styles, file local"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3035
#, no-wrap
msgid "file local variables"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3041
msgid ""
"The Emacs manual describes how you can customize certain variables on a "
"per-file basis by including a @dfn{file local variable} block at the end of "
"the file (@pxref{File Variables,, Local Variables in Files,@emacsman{}, "
"@emacsmantitle{}})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3047
msgid ""
"So far, you've only seen a functional interface for setting styles in "
"@ccmode{}, and this can't be used here.  @ccmode{} fills the gap by "
"providing two variables for use in a file's local variable list.  Don't use "
"them anywhere else! These allow you to customize the style on a per-file "
"basis:"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3048
#, no-wrap
msgid "c-file-style"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3049
#, no-wrap
msgid "file-style @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3053
msgid ""
"Set this variable to a style name string in the Local Variables list.  From "
"now on, when you visit the file, @ccmode{} will automatically set the file's "
"style to this one using @code{c-set-style}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3055
#, no-wrap
msgid "c-file-offsets"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3056
#, no-wrap
msgid "file-offsets @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3061
msgid ""
"Set this variable (in the Local Variables list) to an association list of "
"the same format as @code{c-offsets-alist}.  From now on, when you visit the "
"file, @ccmode{} will automatically institute these offsets using "
"@code{c-set-offset}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3071
msgid ""
"Note that file style settings (i.e., @code{c-file-style}) are applied before "
"file offset settings (i.e., @code{c-file-offsets})@footnote{Also, if either "
"of these are set in a file's local variable section, all the style variable "
"values are made local to that buffer, even if "
"@code{c-style-variables-are-local-p} is @code{nil}.  Since this variable is "
"virtually always non-@code{nil} anyhow, you're unlikely to notice this "
"effect.}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3078
msgid ""
"If you set any variable by the file local variables mechanism, that setting "
"takes priority over all other settings, even those in your mode hooks "
"(@pxref{CC Hooks}).  Any individual setting of a variable will override one "
"made through @code{c-file-style} or @code{c-file-offsets}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:3078 ../../../../../doc/misc/cc-mode.texi:3297 ../../../../../doc/misc/cc-mode.texi:3353 ../../../../../doc/misc/cc-mode.texi:3591 ../../../../../doc/misc/cc-mode.texi:3634 ../../../../../doc/misc/cc-mode.texi:3714
#, no-wrap
msgid "Custom Auto-newlines"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/cc-mode.texi:3080
#, no-wrap
msgid "Customizing Filling and Line Breaking"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3087
msgid ""
"Since there's a lot of normal text in comments and string literals, "
"@ccmode{} provides features to edit these like in text mode.  It does this "
"by hooking in on the different line breaking functions and tuning relevant "
"variables as necessary."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3088 ../../../../../doc/misc/cc-mode.texi:3109
#, no-wrap
msgid "c-comment-prefix-regexp"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3089 ../../../../../doc/misc/cc-mode.texi:3110
#, no-wrap
msgid "comment-prefix-regexp @r{(c-)}"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3090
#, no-wrap
msgid "comment line prefix"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3091
#, no-wrap
msgid "comment-start"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3092
#, no-wrap
msgid "comment-end"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3093 ../../../../../doc/misc/cc-mode.texi:6484
#, no-wrap
msgid "comment-start-skip"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3094
#, no-wrap
msgid "paragraph-start"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3095
#, no-wrap
msgid "paragraph-separate"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3096
#, no-wrap
msgid "paragraph-ignore-fill-prefix"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3097 ../../../../../doc/misc/cc-mode.texi:3161
#, no-wrap
msgid "adaptive-fill-mode"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3098
#, no-wrap
msgid "adaptive-fill-regexp"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3099
#, no-wrap
msgid "adaptive-fill-first-line-regexp"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3108
msgid ""
"To make Emacs recognize comments and treat text in them as normal "
"paragraphs, @ccmode{} makes several standard "
"variables@footnote{@code{comment-start}, @code{comment-end}, "
"@code{comment-start-skip}, @code{paragraph-start}, "
"@code{paragraph-separate}, @code{paragraph-ignore-fill-prefix}, "
"@code{adaptive-fill-mode}, @code{adaptive-fill-regexp}, and "
"@code{adaptive-fill-first-line-regexp}.} buffer-local and modifies them "
"according to the language syntax and the comment line prefix."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3118
msgid ""
"This style variable contains the regexp used to recognize the @dfn{comment "
"line prefix}, which is the line decoration that starts every line in a "
"comment.  The variable is either the comment line prefix itself, or (more "
"usually) an association list with different values for different languages.  "
"The symbol for the major mode is looked up in the alist to get the regexp "
"for the language, and if it isn't found then the special symbol @samp{other} "
"is looked up instead."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3123
msgid ""
"When a comment line gets divided by @kbd{M-j} or the like, @ccmode{} inserts "
"the comment line prefix from a neighboring line at the start of the new "
"line.  The default value of c-comment-prefix-regexp is "
"@samp{//+\\\\|\\\\**}, which matches C++ style line comments like"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3126
#, no-wrap
msgid "// blah blah\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3131
msgid ""
"with two or more slashes in front of them, and the second and subsequent "
"lines of C style block comments like"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3137
#, no-wrap
msgid ""
"/*\n"
" * blah blah\n"
" */\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3145
msgid ""
"with zero or more stars at the beginning of every line.  If you change this "
"variable, please make sure it still matches the comment starter (i.e., "
"@code{//}) of line comments @emph{and} the line prefix inside block "
"comments."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3146
#, no-wrap
msgid "c-setup-paragraph-variables"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3147
#, no-wrap
msgid "setup-paragraph-variables @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3156
msgid ""
"Also note that since @ccmode{} uses the value of "
"@code{c-comment-prefix-regexp} to set up several other variables at mode "
"initialization, there won't be any effect if you just change it inside a "
"@ccmode{} buffer.  You need to call the command "
"@code{c-setup-paragraph-variables} too, to update those other variables.  "
"That's also the case if you modify @code{c-comment-prefix-regexp} in a mode "
"hook, since @ccmode{} will already have set up these variables before "
"calling the hook."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3160
msgid ""
"In comments, @ccmode{} uses @code{c-comment-prefix-regexp} to adapt the line "
"prefix from the other lines in the comment."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3162
#, no-wrap
msgid "Adaptive Fill mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3169
msgid ""
"@ccmode{} uses adaptive fill mode (@pxref{Adaptive Fill,,, emacs, GNU Emacs "
"Manual}) to make Emacs correctly keep the line prefix when filling "
"paragraphs.  That also makes Emacs preserve the text indentation "
"@emph{inside} the comment line prefix.  E.g., in the following comment, both "
"paragraphs will be filled with the left margins of the texts kept intact:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3179
#, no-wrap
msgid ""
"/* Make a balanced b-tree of the nodes in the incoming\n"
" * stream.  But, to quote the famous words of Donald E.\n"
" * Knuth,\n"
" *\n"
" *     Beware of bugs in the above code; I have only\n"
" *     proved it correct, not tried it.\n"
" */\n"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3182
#, no-wrap
msgid "c-setup-filladapt"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3183
#, no-wrap
msgid "setup-filladapt @r{(c-)}"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3184 ../../../../../doc/misc/cc-mode.texi:3185
#, no-wrap
msgid "filladapt-mode"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3186
#, no-wrap
msgid "Filladapt mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3199
msgid ""
"It's also possible to use other adaptive filling packages, notably Kyle "
"E. Jones' Filladapt package@footnote{It's available from "
"@uref{http://www.wonderworks.com/}.  As of version 2.12, it does however "
"lack a feature that makes it work suboptimally when "
"@code{c-comment-prefix-regexp} matches the empty string (which it does by "
"default).  A patch for that is available from "
"@uref{http://cc-mode.sourceforge.net/,, the CC Mode web site}.}, which "
"handles things like bulleted lists nicely.  There's a convenience function "
"@code{c-setup-filladapt} that tunes the relevant variables in Filladapt for "
"use in @ccmode{}.  Call it from a mode hook, e.g., with something like this "
"in your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3205
#, no-wrap
msgid ""
"(defun my-c-mode-common-hook ()\n"
"  (c-setup-filladapt)\n"
"  (filladapt-mode 1))\n"
"(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3207
#, no-wrap
msgid "c-block-comment-prefix"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3208
#, no-wrap
msgid "block-comment-prefix @r{(c-)}"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3209
#, no-wrap
msgid "c-comment-continuation-stars"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3210
#, no-wrap
msgid "comment-continuation-stars @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3224
msgid ""
"Normally the comment line prefix inserted for a new line inside a comment is "
"deduced from other lines in it.  However there's one situation when there's "
"no hint about what the prefix should look like, namely when a block comment "
"is broken for the first time.  This style variable@footnote{In versions "
"before 5.26, this variable was called @code{c-comment-continuation-stars}.  "
"As a compatibility measure, @ccmode{} still uses the value on that variable "
"if it's set.} is used then as the comment prefix.  It defaults to @samp{* "
"}@footnote{Actually, this default setting of @code{c-block-comment-prefix} "
"typically gets overridden by the default style @code{gnu}, which sets it to "
"blank.  You can see the line splitting effect described here by setting a "
"different style, e.g., @code{k&r} @xref{Choosing a Style}.}, which makes a "
"comment"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3227
#, no-wrap
msgid "/* Got O(n^2) here, which is a Bad Thing. */\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3231
msgid "break into"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3236
#, no-wrap
msgid ""
"/* Got O(n^2) here, which\n"
" * is a Bad Thing. */\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3245
msgid ""
"Note that it won't work to adjust the indentation by putting leading spaces "
"in @code{c-block-comment-prefix}, since @ccmode{} still uses the normal "
"indentation engine to indent the line.  Thus, the right way to fix the "
"indentation is by customizing the @code{c} syntactic symbol.  It defaults to "
"@code{c-lineup-C-comments}, which handles the indentation of most common "
"comment styles, see @ref{Line-Up Functions}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3247
#, no-wrap
msgid "c-ignore-auto-fill"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3248
#, no-wrap
msgid "ignore-auto-fill @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3254
msgid ""
"When auto fill mode is enabled, @ccmode{} can selectively ignore it "
"depending on the context the line break would occur in, e.g., to never break "
"a line automatically inside a string literal.  This variable takes a list of "
"symbols for the different contexts where auto-filling never should occur:"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:3256 ../../../../../doc/misc/cc-mode.texi:4229 ../../../../../doc/misc/cc-mode.texi:4977
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3258
msgid "Inside a string or character literal."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:3258 ../../../../../doc/misc/cc-mode.texi:4231 ../../../../../doc/misc/cc-mode.texi:4964
#, no-wrap
msgid "c"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3260
msgid "Inside a C style block comment."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3260
#, no-wrap
msgid "c++"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3262
msgid "Inside a C++ style line comment."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3262
#, no-wrap
msgid "cpp"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3264
msgid "Inside a preprocessor directive."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3264
#, no-wrap
msgid "code"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3266
msgid "Anywhere else, i.e., in normal code."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3278
msgid ""
"By default, @code{c-ignore-auto-fill} is set to @code{(string cpp code)}, "
"which means that when auto-fill mode is activated, auto-filling only occurs "
"in comments.  In literals, it's often desirable to have explicit control "
"over newlines.  In preprocessor directives, the necessary @samp{\\} escape "
"character before the newline is not automatically inserted, so an automatic "
"line break would produce invalid code.  In normal code, line breaks are "
"normally dictated by some logical structure in the code rather than the last "
"whitespace character, so automatic line breaks there will produce poor "
"results in the current implementation."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3280
#, no-wrap
msgid "comment-multi-line"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3288
msgid ""
"If inside a comment and @code{comment-multi-line} (@pxref{Auto "
"Fill,,,@emacsman{}, @emacsmantitle{}} is non-@code{nil}, the indentation and "
"line prefix are preserved.  If inside a comment and "
"@code{comment-multi-line} is @code{nil}, a new comment of the same type is "
"started on the next line and indented as appropriate for comments."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3295
msgid ""
"Note that @ccmode{} sets @code{comment-multi-line} to @code{t} at startup.  "
"The reason is that @kbd{M-j} could otherwise produce sequences of single "
"line block comments for texts that should logically be treated as one "
"comment, and the rest of the paragraph handling code (e.g., @kbd{M-q} and "
"@kbd{M-a}) can't cope with that, which would lead to inconsistent behavior."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:3297 ../../../../../doc/misc/cc-mode.texi:3714 ../../../../../doc/misc/cc-mode.texi:3716 ../../../../../doc/misc/cc-mode.texi:3967
#, no-wrap
msgid "Clean-ups"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3304
msgid ""
"@ccmode{} determines whether to insert auto-newlines in two basically "
"different ways, depending on the character just typed:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3306
#, no-wrap
msgid "Braces and Colons"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3314
msgid ""
"@ccmode{} first determines the syntactic context of the brace or colon "
"(@pxref{Syntactic Symbols}), then looks for a corresponding element in an "
"alist.  This element specifies where to put newlines: this is any "
"combination of before and after the brace or colon.  If no alist element is "
"found, newlines are inserted both before and after a brace, but none are "
"inserted around a colon.  See @ref{Hanging Braces} and @ref{Hanging Colons}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3315
#, no-wrap
msgid "Semicolons and Commas"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3319
msgid ""
"The variable @code{c-hanging-semi&comma-criteria} contains a list of "
"functions which determine whether to insert a newline after a newly typed "
"semicolon or comma.  @xref{Hanging Semicolons and Commas}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3326
msgid ""
"The names of these configuration variables contain @samp{hanging} because "
"they let you @dfn{hang} the pertinent characters.  A character which "
"introduces a C construct is said to @dfn{hang on the right} when it appears "
"at the end of a line after other code, being separated by a line break from "
"the construct it introduces, like the opening brace in:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3333
#, no-wrap
msgid ""
"while (i < MAX) @{\n"
"    total += entry[i];\n"
"    entry [i++] = 0;\n"
"@}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3340
msgid ""
"A character @dfn{hangs on the left} when it appears at the start of the line "
"after the construct it closes off, like the above closing brace."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3344
msgid ""
"The next chapter, ``Clean-ups'', describes how to configure @ccmode{} to "
"remove these automatically added newlines in certain specific "
"circumstances.  @xref{Clean-ups}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:3353 ../../../../../doc/misc/cc-mode.texi:3591 ../../../../../doc/misc/cc-mode.texi:3593 ../../../../../doc/misc/cc-mode.texi:3634
#, no-wrap
msgid "Hanging Colons"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3356
#, no-wrap
msgid "hanging braces"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3364
msgid ""
"To specify which kinds of braces you want auto-newlines put around, you set "
"the style variable @code{c-hanging-braces-alist}.  Its structure and "
"semantics are described in this section.  Details of how to set it up, and "
"its relationship to CC Mode's style system are given in @ref{Style "
"Variables}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3367
msgid ""
"Say you wanted an auto-newline after (but not before) the following "
"@samp{@{}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3370
#, no-wrap
msgid "if (foo < 17) @{\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3378
msgid ""
"First you need to find the @dfn{syntactic context} of the brace---type a "
"@key{RET} before the brace to get it on a line of its own@footnote{Also "
"insert a @samp{\\} at the end of the previous line if you're in AWK Mode.}, "
"then type @kbd{C-c C-s}.  That will tell you something like:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3381
#, no-wrap
msgid "((substatement-open 1061))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3386
msgid ""
"So here you need to put the entry @code{(substatement-open . (after))} into "
"@code{c-hanging-braces-alist}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3389
msgid ""
"If you don't want any auto-newlines for a particular syntactic symbol, put "
"this into @code{c-hanging-braces-alist}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3392
#, no-wrap
msgid "(brace-entry-open)\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3399
msgid ""
"If some brace syntactic symbol is not in @code{c-hanging-brace-alist}, its "
"entry is taken by default as @code{(before after)}---insert a newline both "
"before and after the brace.  In place of a ``before/after'' list you can "
"specify a function in this alist---this is useful when the auto newlines "
"depend on the code around the brace."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3400 ../../../../../doc/misc/cc-mode.texi:3508
#, no-wrap
msgid "c-hanging-braces-alist"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3401 ../../../../../doc/misc/cc-mode.texi:3509
#, no-wrap
msgid "hanging-braces-alist @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3408
msgid ""
"This variable is an association list which maps syntactic symbols to lists "
"of places to insert a newline.  @xref{Association Lists,,,@lispref{}, "
"@lispreftitle{}}.  The key of each element is the syntactic symbol, the "
"associated value is either @code{nil}, a list, or a function."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3410 ../../../../../doc/misc/cc-mode.texi:3614
#, no-wrap
msgid "The Key: the syntactic symbol"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3419
msgid ""
"The syntactic symbols that are useful as keys in this list are "
"@code{brace-list-intro}, @code{statement-cont}, @code{inexpr-class-open}, "
"@code{inexpr-class-close}, and all the @code{*-open} and @code{*-close} "
"symbols.  @xref{Syntactic Symbols}, for a more detailed description of these "
"syntactic symbols, except for @code{inexpr-class-open} and "
"@code{inexpr-class-close}, which aren't actual syntactic symbols.  Elements "
"with any other value as a key get ignored."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3426
msgid ""
"The braces of anonymous inner classes in Java are given the special symbols "
"@code{inexpr-class-open} and @code{inexpr-class-close}, so that they can be "
"distinguished from the braces of normal classes@footnote{The braces of "
"anonymous classes produce a combination of @code{inexpr-class}, and "
"@code{class-open} or @code{class-close} in normal indentation analysis.}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3432
msgid ""
"Note that the aggregate constructs in Pike mode, @samp{(@{}, @samp{@})}, "
"@samp{([}, @samp{])}, and @samp{(<}, @samp{>)}, do not count as brace lists "
"in this regard, even though they do for normal indentation purposes.  It's "
"currently not possible to set automatic newlines on these constructs."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3433
#, no-wrap
msgid "The associated value: the ``ACTION'' list or function"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3438
msgid ""
"The value associated with each syntactic symbol in this association list is "
"called an @var{action}, which can be either a list or a function which "
"returns a list.  @xref{Custom Braces}, for how to use a function as a brace "
"hanging @var{action}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3445
msgid ""
"The list @var{action} (or the list returned by @var{action} when it's a "
"function) contains some combination of the symbols @code{before} and "
"@code{after}, directing @ccmode{} where to put newlines in relationship to "
"the brace being inserted.  Thus, if the list contains only the symbol "
"@code{after}, then the brace hangs on the right side of the line, as in:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3453
#, no-wrap
msgid ""
"// here, open braces always 'hang'\n"
"void spam( int i ) @{\n"
"    if( i == 7 ) @{\n"
"        dosomething(i);\n"
"    @}\n"
"@}\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3459
msgid ""
"When the list contains both @code{after} and @code{before}, the braces will "
"appear on a line by themselves, as shown by the close braces in the above "
"example.  The list can also be empty, in which case newlines are added "
"neither before nor after the brace."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3465
msgid ""
"If a syntactic symbol is missing entirely from "
"@code{c-hanging-braces-alist}, it's treated in the same way as an "
"@var{action} with a list containing @code{before} and @code{after}, so that "
"braces by default end up on their own line."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3467
msgid "For example, the default value of @code{c-hanging-braces-alist} is:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3480
#, no-wrap
msgid ""
"((brace-list-open)\n"
" (brace-entry-open)\n"
" (statement-cont)\n"
" (substatement-open after)\n"
" (block-close . c-snug-do-while)\n"
" (extern-lang-open after)\n"
" (namespace-open after)\n"
" (module-open after)\n"
" (composition-open after)\n"
" (inexpr-class-open after)\n"
" (inexpr-class-close before))\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3496
msgid ""
"@code{brace-entry-open} and @code{statement-cont}@footnote{Brace lists "
"inside statements, such as initializers for static array variables inside "
"functions in C, are recognized as @code{statement-cont}.  All normal "
"substatement blocks are recognized with other symbols.} braces should both "
"hang on the right side and allow subsequent text to follow on the same line "
"as the brace.  Also, @code{substatement-open}, @code{extern-lang-open}, and "
"@code{inexpr-class-open} braces should hang on the right side, but "
"subsequent text should follow on the next line.  The opposite holds for "
"@code{inexpr-class-close} braces; they won't hang, but the following text "
"continues on the same line.  Here, in the @code{block-close} entry, you also "
"see an example of using a function as an @var{action}.  In all other cases, "
"braces are put on a line by themselves."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:3505
#, no-wrap
msgid "Custom Brace Hanging"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3510
#, no-wrap
msgid "action functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3519
msgid ""
"Syntactic symbols aren't the only place where you can customize @ccmode{} "
"with the lisp equivalent of callback functions.  Remember that @var{action}s "
"are usually a list containing some combination of the symbols @code{before} "
"and @code{after} (@pxref{Hanging Braces}).  For more flexibility, you can "
"instead specify brace ``hanginess'' by giving a syntactic symbol an "
"@dfn{action function} in @code{c-hanging-braces-alist}; this function "
"determines the ``hanginess'' of a brace, usually by looking at the code near "
"it."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3520
#, no-wrap
msgid "customization, brace hanging"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3528
msgid ""
"An action function is called with two arguments: the syntactic symbol for "
"the brace (e.g., @code{substatement-open}), and the buffer position where "
"the brace has been inserted.  Point is undefined on entry to an action "
"function, but the function must preserve it (e.g., by using "
"@code{save-excursion}).  The return value should be a list containing some "
"combination of @code{before} and @code{after}, including neither of them "
"(i.e., @code{nil})."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3529 ../../../../../doc/misc/cc-mode.texi:6819
#, no-wrap
msgid "c-syntactic-context"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3530 ../../../../../doc/misc/cc-mode.texi:6820
#, no-wrap
msgid "syntactic-context @r{(c-)}"
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3536
msgid ""
"During the call to the indentation or brace hanging @var{action} function, "
"this variable is bound to the full syntactic analysis list.  This might be, "
"for example, @samp{((block-close 73))}.  Don't ever give "
"@code{c-syntactic-context} a value yourself---this would disrupt the proper "
"functioning of @ccmode{}."
msgstr ""

#. type: defvar
#: ../../../../../doc/misc/cc-mode.texi:3542
msgid ""
"This variable is also bound in three other circumstances: (i)@w{ }when "
"calling a c-hanging-semi&comma-criteria function (@pxref{Hanging Semicolons "
"and Commas}); (ii)@w{ }when calling a line-up function (@pxref{Custom "
"Line-Up}); (iii)@w{ }when calling a c-special-indent-hook function "
"(@pxref{Other Indentation})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3547
msgid ""
"As an example, @ccmode{} itself uses this feature to dynamically determine "
"the hanginess of braces which close ``do-while'' constructs:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3557
#, no-wrap
msgid ""
"void do_list( int count, char** atleast_one_string )\n"
"@{\n"
"    int i=0;\n"
"    do @{\n"
"        handle_string( atleast_one_string[i] );\n"
"        i++;\n"
"    @} while( i < count );\n"
"@}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3566
msgid ""
"@ccmode{} assigns the @code{block-close} syntactic symbol to the brace that "
"closes the @code{do} construct, and normally we'd like the line that follows "
"a @code{block-close} brace to begin on a separate line.  However, with "
"``do-while'' constructs, we want the @code{while} clause to follow the "
"closing brace.  To do this, we associate the @code{block-close} symbol with "
"the @var{action} function @code{c-snug-do-while}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3580
#, no-wrap
msgid ""
"(defun c-snug-do-while (syntax pos)\n"
"  \"Dynamically calculate brace hanginess for do-while statements.\"\n"
"  (save-excursion\n"
"    (let (langelem)\n"
"      (if (and (eq syntax 'block-close)\n"
"               (setq langelem (assq 'block-close c-syntactic-context))\n"
"               (progn (goto-char (cdr langelem))\n"
"                      (if (= (following-char) ?@{)\n"
"                          (forward-sexp -1))\n"
"                      (looking-at \"\\\\<do\\\\>[^_]\")))\n"
"          '(before)\n"
"        '(before after)))))\n"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3582
#, no-wrap
msgid "c-snug-do-while"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3583
#, no-wrap
msgid "snug-do-while @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3589
msgid ""
"This function simply looks to see if the brace closes a ``do-while'' clause "
"and if so, returns the list @samp{(before)} indicating that a newline should "
"be inserted before the brace, but not after it.  In all other cases, it "
"returns the list @samp{(before after)} so that the brace appears on a line "
"by itself."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3594
#, no-wrap
msgid "hanging colons"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3597
#, no-wrap
msgid "customization, colon hanging"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3598 ../../../../../doc/misc/cc-mode.texi:3610
#, no-wrap
msgid "c-hanging-colons-alist"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3599 ../../../../../doc/misc/cc-mode.texi:3611
#, no-wrap
msgid "hanging-colons-alist @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3609
msgid ""
"Using a mechanism similar to brace hanging (@pxref{Hanging Braces}), colons "
"can also be made to hang using the style variable "
"@code{c-hanging-colons-alist}: when a colon is typed, @ccmode determines its "
"syntactic context, looks this up in the alist @code{c-changing-colons-alist} "
"and inserts up to two newlines accordingly.  Here, however, If @ccmode fails "
"to find an entry for a syntactic symbol in the alist, no newlines are "
"inserted around the newly typed colon."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3619
msgid ""
"The syntactic symbols appropriate as keys in this association list are: "
"@code{case-label}, @code{label}, @code{access-label}, "
"@code{member-init-intro}, and @code{inher-intro}.  @xref{Syntactic "
"Symbols}.  Elements with any other value as a key get ignored."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3620
#, no-wrap
msgid "The associated value: the ``ACTION'' list"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3625
msgid ""
"The @var{action} here is simply a list containing a combination of the "
"symbols @code{before} and @code{after}.  Unlike in "
"@code{c-hanging-braces-alist}, functions as @var{actions} are not supported; "
"there doesn't seem to be any need for them."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3632
msgid ""
"In C++, double-colons are used as a scope operator but because these colons "
"always appear right next to each other, newlines before and after them are "
"controlled by a different mechanism, called @dfn{clean-ups} in @ccmode{}.  "
"@xref{Clean-ups}, for details."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3637
#, no-wrap
msgid "hanging semicolons"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3638
#, no-wrap
msgid "hanging commas"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3639
#, no-wrap
msgid "customization, semicolon newlines"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3640
#, no-wrap
msgid "customization, comma newlines"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3643
#, no-wrap
msgid "c-hanging-semi&comma-criteria"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3644
#, no-wrap
msgid "hanging-semi&comma-criteria @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3655
msgid ""
"This style variable takes a list of functions; these get called when you "
"type a semicolon or comma.  The functions are called in order without "
"arguments.  When these functions are entered, point is just after the newly "
"inserted @samp{;} or @samp{,} and they must preserve point (e.g., by using "
"@code{save-excursion}).  During the call, the variable "
"@code{c-syntactic-context} is bound to the syntactic context of the current "
"line@footnote{This was first introduced in @ccmode{} 5.31.} @pxref{Custom "
"Braces}.  These functions don't insert newlines themselves, rather they "
"direct @ccmode{} whether or not to do so.  They should return one of the "
"following values:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3657
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3660
msgid ""
"A newline is to be inserted after the @samp{;} or @samp{,}, and no more "
"functions from the list are to be called."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3660
#, no-wrap
msgid "stop"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3663
msgid ""
"No more functions from the list are to be called, and no newline is to be "
"inserted."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3663 ../../../../../doc/misc/cc-mode.texi:7043
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3666
msgid ""
"No determination has been made, and the next function in the list is to be "
"called."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3671
msgid ""
"Note that auto-newlines are never inserted @emph{before} a semicolon or "
"comma.  If every function in the list is called without a determination "
"being made, then no newline is added."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3676
msgid ""
"In AWK mode, this variable is set by default to @code{nil}.  In the other "
"modes, the default value is a list containing a single function, "
"@code{c-semi&comma-inside-parenlist}.  This inserts newlines after all "
"semicolons, apart from those separating @code{for}-clause statements."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:3678
#, no-wrap
msgid "c-semi&comma-no-newlines-before-nonblanks"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3679
#, no-wrap
msgid "semi&comma-no-newlines-before-nonblanks @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:3685
msgid ""
"This is an example of a criteria function, provided by @ccmode{}.  It "
"prevents newlines from being inserted after semicolons when there is a "
"non-blank following line.  Otherwise, it makes no determination.  To use, "
"add this function to the front of the @code{c-hanging-semi&comma-criteria} "
"list."
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3695
#, no-wrap
msgid ""
"(defun c-semi&comma-no-newlines-before-nonblanks ()\n"
"  (save-excursion\n"
"    (if (and (= (c-last-command-char) ?\\;)\n"
"\t     (zerop (forward-line 1))\n"
"\t     (bolp)      ; forward-line has funny behavior at eob.\n"
"\t     (not (looking-at \"^[ \\t]*$\")))\n"
"\t'stop\n"
"      nil)))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:3698
#, no-wrap
msgid "c-semi&comma-inside-parenlist"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3699
#, no-wrap
msgid "semi&comma-inside-parenlist @r{(c-)}"
msgstr ""

#. type: defunx
#: ../../../../../doc/misc/cc-mode.texi:3700
#, no-wrap
msgid "c-semi&comma-no-newlines-for-oneline-inliners"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:3701
#, no-wrap
msgid "semi&comma-no-newlines-for-oneline-inliners @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:3710
msgid ""
"The function @code{c-semi&comma-inside-parenlist} is what prevents newlines "
"from being inserted inside the parenthesis list of @code{for} statements.  "
"In addition to @code{c-semi&comma-no-newlines-before-nonblanks} described "
"above, @ccmode{} also comes with the criteria function "
"@code{c-semi&comma-no-newlines-for-oneline-inliners}, which suppresses "
"newlines after semicolons inside one-line inline method definitions (e.g., "
"in C++ or Java)."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3717
#, no-wrap
msgid "clean-ups"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3724
msgid ""
"@dfn{Clean-ups} are mechanisms which remove (or exceptionally, add)  "
"whitespace in specific circumstances and are complementary to colon and "
"brace hanging.  You enable a clean-up by adding its symbol into "
"@code{c-cleanup-list}, e.g., like this:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:3727
#, no-wrap
msgid "(add-to-list 'c-cleanup-list 'space-before-funcall)\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3733
msgid ""
"On the surface, it would seem that clean-ups overlap the functionality "
"provided by the @code{c-hanging-*-alist} variables.  Clean-ups, however, are "
"used to adjust code ``after-the-fact'', i.e., to adjust the whitespace in "
"constructs later than when they were typed."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3740
msgid ""
"Most of the clean-ups remove automatically inserted newlines, and are only "
"active when auto-newline minor mode is turned on.  Others will work all the "
"time.  Note that clean-ups are only performed when there is nothing but "
"whitespace appearing between the individual components of the construct, and "
"(apart from @code{comment-close-slash}) when the construct does not occur "
"within a literal (@pxref{Auto-newlines})."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3741
#, no-wrap
msgid "c-cleanup-list"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3742
#, no-wrap
msgid "cleanup-list @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3749
msgid ""
"You configure @ccmode{}'s clean-ups by setting the style variable "
"@code{c-cleanup-list}, which is a list of clean-up symbols.  By default, "
"@ccmode{} cleans up only the @code{scope-operator} construct, which is "
"necessary for proper C++ support."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3753
msgid ""
"These are the clean-ups that are only active when electric and auto-newline "
"minor modes are enabled:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3757
#, no-wrap
msgid "brace-else-brace"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3761
msgid ""
"Clean up @samp{@} else @{} constructs by placing the entire construct on a "
"single line.  Clean up occurs when the open brace after the @samp{else} is "
"typed.  So for example, this:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3771
#, no-wrap
msgid ""
"void spam(int i)\n"
"@{\n"
"    if( i==7 ) @{\n"
"        dosomething();\n"
"    @}\n"
"    else\n"
"    @{\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3776
msgid "appears like this after the last open brace is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3784
#, no-wrap
msgid ""
"void spam(int i)\n"
"@{\n"
"    if( i==7 ) @{\n"
"        dosomething();\n"
"    @} else @{\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3787
#, no-wrap
msgid "brace-elseif-brace"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3790
msgid ""
"Similar to the @code{brace-else-brace} clean-up, but this cleans up @samp{@} "
"else if (...) @{} constructs.  For example:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3800
#, no-wrap
msgid ""
"void spam(int i)\n"
"@{\n"
"    if( i==7 ) @{\n"
"        dosomething();\n"
"    @}\n"
"    else if( i==3 )\n"
"    @{\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3805
msgid "appears like this after the last open parenthesis is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3813
#, no-wrap
msgid ""
"void spam(int i)\n"
"@{\n"
"    if( i==7 ) @{\n"
"        dosomething();\n"
"    @} else if(\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3818
msgid "and like this after the last open brace is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3826
#, no-wrap
msgid ""
"void spam(int i)\n"
"@{\n"
"    if( i==7 ) @{\n"
"        dosomething();\n"
"    @} else if( i==3 ) @{\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3829
#, no-wrap
msgid "brace-catch-brace"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3832
msgid ""
"Analogous to @code{brace-elseif-brace}, but cleans up @samp{@} catch (...) "
"@{} in C++ and Java mode."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3833
#, no-wrap
msgid "empty-defun-braces"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3837
msgid ""
"Clean up braces following a top-level function or class definition that "
"contains no body.  Clean up occurs when the closing brace is typed.  Thus "
"the following:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3843
#, no-wrap
msgid ""
"class Spam\n"
"@{\n"
"@}\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3848
msgid "is transformed into this when the close brace is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3853
#, no-wrap
msgid ""
"class Spam\n"
"@{@}\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3856
#, no-wrap
msgid "defun-close-semi"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3860
msgid ""
"Clean up the terminating semicolon on top-level function or class "
"definitions when they follow a close brace.  Clean up occurs when the "
"semicolon is typed.  So for example, the following:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3868
#, no-wrap
msgid ""
"class Spam\n"
"@{\n"
"...\n"
"@}\n"
";\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3873
msgid "is transformed into this when the semicolon is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3880
#, no-wrap
msgid ""
"class Spam\n"
"@{\n"
"...\n"
"@};\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3883
#, no-wrap
msgid "list-close-comma"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3888
msgid ""
"Clean up commas following braces in array and aggregate initializers.  Clean "
"up occurs when the comma is typed.  The space before the comma is zapped "
"just like the space before the semicolon in @code{defun-close-semi}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3889
#, no-wrap
msgid "scope-operator"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3897
msgid ""
"Clean up double colons which might designate a C++ scope operator split "
"across multiple lines@footnote{Certain C++ constructs introduce ambiguous "
"situations, so @code{scope-operator} clean-ups might not always be correct.  "
"This usually only occurs when scoped identifiers appear in switch label "
"tags.}.  Clean up occurs when the second colon is typed.  You will always "
"want @code{scope-operator} in the @code{c-cleanup-list} when you are editing "
"C++ code."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3898
#, no-wrap
msgid "one-liner-defun"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3904
msgid ""
"Clean up a single line of code enclosed by defun braces by removing the "
"whitespace before and after the code.  The clean-up happens when the closing "
"brace is typed.  If the variable @code{c-max-one-liner-length} is set, the "
"cleanup is only done if the resulting line would be no longer than the value "
"of that variable."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3906
msgid "For example, consider this AWK code:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3912
#, no-wrap
msgid ""
"BEGIN @{\n"
"    FS = \"\\t\" # use <TAB> as a field separator\n"
"@}\n"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3917
msgid "It gets compacted to the following when the closing brace is typed:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:3921
#, no-wrap
msgid "BEGIN @{FS = \"\\t\"@} # use <TAB> as a field separator\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3924
#, no-wrap
msgid "c-max-one-liner-length"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:3925
#, no-wrap
msgid "max-one-liner-length @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:3931
msgid ""
"The maximum length of the resulting line for which the clean-up "
"@code{one-liner-defun} will be triggered.  This length is that of the entire "
"line, including any leading whitespace and any trailing comment.  Its "
"default value is 80.  If the value is zero or @code{nil}, no limit applies."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3937
msgid ""
"The following clean-ups are always active when they occur on "
"@code{c-cleanup-list}, regardless of whether Electric minor mode or "
"Auto-newline minor mode are enabled:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3939
#, no-wrap
msgid "space-before-funcall"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3947
msgid ""
"Insert a space between the function name and the opening parenthesis of a "
"function call.  This produces function calls in the style mandated by the "
"GNU coding standards, e.g., @samp{signal@w{ }(SIGINT, SIG_IGN)} and "
"@samp{abort@w{ }()}.  Clean up occurs when the opening parenthesis is "
"typed.  This clean-up should never be active in AWK Mode, since such a space "
"is syntactically invalid for user defined functions."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3948
#, no-wrap
msgid "compact-empty-funcall"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3956
msgid ""
"Clean up any space between the function name and the opening parenthesis of "
"a function call that has no arguments.  This is typically used together with "
"@code{space-before-funcall} if you prefer the GNU function call style for "
"functions with arguments but think it looks ugly when it's only an empty "
"parenthesis pair.  I.e., you will get @samp{signal (SIGINT, SIG_IGN)}, but "
"@samp{abort()}.  Clean up occurs when the closing parenthesis is typed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:3957
#, no-wrap
msgid "comment-close-slash"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:3963
msgid ""
"When inside a block comment, terminate the comment when you type a slash at "
"the beginning of a line (i.e., immediately after the comment prefix).  This "
"clean-up removes whitespace preceding the slash and if needed, inserts a "
"star to complete the token @samp{*/}.  Type @kbd{C-q /} in this situation if "
"you just want a literal @samp{/} inserted."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3976
msgid ""
"This chapter will briefly cover how @ccmode{} indents lines of code.  It is "
"helpful to understand the indentation model being used so that you will know "
"how to customize @ccmode{} for your personal coding style.  All the details "
"are in @ref{Customizing Indentation}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:3980
msgid ""
"@ccmode{} has an indentation engine that provides a flexible and general "
"mechanism for customizing indentation.  When @ccmode{} indents a line of "
"code, it separates its calculations into two steps:"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3983 ../../../../../doc/misc/cc-mode.texi:4059
#, no-wrap
msgid "syntactic symbol"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3984 ../../../../../doc/misc/cc-mode.texi:4069
#, no-wrap
msgid "anchor position"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:3991
msgid ""
"It analyzes the line to determine its @dfn{syntactic symbol(s)} (the kind of "
"language construct it's looking at) and its @dfn{anchor position} (the "
"position earlier in the file that @ccmode{} will indent the line relative "
"to).  The anchor position might be the location of an opening brace in the "
"previous line, for example.  @xref{Syntactic Analysis}."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3992
#, no-wrap
msgid "offsets"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:3993
#, no-wrap
msgid "indentation offset specifications"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:4000
msgid ""
"It looks up the syntactic symbol(s) in the configuration to get the "
"corresponding @dfn{offset(s)}.  The symbol @code{+}, which means ``indent "
"this line one more level'' is a typical offset.  @ccmode{} then applies "
"these offset(s) to the anchor position, giving the indentation for the "
"line.  The different sorts of offsets are described in "
"@ref{c-offsets-alist}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4006
msgid ""
"In exceptional circumstances, the syntax directed indentation described here "
"may be a nuisance rather than a help.  You can disable it by setting "
"@code{c-syntactic-indentation} to @code{nil}.  (To set the variable "
"interactively, @ref{Minor Modes})."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:4007
#, no-wrap
msgid "c-syntactic-indentation"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:4008
#, no-wrap
msgid "syntactic-indentation @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:4017
msgid ""
"When this is non-@code{nil} (which it is by default), the indentation of "
"code is done according to its syntactic structure.  When it's @code{nil}, "
"every line is just indented to the same level as the previous one, and "
"@kbd{TAB} (@code{c-indent-command}) adjusts the indentation in steps of "
"@code{c-basic-offset}.  The current style (@pxref{Config Basics}) then has "
"no effect on indentation, nor do any of the variables associated with "
"indentation, not even @code{c-special-indent-hook}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4027 ../../../../../doc/misc/cc-mode.texi:4029 ../../../../../doc/misc/cc-mode.texi:4186
#, no-wrap
msgid "Syntactic Analysis"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4030
#, no-wrap
msgid "syntactic analysis"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4033
#, no-wrap
msgid "syntactic element"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4034
#, no-wrap
msgid "syntactic context"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4041
msgid ""
"The first thing @ccmode{} does when indenting a line of code, is to analyze "
"the line by calling @code{c-guess-basic-syntax}, determining the syntactic "
"context of the (first) construct on that line.  Although this function is "
"mainly used internally, it can sometimes be useful in Line-up functions "
"(@pxref{Custom Line-Up}) or in functions on @code{c-special-indent-hook} "
"(@pxref{Other Indentation})."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:4042
#, no-wrap
msgid "c-guess-basic-syntax"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:4043
#, no-wrap
msgid "guess-basic-syntax @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:4045
msgid "Determine the syntactic context of the current line."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4054
msgid ""
"The @dfn{syntactic context} is a list of @dfn{syntactic elements}, where "
"each syntactic element in turn is a list@footnote{In @ccmode 5.28 and "
"earlier, a syntactic element was a dotted pair; the cons was the syntactic "
"symbol and the cdr was the anchor position.  For compatibility's sake, the "
"parameter passed to a line-up function still has this dotted pair form "
"(@pxref{Custom Line-Up}).} Here is a brief and typical example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4057
#, no-wrap
msgid "((defun-block-intro 1959))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4068
msgid ""
"The first thing inside each syntactic element is always a @dfn{syntactic "
"symbol}.  It describes the kind of construct that was recognized, e.g., "
"@code{statement}, @code{substatement}, @code{class-open}, "
"@code{class-close}, etc.  @xref{Syntactic Symbols}, for a complete list of "
"currently recognized syntactic symbols and their semantics.  The remaining "
"entries are various data associated with the recognized construct; there "
"might be zero or more."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4075
msgid ""
"Conceptually, a line of code is always indented relative to some position "
"higher up in the buffer (typically the indentation of the previous line).  "
"That position is the @dfn{anchor position} in the syntactic element.  If "
"there is an entry after the syntactic symbol in the syntactic element list "
"then it's either @code{nil} or that anchor position."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4079
msgid ""
"Here is an example.  Suppose we had the following code as the only thing in "
"a C++ buffer @footnote{The line numbers in this and future examples don't "
"actually appear in the buffer, of course!}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4087 ../../../../../doc/misc/cc-mode.texi:5251
#, no-wrap
msgid ""
" 1: void swap( int& a, int& b )\n"
" 2: @{\n"
" 3:     int tmp = a;\n"
" 4:     a = b;\n"
" 5:     b = tmp;\n"
" 6: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4092
msgid ""
"We can use @kbd{C-c C-s} (@code{c-show-syntactic-information}) to report "
"what the syntactic analysis is for the current line:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:4094
#, no-wrap
msgid "@kbd{C-c C-s} (@code{c-show-syntactic-information})"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:4095
#, no-wrap
msgid "C-c C-s"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:4096
#, no-wrap
msgid "c-show-syntactic-information"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:4097
#, no-wrap
msgid "show-syntactic-information @r{(c-)}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4101
msgid ""
"This command calculates the syntactic analysis of the current line and "
"displays it in the minibuffer.  The command also highlights the anchor "
"position(s)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4107
msgid ""
"Running this command on line 4 of this example, we'd see in the echo "
"area@footnote{With a universal argument (i.e., @kbd{C-u C-c C-s}) the "
"analysis is inserted into the buffer as a comment on the current line.}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4110
#, no-wrap
msgid "((statement 35))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4117
msgid ""
"and the @samp{i} of @code{int} on line 3 would be highlighted.  This tells "
"us that the line is a statement and it is indented relative to buffer "
"position 35, the highlighted position.  If you were to move point to line 3 "
"and hit @kbd{C-c C-s}, you would see:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4120 ../../../../../doc/misc/cc-mode.texi:5258
#, no-wrap
msgid "((defun-block-intro 29))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4126
msgid ""
"This indicates that the @samp{int} line is the first statement in a top "
"level function block, and is indented relative to buffer position 29, which "
"is the brace just after the function header."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4128 ../../../../../doc/misc/cc-mode.texi:5275
msgid "Here's another example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4138 ../../../../../doc/misc/cc-mode.texi:5285
#, no-wrap
msgid ""
" 1: int add( int val, int incr, int doit )\n"
" 2: @{\n"
" 3:     if( doit )\n"
" 4:         @{\n"
" 5:             return( val + incr );\n"
" 6:         @}\n"
" 7:     return( val );\n"
" 8: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4142
msgid "Hitting @kbd{C-c C-s} on line 4 gives us:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4145 ../../../../../doc/misc/cc-mode.texi:5293
#, no-wrap
msgid "((substatement-open 46))\n"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4147 ../../../../../doc/misc/cc-mode.texi:4309 ../../../../../doc/misc/cc-mode.texi:4664
#, no-wrap
msgid "substatement"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4148
#, no-wrap
msgid "substatement block"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4155
msgid ""
"which tells us that this is a brace that @emph{opens} a substatement "
"block.@footnote{A @dfn{substatement} is the line after a conditional "
"statement, such as @code{if}, @code{else}, @code{while}, @code{do}, "
"@code{switch}, etc.  A @dfn{substatement block} is a brace block following "
"one of these conditional statements.}"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4156
#, no-wrap
msgid "comment-only line"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4160
msgid ""
"Syntactic contexts can contain more than one element, and syntactic elements "
"need not have anchor positions.  The most common example of this is a "
"@dfn{comment-only line}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4170
#, no-wrap
msgid ""
" 1: void draw_list( List<Drawables>& drawables )\n"
" 2: @{\n"
" 3:         // call the virtual draw() method on each element in list\n"
" 4:     for( int i=0; i < drawables.count(), ++i )\n"
" 5:     @{\n"
" 6:         drawables[i].draw();\n"
" 7:     @}\n"
" 8: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4174
msgid "Hitting @kbd{C-c C-s} on line 3 of this example gives:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4177
#, no-wrap
msgid "((comment-intro) (defun-block-intro 46))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4183
msgid ""
"and you can see that the syntactic context contains two syntactic elements.  "
"Notice that the first element, @samp{(comment-intro)}, has no anchor "
"position."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4191
#, no-wrap
msgid "syntactic symbols, brief list"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:4193 ../../../../../doc/misc/cc-mode.texi:5377
#, no-wrap
msgid "offsets-alist @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4199
msgid ""
"This section is a complete list of the syntactic symbols which appear in the "
"@code{c-offsets-alist} style variable, along with brief descriptions.  The "
"previous section (@pxref{Syntactic Analysis})  states what syntactic symbols "
"are and how the indentation engine uses them."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4206
msgid ""
"More detailed descriptions of these symbols, together with snippets of "
"source code to which they apply, appear in the examples in the subsections "
"below.  Note that, in the interests of brevity, the anchor position "
"associated with most syntactic symbols is @emph{not} specified.  In cases of "
"doubt, type @kbd{C-c C-s} on a pertinent line---this highlights the anchor "
"position."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4207
#, no-wrap
msgid "-open symbols"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4208
#, no-wrap
msgid "-close symbols"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4209
#, no-wrap
msgid "-block-intro symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4215
msgid ""
"The syntactic symbols which indicate brace constructs follow a general "
"naming convention.  When a line begins with an open or close brace, its "
"syntactic symbol will contain the suffix @code{-open} or @code{-close} "
"respectively.  The first line within the brace block construct will contain "
"the suffix @code{-block-intro}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4216
#, no-wrap
msgid "-intro symbols"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4217
#, no-wrap
msgid "-cont symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4223
msgid ""
"In constructs which can span several lines, a distinction is usually made "
"between the first line that introduces the construct and the lines that "
"continue it.  The syntactic symbols that indicate these lines will contain "
"the suffixes @code{-intro} or @code{-cont} respectively."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4227
msgid ""
"The best way to understand how all this works is by looking at some "
"examples.  Remember that you can see the syntax of any source code line by "
"using @kbd{C-c C-s}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4231
msgid "Inside a multiline string.  @ref{Literal Symbols}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4233
msgid "Inside a multiline C style block comment.  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4233 ../../../../../doc/misc/cc-mode.texi:4455
#, no-wrap
msgid "defun-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4236
msgid "Brace that opens a top-level function definition.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4236 ../../../../../doc/misc/cc-mode.texi:4456
#, no-wrap
msgid "defun-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4239
msgid "Brace that closes a top-level function definition.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4239 ../../../../../doc/misc/cc-mode.texi:4457
#, no-wrap
msgid "defun-block-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4241
msgid "The first line in a top-level defun.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4241 ../../../../../doc/misc/cc-mode.texi:4505
#, no-wrap
msgid "class-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4243
msgid "Brace that opens a class definition.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4243 ../../../../../doc/misc/cc-mode.texi:4506
#, no-wrap
msgid "class-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4245
msgid "Brace that closes a class definition.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4245 ../../../../../doc/misc/cc-mode.texi:4556
#, no-wrap
msgid "inline-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4247
msgid "Brace that opens an in-class inline method.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4247 ../../../../../doc/misc/cc-mode.texi:4557
#, no-wrap
msgid "inline-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4249
msgid "Brace that closes an in-class inline method.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4249 ../../../../../doc/misc/cc-mode.texi:4953
#, no-wrap
msgid "func-decl-cont"
msgstr ""

#.  @emph{FIXME!!!  Can it not
#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4256
msgid ""
"The region between a function definition's argument list and the function "
"opening brace (excluding K&R argument declarations).  In C, you cannot put "
"anything but whitespace and comments in this region, however in C++ and "
"Java, @code{throws} declarations and other things can appear here.  "
"@ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4256 ../../../../../doc/misc/cc-mode.texi:5198
#, no-wrap
msgid "knr-argdecl-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4258
msgid "First line of a K&R C argument declaration.  @ref{K&R Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4258 ../../../../../doc/misc/cc-mode.texi:5199
#, no-wrap
msgid "knr-argdecl"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4260
msgid "Subsequent lines in a K&R C argument declaration.  @ref{K&R Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4260 ../../../../../doc/misc/cc-mode.texi:4453
#, no-wrap
msgid "topmost-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4262
msgid "The first line in a ``topmost'' definition.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4262 ../../../../../doc/misc/cc-mode.texi:4454
#, no-wrap
msgid "topmost-intro-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4266
msgid ""
"Topmost definition continuation lines.  This is only used in the parts that "
"aren't covered by other symbols such as @code{func-decl-cont} and "
"@code{knr-argdecl}.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4266 ../../../../../doc/misc/cc-mode.texi:5105
#, no-wrap
msgid "annotation-top-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4269
msgid ""
"Topmost definition continuation lines where all previous items are "
"annotations.  @ref{Java Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4269 ../../../../../doc/misc/cc-mode.texi:4546
#, no-wrap
msgid "member-init-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4271
msgid "First line in a member initialization list.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4271 ../../../../../doc/misc/cc-mode.texi:4547
#, no-wrap
msgid "member-init-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4273
msgid "Subsequent member initialization list lines.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4273 ../../../../../doc/misc/cc-mode.texi:4519
#, no-wrap
msgid "inher-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4275
msgid "First line of a multiple inheritance list.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4275 ../../../../../doc/misc/cc-mode.texi:4520
#, no-wrap
msgid "inher-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4277
msgid "Subsequent multiple inheritance lines.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4277 ../../../../../doc/misc/cc-mode.texi:4985
#, no-wrap
msgid "block-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4279
msgid "Statement block open brace.  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4279 ../../../../../doc/misc/cc-mode.texi:4654
#, no-wrap
msgid "block-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4281
msgid "Statement block close brace.  @ref{Conditional Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4281 ../../../../../doc/misc/cc-mode.texi:4750
#, no-wrap
msgid "brace-list-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4283
msgid "Open brace of an enum or static array list.  @ref{Brace List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4283 ../../../../../doc/misc/cc-mode.texi:4752
#, no-wrap
msgid "brace-list-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4285
msgid "Close brace of an enum or static array list.  @ref{Brace List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4285 ../../../../../doc/misc/cc-mode.texi:4751
#, no-wrap
msgid "brace-list-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4288
msgid ""
"First line after the opening @samp{@{} in an enum or static array list.  "
"@ref{Brace List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4288 ../../../../../doc/misc/cc-mode.texi:4753
#, no-wrap
msgid "brace-list-entry"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4291
msgid "Subsequent lines in an enum or static array list.  @ref{Brace List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4291 ../../../../../doc/misc/cc-mode.texi:4761
#, no-wrap
msgid "brace-entry-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4294
msgid ""
"Subsequent lines in an enum or static array list where the line begins with "
"an open brace.  @ref{Brace List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4294 ../../../../../doc/misc/cc-mode.texi:4469
#, no-wrap
msgid "statement"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4296
msgid "A statement.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4296 ../../../../../doc/misc/cc-mode.texi:4470
#, no-wrap
msgid "statement-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4298
msgid "A continuation of a statement.  @ref{Function Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4298 ../../../../../doc/misc/cc-mode.texi:5106
#, no-wrap
msgid "annotation-var-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4301
msgid ""
"A continuation of a statement where all previous items are annotations.  "
"@ref{Java Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4301 ../../../../../doc/misc/cc-mode.texi:4653
#, no-wrap
msgid "statement-block-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4304
msgid ""
"The first line in a new statement block.  @ref{Conditional Construct "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4304 ../../../../../doc/misc/cc-mode.texi:4720
#, no-wrap
msgid "statement-case-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4306
msgid "The first line in a case block.  @ref{Switch Statement Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4306 ../../../../../doc/misc/cc-mode.texi:4721
#, no-wrap
msgid "statement-case-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4309
msgid ""
"The first line in a case block that starts with a brace.  @ref{Switch "
"Statement Symbols}."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4312
msgid ""
"The first line after a conditional or loop construct.  @ref{Conditional "
"Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4312 ../../../../../doc/misc/cc-mode.texi:4652
#, no-wrap
msgid "substatement-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4315
msgid ""
"The brace that opens a substatement block.  @ref{Conditional Construct "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4315 ../../../../../doc/misc/cc-mode.texi:4669
#, no-wrap
msgid "substatement-label"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4318
msgid ""
"The first line after a conditional or loop construct if it's a label.  "
"@ref{Conditional Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4318 ../../../../../doc/misc/cc-mode.texi:4719
#, no-wrap
msgid "case-label"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4320
msgid "A label in a @code{switch} block.  @ref{Switch Statement Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4320 ../../../../../doc/misc/cc-mode.texi:4525
#, no-wrap
msgid "access-label"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4322
msgid "C++ access control label.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4322 ../../../../../doc/misc/cc-mode.texi:4981
#, no-wrap
msgid "label"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4324
msgid "Any other label.  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4324 ../../../../../doc/misc/cc-mode.texi:4684
#, no-wrap
msgid "do-while-closure"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4327
msgid ""
"The @code{while} line that ends a @code{do}-@code{while} construct.  "
"@ref{Conditional Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4327 ../../../../../doc/misc/cc-mode.texi:4675
#, no-wrap
msgid "else-clause"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4330
msgid ""
"The @code{else} line of an @code{if}-@code{else} construct.  "
"@ref{Conditional Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4330 ../../../../../doc/misc/cc-mode.texi:4676
#, no-wrap
msgid "catch-clause"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4334
msgid ""
"The @code{catch} or @code{finally} (in Java) line of a "
"@code{try}-@code{catch} construct.  @ref{Conditional Construct Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4334 ../../../../../doc/misc/cc-mode.texi:4957
#, no-wrap
msgid "comment-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4336
msgid "A line containing only a comment introduction.  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4336 ../../../../../doc/misc/cc-mode.texi:4889
#, no-wrap
msgid "arglist-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4338
msgid "The first line in an argument list.  @ref{Paren List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4338 ../../../../../doc/misc/cc-mode.texi:4897
#, no-wrap
msgid "arglist-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4341
msgid ""
"Subsequent argument list lines when no arguments follow on the same line as "
"the arglist opening paren.  @ref{Paren List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4341 ../../../../../doc/misc/cc-mode.texi:4896
#, no-wrap
msgid "arglist-cont-nonempty"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4344
msgid ""
"Subsequent argument list lines when at least one argument follows on the "
"same line as the arglist opening paren.  @ref{Paren List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4344 ../../../../../doc/misc/cc-mode.texi:4890
#, no-wrap
msgid "arglist-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4346
msgid "The solo close paren of an argument list.  @ref{Paren List Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4346 ../../../../../doc/misc/cc-mode.texi:5003
#, no-wrap
msgid "stream-op"
msgstr ""

#.  @emph{FIXME!!!  Can this not be moved somewhere better?}
#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4349
msgid "Lines continuing a stream operator (C++ only).  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4349 ../../../../../doc/misc/cc-mode.texi:4526 ../../../../../doc/misc/cc-mode.texi:4814
#, no-wrap
msgid "inclass"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4351
msgid "The line is nested inside a class definition.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4351 ../../../../../doc/misc/cc-mode.texi:4992
#, no-wrap
msgid "cpp-macro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4353
msgid "The start of a preprocessor macro definition.  @ref{Literal Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4353 ../../../../../doc/misc/cc-mode.texi:5015
#, no-wrap
msgid "cpp-define-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4357
msgid ""
"The first line inside a multiline preprocessor macro if "
"@code{c-syntactic-indentation-in-macros} is set.  @ref{Multiline Macro "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4357 ../../../../../doc/misc/cc-mode.texi:5016
#, no-wrap
msgid "cpp-macro-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4361
msgid ""
"All lines inside multiline preprocessor macros if "
"@code{c-syntactic-indentation-in-macros} is @code{nil}.  @ref{Multiline "
"Macro Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4361 ../../../../../doc/misc/cc-mode.texi:4597
#, no-wrap
msgid "friend"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4363
msgid "A C++ friend declaration.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4363 ../../../../../doc/misc/cc-mode.texi:5068
#, no-wrap
msgid "objc-method-intro"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4366
msgid ""
"The first line of an Objective-C method definition.  @ref{Objective-C Method "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4366 ../../../../../doc/misc/cc-mode.texi:5069
#, no-wrap
msgid "objc-method-args-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4369
msgid ""
"Lines continuing an Objective-C method definition.  @ref{Objective-C Method "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4369 ../../../../../doc/misc/cc-mode.texi:5070
#, no-wrap
msgid "objc-method-call-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4372
msgid ""
"Lines continuing an Objective-C method call.  @ref{Objective-C Method "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4372 ../../../../../doc/misc/cc-mode.texi:4811
#, no-wrap
msgid "extern-lang-open"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4375
msgid ""
"Brace that opens an @code{extern} block (e.g., @code{extern \"C\" "
"@{...@}}).  @ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4375 ../../../../../doc/misc/cc-mode.texi:4812
#, no-wrap
msgid "extern-lang-close"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4378
msgid "Brace that closes an @code{extern} block.  @ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4378 ../../../../../doc/misc/cc-mode.texi:4813
#, no-wrap
msgid "inextern-lang"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4381
msgid ""
"Analogous to @code{inclass} syntactic symbol, but used inside @code{extern} "
"blocks.  @ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4381 ../../../../../doc/misc/cc-mode.texi:4840
#, no-wrap
msgid "namespace-open"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4382 ../../../../../doc/misc/cc-mode.texi:4841
#, no-wrap
msgid "namespace-close"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4383 ../../../../../doc/misc/cc-mode.texi:4842
#, no-wrap
msgid "innamespace"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4386
msgid ""
"These are analogous to the three @code{extern-lang} symbols above, but are "
"returned for C++ namespace blocks.  @ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4386 ../../../../../doc/misc/cc-mode.texi:4846
#, no-wrap
msgid "module-open"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4387 ../../../../../doc/misc/cc-mode.texi:4847
#, no-wrap
msgid "module-close"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4388 ../../../../../doc/misc/cc-mode.texi:4848
#, no-wrap
msgid "inmodule"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4391
msgid ""
"Analogous to the above, but for CORBA IDL @code{module} blocks.  "
"@ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4391 ../../../../../doc/misc/cc-mode.texi:4852
#, no-wrap
msgid "composition-open"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4392 ../../../../../doc/misc/cc-mode.texi:4853
#, no-wrap
msgid "composition-close"
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4393 ../../../../../doc/misc/cc-mode.texi:4854
#, no-wrap
msgid "incomposition"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4396
msgid ""
"Analogous to the above, but for CORBA CIDL @code{composition} blocks.  "
"@ref{External Scope Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4396 ../../../../../doc/misc/cc-mode.texi:4611
#, no-wrap
msgid "template-args-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4398
msgid "C++ template argument list continuations.  @ref{Class Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4398 ../../../../../doc/misc/cc-mode.texi:5171
#, no-wrap
msgid "inlambda"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4402
msgid ""
"Analogous to @code{inclass} syntactic symbol, but used inside lambda (i.e., "
"anonymous) functions.  Used in C++ and Pike modes.  @ref{Statement Block "
"Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4402 ../../../../../doc/misc/cc-mode.texi:5172
#, no-wrap
msgid "lambda-intro-cont"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4406
msgid ""
"Lines continuing the header of a lambda function, i.e., between the "
"@code{lambda} keyword and the function body.  Only used in Pike mode.  "
"@ref{Statement Block Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4406 ../../../../../doc/misc/cc-mode.texi:5131 ../../../../../doc/misc/cc-mode.texi:5185
#, no-wrap
msgid "inexpr-statement"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4411
msgid ""
"A statement block inside an expression.  The gcc C and C++ extension for "
"this is recognized.  It's also used for the special functions that take a "
"statement block as an argument in Pike.  @ref{Statement Block Symbols}."
msgstr ""

#. type: ssindex
#: ../../../../../doc/misc/cc-mode.texi:4411 ../../../../../doc/misc/cc-mode.texi:5097
#, no-wrap
msgid "inexpr-class"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4415
msgid ""
"A class definition inside an expression.  This is used for anonymous classes "
"in Java.  It's also used for anonymous array initializers in Java.  "
"@ref{Java Symbols}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4434 ../../../../../doc/misc/cc-mode.texi:4436 ../../../../../doc/misc/cc-mode.texi:4477
#, no-wrap
msgid "Function Symbols"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4434 ../../../../../doc/misc/cc-mode.texi:4477 ../../../../../doc/misc/cc-mode.texi:4624
#, no-wrap
msgid "Class Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4440
msgid "This example shows a typical function declaration."
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4451
#, no-wrap
msgid ""
" 1: void\n"
" 2: swap( int& a, int& b )\n"
" 3: @{\n"
" 4:     int tmp = a;\n"
" 5:     a = b;\n"
" 6:     b = tmp;\n"
" 7:     int ignored =\n"
" 8:         a + b;\n"
" 9: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4468
msgid ""
"Line 1 shows a @code{topmost-intro} since it is the first line that "
"introduces a top-level construct.  Line 2 is a continuation of the top-level "
"construct introduction so it has the syntax @code{topmost-intro-cont}.  Line "
"3 shows a @code{defun-open} since it is the brace that opens a top-level "
"function definition.  Line 9 is the corresponding @code{defun-close} since "
"it contains the brace that closes the top-level function definition.  Line 4 "
"is a @code{defun-block-intro}, i.e., it is the first line of a brace-block, "
"enclosed in a top-level function definition."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4475
msgid ""
"Lines 5, 6, and 7 are all given @code{statement} syntax since there isn't "
"much special about them.  Note however that line 8 is given "
"@code{statement-cont} syntax since it continues the statement begun on the "
"previous line."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4477 ../../../../../doc/misc/cc-mode.texi:4624 ../../../../../doc/misc/cc-mode.texi:4626 ../../../../../doc/misc/cc-mode.texi:4692
#, no-wrap
msgid "Conditional Construct Symbols"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:4479
#, no-wrap
msgid "Class related Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4483
msgid "Here's an example which illustrates some C++ class syntactic symbols:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4503
#, no-wrap
msgid ""
" 1: class Bass\n"
" 2:     : public Guitar,\n"
" 3:       public Amplifiable\n"
" 4: @{\n"
" 5: public:\n"
" 6:     Bass()\n"
" 7:         : eString( new BassString( 0.105 )),\n"
" 8:           aString( new BassString( 0.085 )),\n"
" 9:           dString( new BassString( 0.065 )),\n"
"10:           gString( new BassString( 0.045 ))\n"
"11:     @{\n"
"12:         eString.tune( 'E' );\n"
"13:         aString.tune( 'A' );\n"
"14:         dString.tune( 'D' );\n"
"15:         gString.tune( 'G' );\n"
"16:     @}\n"
"17:     friend class Luthier;\n"
"18: @};\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4518
msgid ""
"As in the previous example, line 1 has the @code{topmost-intro} syntax.  "
"Here however, the brace that opens a C++ class definition on line 4 is "
"assigned the @code{class-open} syntax.  Note that in C++, classes, structs, "
"and unions are essentially equivalent syntactically (and are very similar "
"semantically), so replacing the @code{class} keyword in the example above "
"with @code{struct} or @code{union} would still result in a syntax of "
"@code{class-open} for line 4 @footnote{This is the case even for C and "
"Objective-C@.  For consistency, structs in all supported languages are "
"syntactically equivalent to classes.  Note however that the keyword "
"@code{class} is meaningless in C and Objective-C.}.  Similarly, line 18 is "
"assigned @code{class-close} syntax."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4524
msgid ""
"Line 2 introduces the inheritance list for the class so it is assigned the "
"@code{inher-intro} syntax, and line 3, which continues the inheritance list "
"is given @code{inher-cont} syntax."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4528
msgid "Hitting @kbd{C-c C-s} on line 5 shows the following analysis:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4531
#, no-wrap
msgid "((inclass 58) (access-label 58))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4541
msgid ""
"The primary syntactic symbol for this line is @code{access-label} as this is "
"a label keyword that specifies access protection in C++.  However, because "
"this line is also a top-level construct inside a class definition, the "
"analysis actually shows two syntactic symbols.  The other syntactic symbol "
"assigned to this line is @code{inclass}.  Similarly, line 6 is given both "
"@code{inclass} and @code{topmost-intro} syntax:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4544
#, no-wrap
msgid "((inclass 58) (topmost-intro 60))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4554
msgid ""
"Line 7 introduces a C++ member initialization list and as such is given "
"@code{member-init-intro} syntax.  Note that in this case it is @emph{not} "
"assigned @code{inclass} since this is not considered a top-level construct.  "
"Lines 8 through 10 are all assigned @code{member-init-cont} since they "
"continue the member initialization list started on line 7."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4555
#, no-wrap
msgid "in-class inline methods"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4559
msgid "Line 11's analysis is a bit more complicated:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4562
#, no-wrap
msgid "((inclass 58) (inline-open))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4573
msgid ""
"This line is assigned a syntax of both @code{inline-open} and @code{inclass} "
"because it opens an @dfn{in-class} C++ inline method definition.  This is "
"distinct from, but related to, the C++ notion of an inline function in that "
"its definition occurs inside an enclosing class definition, which in C++ "
"implies that the function should be inlined.  However, if the definition of "
"the @code{Bass} constructor appeared outside the class definition, the "
"construct would be given the @code{defun-open} syntax, even if the keyword "
"@code{inline} appeared before the method name, as in:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4595
#, no-wrap
msgid ""
" 1: class Bass\n"
" 2:     : public Guitar,\n"
" 3:       public Amplifiable\n"
" 4: @{\n"
" 5: public:\n"
" 6:     Bass();\n"
" 7: @};\n"
" 8:\n"
" 9: inline\n"
"10: Bass::Bass()\n"
"11:     : eString( new BassString( 0.105 )),\n"
"12:       aString( new BassString( 0.085 )),\n"
"13:       dString( new BassString( 0.065 )),\n"
"14:       gString( new BassString( 0.045 ))\n"
"15: @{\n"
"16:     eString.tune( 'E' );\n"
"17:     aString.tune( 'A' );\n"
"18:     dString.tune( 'D' );\n"
"19:     gString.tune( 'G' );\n"
"20: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4603
msgid ""
"Returning to the previous example, line 16 is given @code{inline-close} "
"syntax, while line 12 is given @code{defun-block-open} syntax, and lines 13 "
"through 15 are all given @code{statement} syntax.  Line 17 is interesting in "
"that its syntactic analysis list contains three elements:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4606
#, no-wrap
msgid "((inclass 58) (topmost-intro 380) (friend))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4610
msgid ""
"The @code{friend} and @code{inline-open} syntactic symbols are modifiers "
"that do not have anchor positions."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4613
msgid "Template definitions introduce yet another syntactic symbol:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4618
#, no-wrap
msgid ""
" 1: ThingManager <int,\n"
" 2:    Framework::Callback *,\n"
" 3:    Mutex> framework_callbacks;\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4622
msgid ""
"Here, line 1 is analyzed as a @code{topmost-intro}, but lines 2 and 3 are "
"both analyzed as @code{template-args-cont} lines."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4624 ../../../../../doc/misc/cc-mode.texi:4692 ../../../../../doc/misc/cc-mode.texi:4694 ../../../../../doc/misc/cc-mode.texi:4728
#, no-wrap
msgid "Switch Statement Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4631
msgid ""
"Here is a (totally contrived) example which illustrates how syntax is "
"assigned to various conditional constructs:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4648
#, no-wrap
msgid ""
" 1: void spam( int index )\n"
" 2: @{\n"
" 3:     for( int i=0; i<index; i++ )\n"
" 4:     @{\n"
" 5:         if( i == 10 )\n"
" 6:             do_something_special();\n"
" 7:         else\n"
" 8:           silly_label:\n"
" 9:             do_something( i );\n"
"10:     @}\n"
"11:     do @{\n"
"12:         another_thing( i-- );\n"
"13:     @}\n"
"14:     while( i > 0 );\n"
"15: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4651
msgid "Only the lines that illustrate new syntactic symbols will be discussed."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4663
msgid ""
"Line 4 has a brace which opens a conditional's substatement block.  It is "
"thus assigned @code{substatement-open} syntax, and since line 5 is the first "
"line in the substatement block, it is assigned @code{statement-block-intro} "
"syntax.  Line 10 contains the brace that closes the inner substatement "
"block, and is therefore given the syntax "
"@code{block-close}@footnote{@code{block-open} is used only for "
"``free-standing'' blocks, and is somewhat rare (@pxref{Literal Symbols} for "
"an example.)}.  Line 13 is treated the same way."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4668
msgid ""
"Lines 6 and 9 are also substatements of conditionals, but since they don't "
"start blocks they are given @code{substatement} syntax instead of "
"@code{substatement-open}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4674
msgid ""
"Line 8 contains a label, which is normally given @code{label} syntax.  This "
"one is however a bit special since it's between a conditional and its "
"substatement.  It's analyzed as @code{substatement-label} to let you handle "
"this rather odd case differently from normal labels."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4683
msgid ""
"Line 7 start with an @code{else} that matches the @code{if} statement on "
"line 5.  It is therefore given the @code{else-clause} syntax and is anchored "
"on the matching @code{if}.  The @code{try}-@code{catch} constructs in C++ "
"and Java are treated this way too, except that @code{catch} and (in Java) "
"@code{finally}, are marked with @code{catch-clause}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4690
msgid ""
"The @code{while} construct on line 14 that closes a @code{do} conditional is "
"given the special syntax @code{do-while-closure} if it appears on a line by "
"itself.  Note that if the @code{while} appeared on the same line as the "
"preceding close brace, that line would still have @code{block-close} syntax."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4692 ../../../../../doc/misc/cc-mode.texi:4728 ../../../../../doc/misc/cc-mode.texi:4730 ../../../../../doc/misc/cc-mode.texi:4795
#, no-wrap
msgid "Brace List Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4699
msgid ""
"Switch statements have their own set of syntactic symbols.  Here's an "
"example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4717
#, no-wrap
msgid ""
" 1: void spam( enum Ingredient i )\n"
" 2: @{\n"
" 3:     switch( i ) @{\n"
" 4:     case Ham:\n"
" 5:         be_a_pig();\n"
" 6:         break;\n"
" 7:     case Salt:\n"
" 8:         drink_some_water();\n"
" 9:         break;\n"
"10:     default:\n"
"11:         @{\n"
"12:             what_is_it();\n"
"13:             break;\n"
"14:         @}\n"
"15:     @}\n"
"14: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4726
msgid ""
"Here, lines 4, 7, and 10 are all assigned @code{case-label} syntax, while "
"lines 5 and 8 are assigned @code{statement-case-intro}.  Line 11 is treated "
"slightly differently since it contains a brace that opens a block; it is "
"given @code{statement-case-open} syntax."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4728 ../../../../../doc/misc/cc-mode.texi:4795 ../../../../../doc/misc/cc-mode.texi:4797 ../../../../../doc/misc/cc-mode.texi:4859
#, no-wrap
msgid "External Scope Symbols"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:4733
#, no-wrap
msgid "brace lists"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4740
msgid ""
"There are a set of syntactic symbols that are used to recognize constructs "
"inside of brace lists.  A brace list is defined as an @code{enum} or "
"aggregate initializer list, such as might statically initialize an array of "
"structs.  The three special aggregate constructs in Pike, @code{(@{ @})}, "
"@code{([ ])} and @code{(< >)}, are treated as brace lists too.  An example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4748
#, no-wrap
msgid ""
" 1: static char* ingredients[] =\n"
" 2: @{\n"
" 3:     \"Ham\",\n"
" 4:     \"Salt\",\n"
" 5:     NULL\n"
" 6: @};\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4760
msgid ""
"Following convention, line 2 in this example is assigned "
"@code{brace-list-open} syntax, and line 3 is assigned "
"@code{brace-list-intro} syntax.  Likewise, line 6 is assigned "
"@code{brace-list-close} syntax.  Lines 4 and 5 however, are assigned "
"@code{brace-list-entry} syntax, as would all subsequent lines in this "
"initializer list."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4764
msgid ""
"Your static initializer might be initializing nested structures, for "
"example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4777
#, no-wrap
msgid ""
" 1: struct intpairs[] =\n"
" 2: @{\n"
" 3:     @{ 1, 2 @},\n"
" 4:     @{\n"
" 5:         3,\n"
" 6:         4\n"
" 7:     @}\n"
" 8:     @{ 1,\n"
" 9:       2 @},\n"
"10:     @{ 3, 4 @}\n"
"11: @};\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4793
msgid ""
"Here, you've already seen the analysis of lines 1, 2, 3, and 11.  On line 4, "
"things get interesting; this line is assigned @code{brace-entry-open} "
"syntactic symbol because it's a bracelist entry line that starts with an "
"open brace.  Lines 5 and 6 are pretty standard, and line 7 is a "
"@code{brace-list-close} as you'd expect.  Once again, line 8 is assigned as "
"@code{brace-entry-open} as is line 10.  Line 9 is assigned two syntactic "
"elements, @code{brace-list-intro} with anchor point at the @samp{@{} of line "
"8@footnote{This extra syntactic element was introduced in @ccmode{} 5.33.1 "
"to allow extra flexibility in indenting the second line of such a "
"construct.  You can preserve the behavior resulting from the former "
"syntactic analysis by giving @code{brace-list-entry} an offset of "
"@code{c-lineup-under-anchor} (@pxref{Misc Line-Up}).}, and "
"@code{brace-list-entry} anchored on the @samp{1} of line 8."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4795 ../../../../../doc/misc/cc-mode.texi:4859 ../../../../../doc/misc/cc-mode.texi:4919
#, no-wrap
msgid "Paren List Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4802
msgid ""
"External language definition blocks also have their own syntactic symbols.  "
"In this example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4809
#, no-wrap
msgid ""
" 1: extern \"C\"\n"
" 2: @{\n"
" 3:     int thing_one( int );\n"
" 4:     int thing_two( double );\n"
" 5: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4818
msgid ""
"line 2 is given the @code{extern-lang-open} syntax, while line 5 is given "
"the @code{extern-lang-close} syntax.  The analysis for line 3 yields:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4821
#, no-wrap
msgid "((inextern-lang) (topmost-intro 14))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4826
msgid ""
"where @code{inextern-lang} is a modifier similar in purpose to "
"@code{inclass}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4832
msgid ""
"There are various other top level blocks like @code{extern}, and they are "
"all treated in the same way except that the symbols are named after the "
"keyword that introduces the block.  E.g., C++ namespace blocks get the three "
"symbols @code{namespace-open}, @code{namespace-close} and "
"@code{innamespace}.  The currently recognized top level blocks are:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:4834
#, no-wrap
msgid "@code{extern-lang-open}, @code{extern-lang-close}, @code{inextern-lang}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4838
msgid ""
"@code{extern} blocks in C and C++.@footnote{These should logically be named "
"@code{extern-open}, @code{extern-close} and @code{inextern}, but that isn't "
"the case for historical reasons.}"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:4839
#, no-wrap
msgid "@code{namespace-open}, @code{namespace-close}, @code{innamespace}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4844
msgid "@code{namespace} blocks in C++."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:4845
#, no-wrap
msgid "@code{module-open}, @code{module-close}, @code{inmodule}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4850
msgid "@code{module} blocks in CORBA IDL."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:4851
#, no-wrap
msgid "@code{composition-open}, @code{composition-close}, @code{incomposition}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:4856
msgid "@code{composition} blocks in CORBA CIDL."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4859 ../../../../../doc/misc/cc-mode.texi:4919 ../../../../../doc/misc/cc-mode.texi:5008
#, no-wrap
msgid "Literal Symbols"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:4861
#, no-wrap
msgid "Parenthesis (Argument) List Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4867
msgid ""
"A number of syntactic symbols are associated with parenthesis lists, a.k.a "
"argument lists, as found in function declarations and function calls.  This "
"example illustrates these:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4887
#, no-wrap
msgid ""
" 1: void a_function( int line1,\n"
" 2:                  int line2 );\n"
" 3:\n"
" 4: void a_longer_function(\n"
" 5:     int line1,\n"
" 6:     int line2\n"
" 7:     );\n"
" 8:\n"
" 9: void call_them( int line1, int line2 )\n"
"10: @{\n"
"11:     a_function(\n"
"12:         line1,\n"
"13:         line2\n"
"14:         );\n"
"15:\n"
"16:     a_longer_function( line1,\n"
"17:                        line2 );\n"
"18: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4895
msgid ""
"Lines 5 and 12 are assigned @code{arglist-intro} syntax since they are the "
"first line following the open parenthesis, and lines 7 and 14 are assigned "
"@code{arglist-close} syntax since they contain the parenthesis that closes "
"the argument list."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4906
msgid ""
"Lines that continue argument lists can be assigned one of two syntactic "
"symbols.  For example, Lines 2 and 17 are assigned "
"@code{arglist-cont-nonempty} syntax.  What this means is that they continue "
"an argument list, but that the line containing the parenthesis that opens "
"the list is @emph{not empty} following the open parenthesis.  Contrast this "
"against lines 6 and 13 which are assigned @code{arglist-cont} syntax.  This "
"is because the parenthesis that opens their argument lists is the last "
"character on that line."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4913
msgid ""
"Syntactic elements with @code{arglist-intro}, @code{arglist-cont-nonempty}, "
"and @code{arglist-close} contain two buffer positions: the anchor position "
"(the beginning of the declaration or statement) and the position of the open "
"parenthesis.  The latter position can be used in a line-up function "
"(@pxref{Line-Up Functions})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4917
msgid ""
"Note that there is no @code{arglist-open} syntax.  This is because any "
"parenthesis that opens an argument list, appearing on a separate line, is "
"assigned the @code{statement-cont} syntax instead."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:4919 ../../../../../doc/misc/cc-mode.texi:5008 ../../../../../doc/misc/cc-mode.texi:5010 ../../../../../doc/misc/cc-mode.texi:5049
#, no-wrap
msgid "Multiline Macro Symbols"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:4921
#, no-wrap
msgid "Comment String Label and Macro Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4926
msgid ""
"A few miscellaneous syntactic symbols that haven't been previously covered "
"are illustrated by this C++ example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:4947
#, no-wrap
msgid ""
" 1: void Bass::play( int volume )\n"
" 2: const\n"
" 3: @{\n"
" 4:     /* this line starts a multiline\n"
" 5:      * comment.  This line should get 'c' syntax */\n"
" 6:\n"
" 7:     char* a_multiline_string = \"This line starts a multiline \\\n"
" 8: string.  This line should get 'string' syntax.\";\n"
" 9:\n"
"10:   note:\n"
"11:     @{\n"
"12: #ifdef LOCK\n"
"13:         Lock acquire();\n"
"14: #endif // LOCK\n"
"15:         slap_pop();\n"
"16:         cout << \"I played \"\n"
"17:              << \"a note\\n\";\n"
"18:     @}\n"
"19: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:4950
msgid "The lines to note in this example include:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4955
msgid "Line 2 is assigned the @code{func-decl-cont} syntax."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4962
msgid ""
"Line 4 is assigned both @code{defun-block-intro} @emph{and} "
"@code{comment-intro} syntax.  A syntactic element with @code{comment-intro} "
"has no anchor point.  It is always accompanied by another syntactic element "
"which does have one."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4966
msgid "Line 5 is assigned @code{c} syntax."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4975
msgid ""
"Line 6 which, even though it contains nothing but whitespace, is assigned "
"@code{defun-block-intro}.  Note that the appearance of the comment on lines "
"4 and 5 do not cause line 6 to be assigned @code{statement} syntax because "
"comments are considered to be @dfn{syntactic whitespace}, which are ignored "
"when analyzing code."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4979
msgid "Line 8 is assigned @code{string} syntax."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4983
msgid "Line 10 is assigned @code{label} syntax."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:4990
msgid ""
"Line 11 is assigned @code{block-open} as well as @code{statement} syntax.  A "
"@code{block-open} syntactic element doesn't have an anchor position, since "
"it always appears with another syntactic element which does have one."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:5001
msgid ""
"Lines 12 and 14 are assigned @code{cpp-macro} syntax in addition to the "
"normal syntactic symbols (@code{statement-block-intro} and @code{statement}, "
"respectively).  Normally @code{cpp-macro} is configured to cancel out the "
"normal syntactic context to make all preprocessor directives stick to the "
"first column, but that's easily changed if you want preprocessor directives "
"to be indented like the rest of the code.  Like @code{comment-intro}, a "
"syntactic element with @code{cpp-macro} doesn't contain an anchor position."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:5005
msgid "Line 17 is assigned @code{stream-op} syntax."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5008 ../../../../../doc/misc/cc-mode.texi:5049 ../../../../../doc/misc/cc-mode.texi:5051 ../../../../../doc/misc/cc-mode.texi:5076
#, no-wrap
msgid "Objective-C Method Symbols"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5013
#, no-wrap
msgid "multiline macros"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5022
msgid ""
"Multiline preprocessor macro definitions are normally handled just like "
"other code, i.e., the lines inside them are indented according to the "
"syntactic analysis of the preceding lines inside the macro.  The first line "
"inside a macro definition (i.e., the line after the starting line of the cpp "
"directive itself) gets @code{cpp-define-intro}.  In this example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5029
#, no-wrap
msgid ""
" 1: #define LIST_LOOP(cons, listp)                         \\\n"
" 2:   for (cons = listp; !NILP (cons); cons = XCDR (cons)) \\\n"
" 3:     if (!CONSP (cons))                                 \\\n"
" 4:       signal_error (\"Invalid list format\", listp);     \\\n"
" 5:     else\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5038
msgid ""
"line 1 is given the syntactic symbol @code{cpp-macro}.  The first line of a "
"cpp directive is always given that symbol.  Line 2 is given "
"@code{cpp-define-intro}, so that you can give the macro body as a whole some "
"extra indentation.  Lines 3 through 5 are then analyzed as normal code, "
"i.e., @code{substatement} on lines 3 and 4, and @code{else-clause} on line "
"5."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5045
msgid ""
"The syntactic analysis inside macros can be turned off with "
"@code{c-syntactic-indentation-in-macros} (@pxref{Custom Macros}).  In that "
"case, lines 2 through 5 would all be given @code{cpp-macro-cont} with an "
"anchor position pointing to the @code{#} which starts the cpp "
"directive@footnote{This is how @ccmode{} 5.28 and earlier analyzed macros.}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5047
msgid "@xref{Custom Macros}, for more info about the treatment of macros."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5049 ../../../../../doc/misc/cc-mode.texi:5076 ../../../../../doc/misc/cc-mode.texi:5078 ../../../../../doc/misc/cc-mode.texi:5114
#, no-wrap
msgid "Java Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5057
msgid ""
"In Objective-C buffers, there are three additional syntactic symbols "
"assigned to various message calling constructs.  Here's an example "
"illustrating these:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5066
#, no-wrap
msgid ""
" 1: - (void)setDelegate:anObject\n"
" 2:           withStuff:stuff\n"
" 3: @{\n"
" 4:     [delegate masterWillRebind:self\n"
" 5:               toDelegate:anObject\n"
" 6:               withExtraStuff:stuff];\n"
" 7: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5074
msgid ""
"Here, line 1 is assigned @code{objc-method-intro} syntax, and line 2 is "
"assigned @code{objc-method-args-cont} syntax.  Lines 5 and 6 are both "
"assigned @code{objc-method-call-cont} syntax."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5076 ../../../../../doc/misc/cc-mode.texi:5114 ../../../../../doc/misc/cc-mode.texi:5116 ../../../../../doc/misc/cc-mode.texi:5193
#, no-wrap
msgid "Statement Block Symbols"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5083
msgid "Java has a concept of anonymous classes which can look something like this:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5095
#, no-wrap
msgid ""
" 1:  @@Test\n"
" 2:  public void watch(Observable o) @{\n"
" 3:      @@NonNull\n"
" 4:      Observer obs = new Observer() @{\n"
" 5:          public void update(Observable o, Object arg) @{\n"
" 6:              history.addElement(arg);\n"
" 7:          @}\n"
" 8:      @};\n"
" 9:      o.addObserver(obs);\n"
" 10: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5104
msgid ""
"The brace following the @code{new} operator opens the anonymous class.  "
"Lines 5 and 8 are assigned the @code{inexpr-class} syntax, besides the "
"@code{inclass} symbol used in normal classes.  Thus, the class will be "
"indented just like a normal class, with the added indentation given to "
"@code{inexpr-class}.  An @code{inexpr-class} syntactic element doesn't have "
"an anchor position."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5112
msgid ""
"Line 2 is assigned the @code{annotation-top-cont} syntax, due to it being a "
"continuation of a topmost introduction with an annotation symbol preceding "
"the current line.  Similarly, line 4 is assigned the "
"@code{annotation-var-cont} syntax due to it being a continuation of a "
"variable declaration where preceding the declaration is an annotation."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5122
msgid ""
"There are a few occasions where a statement block might be used inside an "
"expression.  One is in C or C++ code using the gcc extension for this, e.g.:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5129
#, no-wrap
msgid ""
" 1: int res = (@{\n"
" 2:         int y = foo (); int z;\n"
" 3:         if (y > 0) z = y; else z = - y;\n"
" 4:         z;\n"
" 5:     @});\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5137
msgid ""
"Lines 2 and 5 get the @code{inexpr-statement} syntax, besides the symbols "
"they'd get in a normal block.  Therefore, the indentation put on "
"@code{inexpr-statement} is added to the normal statement block indentation.  "
"An @code{inexpr-statement} syntactic element doesn't contain an anchor "
"position."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5140
msgid "C++11's lambda expressions involve a block inside a statement.  For example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5145
#, no-wrap
msgid ""
" 1:  std::for_each(someList.begin(), someList.end(), [&total](int x) @{\n"
" 2:                                                     total += x;\n"
" 3:                                                 @});\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5152
msgid ""
"Here a lambda expressions begins at the open bracket on line 1 and ends at "
"the closing brace on line 3.  Line 2, in addition to the familiar "
"@code{defun-block-intro} syntactic element, is also prefixed by an "
"@code{inlambda} element, which is typically used to indent the entire lambda "
"expression to under the opening bracket."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5155
msgid ""
"In Pike code, there are a few other situations where blocks occur inside "
"statements, as illustrated here:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5169
#, no-wrap
msgid ""
" 1: array itgob()\n"
" 2: @{\n"
" 3:     string s = map (backtrace()[-2][3..],\n"
" 4:                     lambda\n"
" 5:                         (mixed arg)\n"
" 6:                     @{\n"
" 7:                         return sprintf (\"%t\", arg);\n"
" 8:                     @}) * \", \" + \"\\n\";\n"
" 9:     return catch @{\n"
"10:             write (s + \"\\n\");\n"
"11:         @};\n"
"12: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5184
msgid ""
"Lines 4 through 8 contain a lambda function, which @ccmode{} recognizes by "
"the @code{lambda} keyword.  If the function argument list is put on a line "
"of its own, as in line 5, it gets the @code{lambda-intro-cont} syntax.  The "
"function body is handled as an inline method body, with the addition of the "
"@code{inlambda} syntactic symbol.  This means that line 6 gets "
"@code{inlambda} and @code{inline-open}, and line 8 gets "
"@code{inline-close}@footnote{You might wonder why it doesn't get "
"@code{inlambda} too.  It's because the closing brace is relative to the "
"opening brace, which stands on its own line in this example.  If the opening "
"brace was hanging on the previous line, then the closing brace would get the "
"@code{inlambda} syntax too to be indented correctly.}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5191
msgid ""
"On line 9, @code{catch} is a special function taking a statement block as "
"its argument.  The block is handled as an in-expression statement with the "
"@code{inexpr-statement} syntax, just like the gcc extended C example above.  "
"The other similar special function, @code{gauge}, is handled like this too."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5202
msgid ""
"Two other syntactic symbols can appear in old style, non-prototyped C code "
"@footnote{a.k.a.@: K&R C, or Kernighan & Ritchie C}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5211
#, no-wrap
msgid ""
" 1: int add_three_integers(a, b, c)\n"
" 2:      int a;\n"
" 3:      int b;\n"
" 4:      int c;\n"
" 5: @{\n"
" 6:     return a + b + c;\n"
" 7: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5217
msgid ""
"Here, line 2 is the first line in an argument declaration list and so is "
"given the @code{knr-argdecl-intro} syntactic symbol.  Subsequent lines "
"(i.e., lines 3 and 4 in this example), are given @code{knr-argdecl} syntax."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5228
msgid ""
"Indentation for a line is calculated from the syntactic context "
"(@pxref{Syntactic Analysis})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5233
msgid ""
"First, a buffer position is found whose column will be the base for the "
"indentation calculation.  It's the anchor position in the first syntactic "
"element that provides one that is used.  If no syntactic element has an "
"anchor position then column zero is used."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5240
msgid ""
"Second, the syntactic symbols in each syntactic element are looked up in the "
"@code{c-offsets-alist} style variable (@pxref{c-offsets-alist}), which is an "
"association list of syntactic symbols and the offsets to apply for those "
"symbols.  These offsets are added together with the base column to produce "
"the new indentation column."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5243
msgid ""
"Let's use our two code examples above to see how this works.  Here is our "
"first example again:"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5255
msgid ""
"Let's say point is on line 3 and we hit the @key{TAB} key to reindent the "
"line.  The syntactic context for that line is:"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5264
msgid ""
"Since buffer position 29 is the first and only anchor position in the list, "
"@ccmode{} goes there and asks for the current column.  This brace is in "
"column zero, so @ccmode{} uses @samp{0} as the base column."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5269
msgid ""
"Next, @ccmode{} looks up @code{defun-block-intro} in the "
"@code{c-offsets-alist} style variable.  Let's say it finds the value "
"@samp{4}; it adds this to the base column @samp{0}, yielding a running total "
"indentation of 4 spaces."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5273
msgid ""
"Since there is only one syntactic element on the list for this line, "
"indentation calculation is complete, and the total indentation for the line "
"is 4 spaces."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5290
msgid ""
"If we were to hit @kbd{TAB} on line 4 in the above example, the same basic "
"process is performed, despite the differences in the syntactic context.  The "
"context for this line is:"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5301
msgid ""
"Here, @ccmode{} goes to buffer position 46, which is the @samp{i} in "
"@code{if} on line 3.  This character is in the fourth column on that line so "
"the base column is @samp{4}.  Then @ccmode{} looks up the "
"@code{substatement-open} symbol in @code{c-offsets-alist}.  Let's say it "
"finds the value @samp{4}.  It's added with the base column and yields an "
"indentation for the line of 8 spaces."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5303
msgid "Simple, huh?"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5307
msgid ""
"Actually, it's a bit more complicated than that since the entries on "
"@code{c-offsets-alist} can be much more than plain offsets.  "
"@xref{c-offsets-alist}, for the full story."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5311
msgid ""
"Anyway, the mode usually just does The Right Thing without you having to "
"think about it in this much detail.  But when customizing indentation, it's "
"helpful to understand the general indentation model being used."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5316
msgid ""
"As you configure @ccmode{}, you might want to set the variable "
"@code{c-echo-syntactic-information-p} to non-@code{nil} so that the "
"syntactic context and calculated offset always is echoed in the minibuffer "
"when you hit @kbd{TAB}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5319 ../../../../../doc/misc/cc-mode.texi:6927 ../../../../../doc/misc/cc-mode.texi:6971 ../../../../../doc/misc/cc-mode.texi:7019 ../../../../../doc/misc/cc-mode.texi:7077 ../../../../../doc/misc/cc-mode.texi:7134
#, no-wrap
msgid "Custom Macros"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5322
#, no-wrap
msgid "customization, indentation"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5333
msgid ""
"The principal variable for customizing indentation is the style variable "
"@code{c-offsets-alist}, which gives an @dfn{offset} (an indentation rule) "
"for each syntactic symbol.  Its structure and semantics are completely "
"described in @ref{c-offsets-alist}.  The various ways you can set the "
"variable, including the use of the @ccmode{} style system, are described in "
"@ref{Config Basics} and its sections, in particular @ref{Style Variables}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5337
msgid ""
"The simplest and most used kind of ``offset'' setting in "
"@code{c-offsets-alist} is in terms of multiples of @code{c-basic-offset}:"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:5339
#, no-wrap
msgid "basic-offset @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:5344
msgid ""
"This style variable holds the basic offset between indentation levels.  Its "
"factory default is 4, but all the built-in styles set it themselves, to some "
"value between 2 (for @code{gnu} style) and 8 (for @code{bsd}, @code{linux}, "
"and @code{python} styles)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5350
msgid ""
"The most flexible ``offset'' setting you can make in @code{c-offsets-alist} "
"is a line-up function (or even a list of them), either one supplied by "
"@ccmode{} (@pxref{Line-Up Functions}) or one you write yourself "
"(@pxref{Custom Line-Up})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5355
msgid ""
"Finally, in @ref{Other Indentation} you'll find the tool of last resort: a "
"hook which is called after a line has been indented.  You can install "
"functions here to make ad-hoc adjustments to any line's indentation."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5366 ../../../../../doc/misc/cc-mode.texi:5535 ../../../../../doc/misc/cc-mode.texi:5537 ../../../../../doc/misc/cc-mode.texi:5643
#, no-wrap
msgid "Interactive Customization"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5375
msgid ""
"This section explains the structure and semantics of the style variable "
"@code{c-offsets-alist}, the principal variable for configuring indentation.  "
"Details of how to set it up, and its relationship to @ccmode{}'s style "
"system are given in @ref{Style Variables}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:5382
msgid ""
"This is an alist which associates an offset with each syntactic symbol.  "
"This @dfn{offset} is a rule specifying how to indent a line whose syntactic "
"context matches the symbol.  @xref{Syntactic Analysis}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:5387
msgid ""
"Note that the buffer-local binding of this alist in a @ccmode{} buffer "
"contains an entry for @emph{every} syntactic symbol.  Its global binding and "
"its settings within style specifications usually contain only a few "
"entries.  @xref{Style Variables}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:5393
msgid ""
"The offset specification associated with any particular syntactic symbol can "
"be an integer, a variable name, a vector, a function or lambda expression, a "
"list, or one of the following special symbols: @code{+}, @code{-}, "
"@code{++}, @code{--}, @code{*}, or @code{/}.  The meanings of these values "
"are described in detail below."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:5396
msgid ""
"Here is an example fragment of a @code{c-offsets-alist}, showing some of "
"these kinds of offsets:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5406
#, no-wrap
msgid ""
"((statement . 0)\n"
" (substatement . +)\n"
" (cpp-macro . [0])\n"
" (topmost-intro-cont . c-lineup-topmost-intro-cont)\n"
" (statement-block-intro . (add c-lineup-whitesmith-in-block\n"
"                               c-indent-multi-line-block))\n"
" @dots{}\n"
"@*)\n"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5409
#, no-wrap
msgid "Command c-set-offset (@kbd{C-c C-o})"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5410 ../../../../../doc/misc/cc-mode.texi:5630
#, no-wrap
msgid "set-offset @r{(c-)}"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:5411 ../../../../../doc/misc/cc-mode.texi:5631
#, no-wrap
msgid "C-c C-o"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5415
msgid ""
"This command changes the entry for a syntactic symbol in the current binding "
"of @code{c-offsets-alist}, or it inserts a new entry if there isn't already "
"one for that syntactic symbol."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5421
msgid ""
"You can use @code{c-set-offset} interactively within a @ccmode{} buffer to "
"make experimental changes to your indentation settings.  @kbd{C-c C-o} "
"prompts you for the syntactic symbol to change (defaulting to that of the "
"current line) and the new offset (defaulting to the current offset)."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5429
msgid ""
"@code{c-set-offset} takes two arguments when used programmatically: "
"@var{symbol}, the syntactic element symbol to change and @var{offset}, the "
"new offset for that syntactic element.  You can call the command in your "
"@file{.emacs} to change the global binding of @code{c-offsets-alist} "
"(@pxref{Style Variables}); you can use it in a hook function to make changes "
"from the current style.  @ccmode{} itself uses this function when "
"initializing styles."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5431
#, no-wrap
msgid "offset specification"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5434
msgid ""
"The ``offset specifications'' in @code{c-offsets-alist} can be any of the "
"following:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5436
#, no-wrap
msgid "An integer"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5445
msgid ""
"The integer specifies a relative offset.  All relative offsets@footnote{The "
"syntactic context @code{@w{((defun-block-intro 2724) (comment-intro))}} "
"would likely have two relative offsets.} will be added together and used to "
"calculate the indentation relative to an anchor position earlier in the "
"buffer.  @xref{Indentation Calculation}, for details.  Most of the time, "
"it's probably better to use one of the special symbols like @code{+} than an "
"integer (apart from zero)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5446
#, no-wrap
msgid ""
"One of the symbols @code{+}, @code{-}, @code{++}, @code{--}, @code{*}, or "
"@code{/}"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5449
msgid ""
"These special symbols describe a relative offset in multiples of "
"@code{c-basic-offset}:"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5454
msgid ""
"By defining a style's indentation in terms of @code{c-basic-offset}, you can "
"change the amount of whitespace given to an indentation level while "
"maintaining the same basic shape of your code.  Here are the values that the "
"special symbols correspond to:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5456
#, no-wrap
msgid "+"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5458
msgid "@code{c-basic-offset} times 1"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5458
#, no-wrap
msgid "-"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5460
msgid "@code{c-basic-offset} times @minus{}1"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5460
#, no-wrap
msgid "++"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5462
msgid "@code{c-basic-offset} times 2"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5462
#, no-wrap
msgid "--"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5464
msgid "@code{c-basic-offset} times @minus{}2"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5466
msgid "@code{c-basic-offset} times 0.5"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5468
msgid "@code{c-basic-offset} times @minus{}0.5"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5470
#, no-wrap
msgid "A vector"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5477
msgid ""
"The first element of the vector, an integer, sets the absolute indentation "
"column.  This will override any previously calculated indentation, but won't "
"override relative indentation calculated from syntactic elements later on in "
"the syntactic context of the line being indented.  @xref{Indentation "
"Calculation}.  Any elements in the vector beyond the first will be ignored."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5478
#, no-wrap
msgid "A function or lambda expression"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5484
msgid ""
"The function will be called and its return value will in turn be evaluated "
"as an offset specification.  Functions are useful when more context than "
"just the syntactic symbol is needed to get the desired indentation.  "
"@xref{Line-Up Functions}, and @ref{Custom Line-Up}, for details about them."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5485
#, no-wrap
msgid "A symbol with a variable binding"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5490
msgid ""
"If the symbol also has a function binding, the function takes precedence "
"over the variable.  Otherwise the value of the variable is used.  It must be "
"an integer (which is used as relative offset) or a vector (an absolute "
"offset)."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5491
#, no-wrap
msgid "A list"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5498
msgid ""
"The offset can also be a list containing several offset specifications; "
"these are evaluated recursively and combined.  A list is typically only "
"useful when some of the offsets are line-up functions.  A common strategy is "
"calling a sequence of functions in turn until one of them recognizes that it "
"is appropriate for the source line and returns a non-@code{nil} value."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5502
msgid ""
"@code{nil} values are always ignored when the offsets are combined.  The "
"first element of the list specifies the method of combining the "
"non-@code{nil} offsets from the remaining elements:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5504
#, no-wrap
msgid "first"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5507
msgid ""
"Use the first offset that doesn't evaluate to @code{nil}.  Subsequent "
"elements of the list don't get evaluated."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5507
#, no-wrap
msgid "min"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5510
msgid ""
"Use the minimum of all the offsets.  All must be either relative or "
"absolute; they can't be mixed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5510
#, no-wrap
msgid "max"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5513
msgid ""
"Use the maximum of all the offsets.  All must be either relative or "
"absolute; they can't be mixed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:5513
#, no-wrap
msgid "add"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5517
msgid ""
"Add all the evaluated offsets together.  Exactly one of them may be "
"absolute, in which case the result is absolute.  Any relative offsets that "
"preceded the absolute one in the list will be ignored in that case."
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:5522
msgid ""
"As a compatibility measure, if the first element is none of the above then "
"it too will be taken as an offset specification and the whole list will be "
"combined according to the method @code{first}."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:5524
#, no-wrap
msgid "c-strict-syntax-p"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:5525
#, no-wrap
msgid "strict-syntax-p @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5533
msgid ""
"If an offset specification evaluates to @code{nil}, then a relative offset "
"of 0 (zero) is used@footnote{There is however a variable "
"@code{c-strict-syntax-p} that when set to non-@code{nil} will cause an error "
"to be signaled in that case.  It's now considered obsolete since it doesn't "
"work well with some of the alignment functions that return @code{nil} "
"instead of zero.  You should therefore leave @code{c-strict-syntax-p} set to "
"@code{nil}.}."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5538
#, no-wrap
msgid "customization, interactive"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5539
#, no-wrap
msgid "interactive customization"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5546
msgid ""
"As an example of how to customize indentation, let's change the style of "
"this example@footnote{In this and subsequent examples, the original code is "
"formatted using the @samp{gnu} style unless otherwise indicated.  "
"@xref{Styles}.}:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5557
#, no-wrap
msgid ""
" 1: int add( int val, int incr, int doit )\n"
" 2: @{\n"
" 3:   if( doit )\n"
" 4:     @{\n"
" 5:       return( val + incr );\n"
" 6:     @}\n"
" 7:   return( val );\n"
" 8: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5562
msgid "to:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5573 ../../../../../doc/misc/cc-mode.texi:5617
#, no-wrap
msgid ""
" 1: int add( int val, int incr, int doit )\n"
" 2: @{\n"
" 3:   if( doit )\n"
" 4:   @{\n"
" 5:     return( val + incr );\n"
" 6:   @}\n"
" 7:   return( val );\n"
" 8: @}\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5582
msgid ""
"In other words, we want to change the indentation of braces that open a "
"block following a condition so that the braces line up under the "
"conditional, instead of being indented.  Notice that the construct we want "
"to change starts on line 4.  To change the indentation of a line, we need to "
"see which syntactic symbols affect the offset calculations for that line.  "
"Hitting @kbd{C-c C-s} on line 4 yields:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:5585
#, no-wrap
msgid "((substatement-open 44))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5591
msgid ""
"so we know that to change the offset of the open brace, we need to change "
"the indentation for the @code{substatement-open} syntactic symbol."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5596
msgid ""
"To do this interactively, just hit @kbd{C-c C-o}.  This prompts you for the "
"syntactic symbol to change, providing a reasonable default.  In this case, "
"the default is @code{substatement-open}, which is just the syntactic symbol "
"we want to change!"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5602
msgid ""
"After you hit return, @ccmode{} will then prompt you for the new offset "
"value, with the old value as the default.  The default in this case is "
"@samp{+}, but we want no extra indentation so enter @samp{0} and @kbd{RET}.  "
"This will associate the offset 0 with the syntactic symbol "
"@code{substatement-open}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5606
msgid ""
"To check your changes quickly, just hit @kbd{C-c C-q} "
"(@code{c-indent-defun}) to reindent the entire function.  The example should "
"now look like:"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5627
msgid ""
"Notice how just changing the open brace offset on line 4 is all we needed to "
"do.  Since the other affected lines are indented relative to line 4, they "
"are automatically indented the way you'd expect.  For more complicated "
"examples, this might not always work.  The general approach to take is to "
"always start adjusting offsets for lines higher up in the file, then "
"reindent and see if any following lines need further adjustments."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5629
#, no-wrap
msgid "Command c-set-offset symbol offset"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5635
msgid ""
"This is the command bound to @kbd{C-c C-o}.  It provides a convenient way to "
"set offsets on @code{c-offsets-alist} both interactively (see the example "
"above) and from your mode hook."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/cc-mode.texi:5639
msgid ""
"It takes two arguments when used programmatically: @var{symbol} is the "
"syntactic element symbol to change and @var{offset} is the new offset for "
"that syntactic element."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5643 ../../../../../doc/misc/cc-mode.texi:6759 ../../../../../doc/misc/cc-mode.texi:6875
#, no-wrap
msgid "Custom Line-Up"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5648
#, no-wrap
msgid "line-up function"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:5649
#, no-wrap
msgid "indentation function"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5655
msgid ""
"Often there are cases when a simple offset setting on a syntactic symbol "
"isn't enough to get the desired indentation---for example, you might want to "
"line up a closing parenthesis with the matching opening one rather than "
"indenting relative to its ``anchor point''.  @ccmode{} provides this "
"flexibility with @dfn{line-up functions}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5662
msgid ""
"The way you associate a line-up function with a syntactic symbol is "
"described in @ref{c-offsets-alist}.  @ccmode{} comes with many predefined "
"line-up functions for common situations.  If none of these does what you "
"want, you can write your own.  @xref{Custom Line-Up}.  Sometimes, it is "
"easier to tweak the standard indentation by adding a function to "
"@code{c-special-indent-hook} (@pxref{Other Indentation})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5666
msgid ""
"The line-up functions haven't been adapted for AWK buffers or tested with "
"them.  Some of them might work serendipitously.  There shouldn't be any "
"problems writing custom line-up functions for AWK mode."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5672
msgid ""
"The calling convention for line-up functions is described fully in "
"@ref{Custom Line-Up}.  Roughly speaking, the return value is either an "
"offset itself (such as @code{+} or @code{[0]}), another line-up function, or "
"it's @code{nil}, meaning ``this function is inappropriate in this case - try "
"a different one''.  @xref{c-offsets-alist}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5677
msgid ""
"The subsections below describe all the standard line-up functions, "
"categorized by the sort of token the lining-up centers around.  For each of "
"these functions there is a ``works with'' list that indicates which "
"syntactic symbols the function is intended to be used with."
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:5680
msgid "Works with:@"
msgstr ""

#. type: ifinfo
#: ../../../../../doc/misc/cc-mode.texi:5683
msgid "@unmacro workswith"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:5685
msgid "Works with:"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:5690
msgid "<--> @i{c-basic-offset}"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:5694
msgid "<--><--> @i{c-basic-offset}"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:5698
msgid "<- @i{\\func\\}"
msgstr ""

#. type: iftex
#: ../../../../../doc/misc/cc-mode.texi:5703
msgid "@unmacro hereFn"
msgstr ""

#. type: macro
#: ../../../../../doc/misc/cc-mode.texi:5705
msgid "<-@i{\\func\\}"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5717 ../../../../../doc/misc/cc-mode.texi:5974
#, no-wrap
msgid "Brace/Paren Line-Up"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5717 ../../../../../doc/misc/cc-mode.texi:5974 ../../../../../doc/misc/cc-mode.texi:6299
#, no-wrap
msgid "List Line-Up"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:5719
#, no-wrap
msgid "Brace and Parenthesis Line-Up Functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5724
msgid ""
"The line-up functions here calculate the indentation for braces, parentheses "
"and statements within brace blocks."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5725
#, no-wrap
msgid "c-lineup-close-paren"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5726
#, no-wrap
msgid "lineup-close-paren @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5730
msgid ""
"Line up the closing paren under its corresponding open paren if the open "
"paren is followed by code.  If the open paren ends its line, no indentation "
"is added.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5736
#, no-wrap
msgid ""
"main (int,\n"
"      char **\n"
"     )                @hereFn{c-lineup-close-paren}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5741 ../../../../../doc/misc/cc-mode.texi:5795 ../../../../../doc/misc/cc-mode.texi:5829 ../../../../../doc/misc/cc-mode.texi:5952 ../../../../../doc/misc/cc-mode.texi:6160 ../../../../../doc/misc/cc-mode.texi:6171 ../../../../../doc/misc/cc-mode.texi:6204 ../../../../../doc/misc/cc-mode.texi:6238 ../../../../../doc/misc/cc-mode.texi:6730 ../../../../../doc/misc/cc-mode.texi:6746
msgid "and"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5747
#, no-wrap
msgid ""
"main (\n"
"    int, char **\n"
")                     @hereFn{c-lineup-close-paren}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5754
msgid ""
"As a special case, if a brace block is opened at the same line as the open "
"parenthesis of the argument list, the indentation is @code{c-basic-offset} "
"instead of the open paren column.  See @code{c-lineup-arglist} for further "
"discussion of this ``DWIM'' measure."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5756
msgid "@workswith All @code{*-close} symbols."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5761
#, no-wrap
msgid "c-lineup-arglist-close-under-paren"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5762
#, no-wrap
msgid "lineup-arglist-close-under-paren @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5768
msgid ""
"Set your @code{arglist-close} syntactic symbol to this line-up function so "
"that parentheses that close argument lists will line up under the "
"parenthesis that opened the argument list.  It can also be used with "
"@code{arglist-cont} and @code{arglist-cont-nonempty} to line up all lines "
"inside a parenthesis under the open paren."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5773
msgid ""
"As a special case, if a brace block is opened at the same line as the open "
"parenthesis of the argument list, the indentation is @code{c-basic-offset} "
"only.  See @code{c-lineup-arglist} for further discussion of this ``DWIM'' "
"measure."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5777
msgid ""
"@workswith Almost all symbols, but are typically most useful on "
"@code{arglist-close}, @code{brace-list-close}, @code{arglist-cont} and "
"@code{arglist-cont-nonempty}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5781
#, no-wrap
msgid "c-indent-one-line-block"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5782
#, no-wrap
msgid "indent-one-line-block @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5784
msgid "Indent a one line block @code{c-basic-offset} extra.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5790
#, no-wrap
msgid ""
"if (n > 0)\n"
"    @{m+=n; n=0;@}      @hereFn{c-indent-one-line-block}\n"
"@sssTBasicOffset{}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5802
#, no-wrap
msgid ""
"if (n > 0)\n"
"@{                     @hereFn{c-indent-one-line-block}\n"
"    m+=n; n=0;\n"
"@}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5808
msgid ""
"The block may be surrounded by any kind of parenthesis characters.  "
"@code{nil} is returned if the line doesn't start with a one line block, "
"which makes the function usable in list expressions."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5811 ../../../../../doc/misc/cc-mode.texi:5847
msgid ""
"@workswith Almost all syntactic symbols, but most useful on the @code{-open} "
"symbols."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5815
#, no-wrap
msgid "c-indent-multi-line-block"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5816
#, no-wrap
msgid "indent-multi-line-block @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5818
msgid "Indent a multiline block @code{c-basic-offset} extra.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5824
#, no-wrap
msgid ""
"int *foo[] = @{\n"
"    NULL,\n"
"    @{17@},             @hereFn{c-indent-multi-line-block}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5838
#, no-wrap
msgid ""
"int *foo[] = @{\n"
"    NULL,\n"
"        @{             @hereFn{c-indent-multi-line-block}\n"
"        17\n"
"        @},\n"
"    @sssTBasicOffset{}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5844
msgid ""
"The block may be surrounded by any kind of parenthesis characters.  "
"@code{nil} is returned if the line doesn't start with a multiline block, "
"which makes the function usable in list expressions."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5851
#, no-wrap
msgid "c-lineup-runin-statements"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5852
#, no-wrap
msgid "lineup-runin-statements @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5857
msgid ""
"Line up statements for coding standards which place the first statement in a "
"block on the same line as the block opening brace@footnote{Run-in style "
"doesn't really work too well.  You might need to write your own custom "
"line-up functions to better support this style.}.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5864
#, no-wrap
msgid ""
"int main()\n"
"@{ puts (\"Hello!\");\n"
"  return 0;           @hereFn{c-lineup-runin-statements}\n"
"@}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5870
msgid ""
"If there is no statement after the opening brace to align with, @code{nil} "
"is returned.  This makes the function usable in list expressions."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5872
msgid "@workswith The @code{statement} syntactic symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5876
#, no-wrap
msgid "c-lineup-inexpr-block"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5877
#, no-wrap
msgid "lineup-inexpr-block @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5884
msgid ""
"This can be used with the in-expression block symbols to indent the whole "
"block to the column where the construct is started.  E.g., for Java "
"anonymous classes, this lines up the class under the @samp{new} keyword, and "
"in Pike it lines up the lambda function body under the @samp{lambda} "
"keyword.  Returns @code{nil} if the block isn't part of such a construct."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5887
msgid "@workswith @code{inlambda}, @code{inexpr-statement}, @code{inexpr-class}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5891
#, no-wrap
msgid "c-lineup-after-whitesmith-blocks"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5892
#, no-wrap
msgid "lineup-after-whitesmith-blocks @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5897
msgid ""
"Compensate for Whitesmith style indentation of blocks.  Due to the way "
"@ccmode{} calculates anchor positions for normal lines inside blocks, this "
"function is necessary for those lines to get correct Whitesmith style "
"indentation.  Consider the following examples:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5904
#, no-wrap
msgid ""
"int foo()\n"
"    @{\n"
"    a;\n"
"    x;                 @hereFn{c-lineup-after-whitesmith-blocks}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5915
#, no-wrap
msgid ""
"int foo()\n"
"    @{\n"
"        @{\n"
"        a;\n"
"        @}\n"
"    x;                 @hereFn{c-lineup-after-whitesmith-blocks}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5924
msgid ""
"The fact that the line with @code{x} is preceded by a Whitesmith style "
"indented block in the latter case and not the first should not affect its "
"indentation.  But since CC Mode in cases like this uses the indentation of "
"the preceding statement as anchor position, the @code{x} would in the second "
"case be indented too much if the offset for @code{statement} was set simply "
"to zero."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5929
msgid ""
"This lineup function corrects for this situation by detecting if the anchor "
"position is at an open paren character.  In that case, it instead indents "
"relative to the surrounding block just like "
"@code{c-lineup-whitesmith-in-block}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5932
msgid ""
"@workswith @code{brace-list-entry}, @code{brace-entry-open}, "
"@code{statement}, @code{arglist-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5936
#, no-wrap
msgid "c-lineup-whitesmith-in-block"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5937
#, no-wrap
msgid "lineup-whitesmith-in-block @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5940
msgid ""
"Line up lines inside a block in Whitesmith style.  It's done in a way that "
"works both when the opening brace hangs and when it doesn't.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5947
#, no-wrap
msgid ""
"something\n"
"    @{\n"
"    foo;              @hereFn{c-lineup-whitesmith-in-block}\n"
"    @}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:5959
#, no-wrap
msgid ""
"something @{\n"
"    foo;              @hereFn{c-lineup-whitesmith-in-block}\n"
"    @}\n"
"@sssTBasicOffset{}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5964
msgid ""
"In the first case the indentation is kept unchanged, in the second "
"@code{c-basic-offset} is added."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5971
msgid ""
"@workswith @code{defun-close}, @code{defun-block-intro}, "
"@code{inline-close}, @code{block-close}, @code{brace-list-close}, "
"@code{brace-list-intro}, @code{statement-block-intro}, @code{arglist-intro}, "
"@code{arglist-cont-nonempty}, @code{arglist-close}, and all @code{in*} "
"symbols, e.g., @code{inclass} and @code{inextern-lang}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:5974 ../../../../../doc/misc/cc-mode.texi:6299 ../../../../../doc/misc/cc-mode.texi:6447
#, no-wrap
msgid "Operator Line-Up"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:5976
#, no-wrap
msgid "List Line-Up Functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5981
msgid ""
"The line-up functions here calculate the indentation for lines which form "
"lists of items, usually separated by commas."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:5985
msgid ""
"The function @ref{c-lineup-arglist-close-under-paren}, which is mainly for "
"indenting a close parenthesis, is also useful for the lines contained within "
"parentheses."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5986
#, no-wrap
msgid "c-lineup-arglist"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:5987
#, no-wrap
msgid "lineup-arglist @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5989
msgid "Line up the current argument line under the first argument."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:5994
msgid ""
"As a special case, if an argument on the same line as the open parenthesis "
"starts with a brace block opener, the indentation is @code{c-basic-offset} "
"only.  This is intended as a ``DWIM'' measure in cases like macros that "
"contain statement blocks, e.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6001
#, no-wrap
msgid ""
"A_VERY_LONG_MACRO_NAME (@{\n"
"        some (code, with + long, lines * in[it]);\n"
"    @});\n"
"@sssTBasicOffset{}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6008
msgid ""
"This is motivated partly because it's more in line with how code blocks are "
"handled, and partly since it approximates the behavior of earlier CC Mode "
"versions, which due to inaccurate analysis tended to indent such cases this "
"way."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6010
msgid "@workswith @code{arglist-cont-nonempty}, @code{arglist-close}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6014
#, no-wrap
msgid "c-lineup-arglist-intro-after-paren"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6015
#, no-wrap
msgid "lineup-arglist-intro-after-paren @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6018
msgid ""
"Line up a line to just after the open paren of the surrounding paren or "
"brace block."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6022
msgid ""
"@workswith @code{defun-block-intro}, @code{brace-list-intro}, "
"@code{statement-block-intro}, @code{statement-case-intro}, "
"@code{arglist-intro}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6026
#, no-wrap
msgid "c-lineup-2nd-brace-entry-in-arglist"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6027
#, no-wrap
msgid "lineup-2nd-brace-entry-in-arglist (c-)"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6031
msgid ""
"Line up the second entry of a brace block under the first, when the first "
"line is also contained in an arglist or an enclosing brace @emph{on that "
"line}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6033
msgid "I.e. handle something like the following:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6040
#, no-wrap
msgid ""
"set_line (line_t @{point_t@{0.4, 0.2@},\n"
"                  point_t@{0.2, 0.5@},       @hereFn{brace-list-intro}\n"
"                  .....@});\n"
"         ^ enclosing parenthesis.\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6048
msgid ""
"The middle line of that example will have a syntactic context with three "
"syntactic symbols, @code{arglist-cont-nonempty}, @code{brace-list-intro}, "
"and @code{brace-list-entry} (@pxref{Brace List Symbols})."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6054
msgid ""
"This function is intended for use in a list.  If the construct being "
"analyzed isn't like the preceding, the function returns nil.  Otherwise it "
"returns the function @code{c-lineup-arglist-intro-after-paren}, which the "
"caller then uses to perform indentation."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6056 ../../../../../doc/misc/cc-mode.texi:6098 ../../../../../doc/misc/cc-mode.texi:6141
msgid "@workswith{} @code{brace-list-intro}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6060
#, no-wrap
msgid "c-lineup-class-decl-init-+"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6061
#, no-wrap
msgid "lineup-class-decl-init-+ (c-)"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6064
msgid ""
"Line up the second entry of a class (etc.) initializer @code{c-basic-offset} "
"characters in from the identifier when:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:6067 ../../../../../doc/misc/cc-mode.texi:6109
msgid "The type is a class, struct, union, etc. (but not an enum);"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:6069 ../../../../../doc/misc/cc-mode.texi:6111
msgid "There is a brace block in the type declaration, specifying it; and"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/cc-mode.texi:6072 ../../../../../doc/misc/cc-mode.texi:6114
msgid ""
"The first element of the initializer is on the same line as its opening "
"brace."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6075 ../../../../../doc/misc/cc-mode.texi:6117
msgid "I.e. we have a construct like this:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6085
#, no-wrap
msgid ""
"struct STR @{\n"
"    int i; float f;\n"
"@} str_1 = @{1, 1.7@},\n"
"    str_2 = @{2,\n"
"         3.1          @hereFn{brace-list-intro}\n"
"    @};\n"
"    @sssTBasicOffset{}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6092
msgid ""
"Note that the syntactic context of the @code{brace-list-intro} line also has "
"a syntactic element with the symbol @code{brace-list-entry} (@pxref{Brace "
"List Symbols})."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6096 ../../../../../doc/misc/cc-mode.texi:6139
msgid ""
"This function is intended for use in a list.  If the above structure isn't "
"present, the function returns nil, allowing a different offset specification "
"to indent the line."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6102
#, no-wrap
msgid "c-lineup-class-decl-init-after-brace"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6103
#, no-wrap
msgid "lineup-class-decl-init-after-brace (c-)"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6106
msgid ""
"Line up the second entry of a class (etc.) initializer after its opening "
"brace when:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6126
#, no-wrap
msgid ""
"struct STR @{\n"
"    int i; float f;\n"
"@} str_1 = @{1, 1.7@},\n"
"    str_2 = @{2,\n"
"             3.1      @hereFn{brace-list-intro}\n"
"    @};\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6135
msgid ""
"Note that the syntactic context of the @code{brace-list-intro} line also has "
"a syntactic element with the symbol @code{brace-list-entry} (@pxref{Brace "
"List Symbols}).  Also note that this function works by returning the symbol "
"@code{c-lineup-arglist-intro-after-paren}, which the caller then uses to "
"perform the indentation."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6145
#, no-wrap
msgid "c-lineup-multi-inher"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6146
#, no-wrap
msgid "lineup-multi-inher @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6149
msgid ""
"Line up the classes in C++ multiple inheritance clauses and member "
"initializers under each other.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6155
#, no-wrap
msgid ""
"Foo::Foo (int a, int b):\n"
"    Cyphr (a),\n"
"    Bar (b)           @hereFn{c-lineup-multi-inher}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6166
#, no-wrap
msgid ""
"class Foo\n"
"    : public Cyphr,\n"
"      public Bar      @hereFn{c-lineup-multi-inher}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6177
#, no-wrap
msgid ""
"Foo::Foo (int a, int b)\n"
"    : Cyphr (a)\n"
"    , Bar (b)         @hereFn{c-lineup-multi-inher}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6181
msgid "@workswith @code{inher-cont}, @code{member-init-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6185
#, no-wrap
msgid "c-lineup-java-inher"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6186
#, no-wrap
msgid "lineup-java-inher @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6192
msgid ""
"Line up Java implements and extends declarations.  If class names follow on "
"the same line as the @samp{implements}/@samp{extends} keyword, they are "
"lined up under each other.  Otherwise, they are indented by adding "
"@code{c-basic-offset} to the column of the keyword.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6199
#, no-wrap
msgid ""
"class Foo\n"
"    extends\n"
"        Bar           @hereFn{c-lineup-java-inher}\n"
"    @sssTBasicOffset{}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6210
#, no-wrap
msgid ""
"class Foo\n"
"    extends Cyphr,\n"
"            Bar       @hereFn{c-lineup-java-inher}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6214
msgid "@workswith @code{inher-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6218
#, no-wrap
msgid "c-lineup-java-throws"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6219
#, no-wrap
msgid "lineup-java-throws @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6226
msgid ""
"Line up Java throws declarations.  If exception names follow on the same "
"line as the throws keyword, they are lined up under each other.  Otherwise, "
"they are indented by adding @code{c-basic-offset} to the column of the "
"@samp{throws} keyword.  The @samp{throws} keyword itself is also indented by "
"@code{c-basic-offset} from the function declaration start if it doesn't "
"hang.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6233
#, no-wrap
msgid ""
"int foo()\n"
"    throws            @hereFn{c-lineup-java-throws}\n"
"        Bar           @hereFn{c-lineup-java-throws}\n"
"@sssTsssTBasicOffset{}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6244
#, no-wrap
msgid ""
"int foo() throws Cyphr,\n"
"                 Bar,    @hereFn{c-lineup-java-throws}\n"
"                 Vlod    @hereFn{c-lineup-java-throws}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6248
msgid "@workswith @code{func-decl-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6252
#, no-wrap
msgid "c-lineup-template-args"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6253
#, no-wrap
msgid "lineup-template-args @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6257
msgid ""
"Line up the arguments of a template argument list under each other, but only "
"in the case where the first argument is on the same line as the opening "
"@samp{<}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6260
msgid ""
"To allow this function to be used in a list expression, @code{nil} is "
"returned if there's no template argument on the first line."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6262
msgid "@workswith @code{template-args-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6266
#, no-wrap
msgid "c-lineup-ObjC-method-call"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6267
#, no-wrap
msgid "lineup-ObjC-method-call @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6274
msgid ""
"For Objective-C code, line up selector args as Emacs Lisp mode does with "
"function args: go to the position right after the message receiver, and if "
"you are at the end of the line, indent the current line c-basic-offset "
"columns from the opening bracket; otherwise you are looking at the first "
"character of the first method call argument, so lineup the current line with "
"it."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6276
msgid "@workswith @code{objc-method-call-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6280
#, no-wrap
msgid "c-lineup-ObjC-method-args"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6281
#, no-wrap
msgid "lineup-ObjC-method-args @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6284
msgid ""
"For Objective-C code, line up the colons that separate args.  The colon on "
"the current line is aligned with the one on the first line."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6286 ../../../../../doc/misc/cc-mode.texi:6296
msgid "@workswith @code{objc-method-args-cont}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6290
#, no-wrap
msgid "c-lineup-ObjC-method-args-2"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6291
#, no-wrap
msgid "lineup-ObjC-method-args-2 @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6294
msgid ""
"Similar to @code{c-lineup-ObjC-method-args} but lines up the colon on the "
"current line with the colon on the previous line."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:6299 ../../../../../doc/misc/cc-mode.texi:6447 ../../../../../doc/misc/cc-mode.texi:6557
#, no-wrap
msgid "Comment Line-Up"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:6301
#, no-wrap
msgid "Operator Line-Up Functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6307
msgid ""
"The line-up functions here calculate the indentation for lines which start "
"with an operator, by lining it up with something on the previous line."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6308
#, no-wrap
msgid "c-lineup-argcont"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6309
#, no-wrap
msgid "lineup-argcont @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6311
msgid "Line up a continued argument.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6316
#, no-wrap
msgid ""
"foo (xyz, aaa + bbb + ccc\n"
"          + ddd + eee + fff);  @hereFn{c-lineup-argcont}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6321
msgid ""
"Only continuation lines like this are touched, @code{nil} is returned on "
"lines which are the start of an argument."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6325
msgid ""
"Within a gcc @code{asm} block, @code{:} is recognized as an argument "
"separator, but of course only between operand specifications, not in the "
"expressions for the operands."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6327 ../../../../../doc/misc/cc-mode.texi:6361 ../../../../../doc/misc/cc-mode.texi:6703
msgid "@workswith @code{arglist-cont}, @code{arglist-cont-nonempty}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6331
#, no-wrap
msgid "c-lineup-arglist-operators"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6332
#, no-wrap
msgid "lineup-arglist-operators @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6336
msgid ""
"Line up lines starting with an infix operator under the open paren.  Return "
"@code{nil} on lines that don't start with an operator, to leave those cases "
"to other line-up functions.  Example:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6343
#, no-wrap
msgid ""
"if (  x < 10\n"
"   || at_limit (x,     @hereFn{c-lineup-arglist-operators}\n"
"                list)  @hereFn{c-lineup-arglist-operators@r{ returns nil}}\n"
"   )\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6350
msgid ""
"Since this function doesn't do anything for lines without an infix operator "
"you typically want to use it together with some other lineup settings, e.g., "
"as follows (the @code{arglist-close} setting is just a suggestion to get a "
"consistent style):"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:6358
#, no-wrap
msgid ""
"(c-set-offset 'arglist-cont\n"
"              '(c-lineup-arglist-operators 0))\n"
"(c-set-offset 'arglist-cont-nonempty\n"
"              '(c-lineup-arglist-operators c-lineup-arglist))\n"
"(c-set-offset 'arglist-close\n"
"              '(c-lineup-arglist-close-under-paren))\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6365
#, no-wrap
msgid "c-lineup-assignments"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6366
#, no-wrap
msgid "lineup-assignments @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6371
msgid ""
"Line up the current line after the assignment operator on the first line in "
"the statement.  If there isn't any, return @code{nil} to allow stacking with "
"other line-up functions.  If the current line contains an assignment "
"operator too, try to align it with the first one."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6374 ../../../../../doc/misc/cc-mode.texi:6388 ../../../../../doc/misc/cc-mode.texi:6412 ../../../../../doc/misc/cc-mode.texi:6443
msgid ""
"@workswith @code{topmost-intro-cont}, @code{statement-cont}, "
"@code{arglist-cont}, @code{arglist-cont-nonempty}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6379
#, no-wrap
msgid "c-lineup-math"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6380
#, no-wrap
msgid "lineup-math @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6385
msgid ""
"Like @code{c-lineup-assignments} but indent with @code{c-basic-offset} if no "
"assignment operator was found on the first line.  I.e., this function is the "
"same as specifying a list @code{(c-lineup-assignments +)}.  It's provided "
"for compatibility with old configurations."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6392
#, no-wrap
msgid "c-lineup-cascaded-calls"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6393
#, no-wrap
msgid "lineup-cascaded-calls @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6398
msgid ""
"Line up ``cascaded calls'' under each other.  If the line begins with "
"@code{->} or @code{.} and the preceding line ends with one or more function "
"calls preceded by the same token, then the arrow is lined up with the first "
"of those tokens.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6404
#, no-wrap
msgid ""
"r = proc->add(17)->add(18)\n"
"        ->add(19) +         @hereFn{c-lineup-cascaded-calls}\n"
"  offset;                   @hereFn{c-lineup-cascaded-calls@r{ "
"(inactive)}}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6409
msgid ""
"In any other situation @code{nil} is returned to allow use in list "
"expressions."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6416
#, no-wrap
msgid "c-lineup-streamop"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6417
#, no-wrap
msgid "lineup-streamop @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6419
msgid "Line up C++ stream operators (i.e., @samp{<<} and @samp{>>})."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6421
msgid "@workswith @code{stream-op}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6425
#, no-wrap
msgid "c-lineup-string-cont"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6426
#, no-wrap
msgid "lineup-string-cont @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6430
msgid ""
"Line up a continued string under the one it continues.  A continued string "
"in this sense is where a string literal follows directly after another one.  "
"E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6435
#, no-wrap
msgid ""
"result = prefix + \"A message \"\n"
"                  \"string.\";    @hereFn{c-lineup-string-cont}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6440
msgid ""
"@code{nil} is returned in other situations, to allow stacking with other "
"lineup functions."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:6449
#, no-wrap
msgid "Comment Line-Up Functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6454
msgid ""
"The lineup functions here calculate the indentation for several types of "
"comment structure."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6455
#, no-wrap
msgid "c-lineup-C-comments"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6456
#, no-wrap
msgid "lineup-C-comments @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6459
msgid ""
"Line up C block comment continuation lines.  Various heuristics are used to "
"handle most of the common comment styles.  Some examples:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6465
#, no-wrap
msgid ""
"/*                 /**               /*\n"
" * text             * text             text\n"
" */                 */               */\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6473
#, no-wrap
msgid ""
"/* text            /*                /**\n"
"   text            ** text            ** text\n"
"*/                 */                 */\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6481
#, no-wrap
msgid ""
"/**************************************************\n"
" * text\n"
" *************************************************/\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6495
#, no-wrap
msgid ""
"/**************************************************\n"
"    Free form text comments:\n"
" In comments with a long delimiter line at the\n"
" start, the indentation is kept unchanged for lines\n"
" that start with an empty comment line prefix.  The\n"
" delimiter line is whatever matches the\n"
" @code{comment-start-skip} regexp.\n"
"**************************************************/\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6501
msgid ""
"The style variable @code{c-comment-prefix-regexp} is used to recognize the "
"comment line prefix, e.g., the @samp{*} that usually starts every line "
"inside a comment."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6503
msgid "@workswith The @code{c} syntactic symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6507
#, no-wrap
msgid "c-lineup-comment"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6508
#, no-wrap
msgid "lineup-comment @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6512
msgid ""
"Line up a comment-only line according to the style variable "
"@code{c-comment-only-line-offset}.  If the comment is lined up with a "
"comment starter on the previous line, that alignment is preserved."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6513
#, no-wrap
msgid "c-comment-only-line-offset"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6514
#, no-wrap
msgid "comment-only-line-offset @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6517
msgid ""
"This style variable specifies the extra offset for the line.  It can contain "
"an integer or a cons cell of the form"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:6520
#, no-wrap
msgid "(@r{@var{non-anchored-offset}} . @r{@var{anchored-offset}})\n"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6527
msgid ""
"where @var{non-anchored-offset} is the amount of offset given to "
"non-column-zero anchored lines, and @var{anchored-offset} is the amount of "
"offset to give column-zero anchored lines.  Just an integer as value is "
"equivalent to @code{(@r{@var{value}} . -1000)}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6530 ../../../../../doc/misc/cc-mode.texi:6554
msgid "@workswith @code{comment-intro}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6534
#, no-wrap
msgid "c-lineup-knr-region-comment"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6535
#, no-wrap
msgid "lineup-knr-region-comment @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6539
msgid ""
"Line up a comment in the ``K&R region'' with the declaration.  That is the "
"region between the function or class header and the beginning of the block.  "
"E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6547
#, no-wrap
msgid ""
"int main()\n"
"/* Called at startup. */  @hereFn{c-lineup-knr-region-comment}\n"
"@{\n"
"  return 0;\n"
"@}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6552
msgid ""
"Return @code{nil} if called in any other situation, to be useful in list "
"expressions."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/cc-mode.texi:6559
#, no-wrap
msgid "Miscellaneous Line-Up Functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6564
msgid ""
"The line-up functions here are the odds and ends which didn't fit into any "
"earlier category."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6565
#, no-wrap
msgid "c-lineup-dont-change"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6566
#, no-wrap
msgid "lineup-dont-change @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6569
msgid ""
"This lineup function makes the line stay at whatever indentation it already "
"has; think of it as an identity function for lineups."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6571
msgid "@workswith Any syntactic symbol."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6575
#, no-wrap
msgid "c-lineup-under-anchor"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6580
msgid ""
"Line up a line directly underneath its anchor point.  This is like @samp{0}, "
"except any previously calculated offset contributions are disregarded."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6582
msgid "@workswith Any syntactic symbol which has an anchor point."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6586
#, no-wrap
msgid "c-lineup-cpp-define"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6587
#, no-wrap
msgid "lineup-cpp-define @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6590
msgid ""
"Line up macro continuation lines according to the indentation of the "
"construct preceding the macro.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6595
#, no-wrap
msgid ""
"const char msg[] =    @hereFn{@r{The beginning of the preceding "
"construct.}}\n"
"  \\\"Some text.\\\";\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6600
#, no-wrap
msgid ""
"#define X(A, B)  \\\n"
"do @{             \\    @hereFn{c-lineup-cpp-define}\n"
"  printf (A, B); \\\n"
"@} while (0)\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6605 ../../../../../doc/misc/cc-mode.texi:6640
msgid "and:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6611
#, no-wrap
msgid ""
"int dribble() @{\n"
"  if (!running)       @hereFn{@r{The beginning of the preceding "
"construct.}}\n"
"    error(\\\"Not running!\\\");\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6616
#, no-wrap
msgid ""
"#define X(A, B)    \\\n"
"  do @{             \\  @hereFn{c-lineup-cpp-define}\n"
"    printf (A, B); \\\n"
"  @} while (0)\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6625
msgid ""
"If @code{c-syntactic-indentation-in-macros} is non-@code{nil}, the function "
"returns the relative indentation to the macro start line to allow "
"accumulation with other offsets.  E.g., in the following cases, "
"@code{cpp-define-intro} is combined with the @code{statement-block-intro} "
"that comes from the @samp{do @{} that hangs on the @samp{#define} line:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6630
#, no-wrap
msgid ""
"const char msg[] =\n"
"  \\\"Some text.\\\";\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6635
#, no-wrap
msgid ""
"#define X(A, B) do @{ \\\n"
"  printf (A, B);     \\  @hereFn{c-lineup-cpp-define}\n"
"  this->refs++;      \\\n"
"@} while (0)             @hereFn{c-lineup-cpp-define}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6646
#, no-wrap
msgid ""
"int dribble() @{\n"
"  if (!running)\n"
"    error(\\\"Not running!\\\");\n"
"\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6651
#, no-wrap
msgid ""
"#define X(A, B) do @{ \\\n"
"    printf (A, B);   \\  @hereFn{c-lineup-cpp-define}\n"
"    this->refs++;    \\\n"
"  @} while (0)           @hereFn{c-lineup-cpp-define}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6658
msgid ""
"The relative indentation returned by @code{c-lineup-cpp-define} is zero and "
"two, respectively, on the two lines in each of these examples.  They are "
"then added to the two column indentation that @code{statement-block-intro} "
"gives in both cases here."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6662
msgid ""
"If the relative indentation is zero, then @code{nil} is returned instead.  "
"That is useful in a list expression to specify the default indentation on "
"the top level."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6669
msgid ""
"If @code{c-syntactic-indentation-in-macros} is @code{nil} then this function "
"keeps the current indentation, except for empty lines (ignoring the ending "
"backslash) where it takes the indentation from the closest preceding "
"nonempty line in the macro.  If there's no such line in the macro then the "
"indentation is taken from the construct preceding it, as described above."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6671
msgid "@workswith @code{cpp-define-intro}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6675
#, no-wrap
msgid "c-lineup-gcc-asm-reg"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6676
#, no-wrap
msgid "lineup-gcc-asm-reg @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6678
msgid "Line up a gcc asm register under one on a previous line."
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6687
#, no-wrap
msgid ""
"    asm (\"foo %1, %0\\n\"\n"
"         \"bar %0, %1\"\n"
"         : \"=r\" (w),\n"
"           \"=r\" (x)\n"
"         :  \"0\" (y),\n"
"            \"1\" (z));\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6692
msgid ""
"The @samp{x} line is aligned to the text after the @samp{:} on the @samp{w} "
"line, and similarly @samp{z} under @samp{y}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6697
msgid ""
"This is done only in an @samp{asm} or @samp{__asm__} block, and only to "
"those lines mentioned.  Anywhere else @code{nil} is returned.  The usual "
"arrangement is to have this routine as an extra feature at the start of "
"arglist lineups, e.g.:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:6700
#, no-wrap
msgid "(c-lineup-gcc-asm-reg c-lineup-arglist)\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6707
#, no-wrap
msgid "c-lineup-topmost-intro-cont"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6708
#, no-wrap
msgid "lineup-topmost-intro-cont @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6717
msgid ""
"Line up declaration continuation lines zero or one indentation "
"step@footnote{This function is mainly provided to mimic the behavior of CC "
"Mode 5.28 and earlier where this case wasn't handled consistently so that "
"those lines could be analyzed as either topmost-intro-cont or "
"statement-cont.  It's used for @code{topmost-intro-cont} by default, but you "
"might consider using @code{+} instead.}.  For lines preceding a definition, "
"zero is used.  For other lines, @code{c-basic-offset} is added to the "
"indentation.  E.g.:"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6725
#, no-wrap
msgid ""
"int\n"
"neg (int i)           @hereFn{c-lineup-topmost-intro-cont}\n"
"@{\n"
"    return -i;\n"
"@}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6741
#, no-wrap
msgid ""
"struct\n"
"larch                 @hereFn{c-lineup-topmost-intro-cont}\n"
"@{\n"
"    double height;\n"
"@}\n"
"    the_larch,        @hereFn{c-lineup-topmost-intro-cont}\n"
"    another_larch;    @hereFn{c-lineup-topmost-intro-cont}\n"
"@sssTBasicOffset{}\n"
msgstr ""

#. type: group
#: ../../../../../doc/misc/cc-mode.texi:6752
#, no-wrap
msgid ""
"struct larch\n"
"the_larch,            @hereFn{c-lineup-topmost-intro-cont}\n"
"    another_larch;    @hereFn{c-lineup-topmost-intro-cont}\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6756
msgid "@workswith @code{topmost-intro-cont}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:6761
#, no-wrap
msgid "Custom Line-Up Functions"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:6762
#, no-wrap
msgid "customization, indentation functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6770
msgid ""
"The most flexible way to customize indentation is by writing custom line-up "
"functions, and associating them with specific syntactic symbols "
"(@pxref{c-offsets-alist}).  Depending on the effect you want, it might be "
"better to write a @code{c-special-indent-hook} function rather than a "
"line-up function (@pxref{Other Indentation})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6780
msgid ""
"@ccmode{} comes with an extensive set of predefined line-up functions, not "
"all of which are used by the default styles.  So there's a good chance the "
"function you want already exists.  @xref{Line-Up Functions}, for a list of "
"them.  If you write your own line-up function, it's probably a good idea to "
"start working from one of these predefined functions, which can be found in "
"the file @file{cc-align.el}.  If you have written a line-up function that "
"you think is generally useful, you're very welcome to contribute it; please "
"contact @email{bug-cc-mode@@gnu.org}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6790
msgid ""
"Line-up functions are passed a single argument, the syntactic element (see "
"below).  At the time of the call, point will be somewhere on the line being "
"indented.  The return value is a @code{c-offsets-alist} offset "
"specification: for example, an integer, a symbol such as @code{+}, a vector, "
"@code{nil}@footnote{Returning @code{nil} is useful when the offset "
"specification for a syntactic element is a list containing the line-up "
"function (@pxref{c-offsets-alist}).}, or even another line-up function.  "
"Full details of these are in @ref{c-offsets-alist}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6795
msgid ""
"Line-up functions must not move point or change the content of the buffer "
"(except temporarily).  They are however allowed to do @dfn{hidden buffer "
"changes}, i.e., setting text properties for caching purposes etc.  Buffer "
"undo recording is disabled while they run."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6798
msgid ""
"The syntactic element passed as the parameter to a line-up function is a "
"cons cell of the form"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:6801
#, no-wrap
msgid "(@r{@var{syntactic-symbol}} . @r{@var{anchor-position}})\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6816
msgid ""
"where @var{syntactic-symbol} is the symbol that the function was called for, "
"and @var{anchor-position} is the anchor position (if any)  for the construct "
"that triggered the syntactic symbol (@pxref{Syntactic Analysis}).  This cons "
"cell is how the syntactic element of a line used to be represented in "
"@ccmode{} 5.28 and earlier.  Line-up functions are still passed this cons "
"cell, so as to preserve compatibility with older configurations.  In the "
"future, we may decide to convert to using the full list format---you can "
"prepare your setup for this by using the access functions "
"(@code{c-langelem-sym}, etc.)@: described below."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6817
#, no-wrap
msgid "c-syntactic-element"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6818
#, no-wrap
msgid "syntactic-element @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6830
msgid ""
"Some syntactic symbols, e.g., @code{arglist-cont-nonempty}, have more info "
"in the syntactic element: typically other positions that can be interesting "
"besides the anchor position.  That info can't be accessed through the passed "
"argument, which is a cons cell.  Instead, you can get this information from "
"the variable @code{c-syntactic-element}, which is dynamically bound to the "
"complete syntactic element.  The variable @code{c-syntactic-context} might "
"also be useful: it gets dynamically bound to the complete syntactic "
"context.  @xref{Custom Braces}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6836
msgid ""
"@ccmode{} provides a few functions to access parts of syntactic elements in "
"a more abstract way.  Besides making the code easier to read, they also hide "
"the difference between the old cons cell form used in the line-up function "
"argument and the new list form used in @code{c-syntactic-element} and "
"everywhere else.  The functions are:"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6837
#, no-wrap
msgid "c-langelem-sym langelem"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6838
#, no-wrap
msgid "langelem-sym @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6840
msgid "Return the syntactic symbol in @var{langelem}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6842
#, no-wrap
msgid "c-langelem-pos langelem"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6843
#, no-wrap
msgid "langelem-pos @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6845
msgid ""
"Return the anchor position in @var{langelem}, or @code{nil} if there is "
"none."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6847
#, no-wrap
msgid "c-langelem-col langelem &optional preserve-point"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6848
#, no-wrap
msgid "langelem-col @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6852
msgid ""
"Return the column of the anchor position in @var{langelem}.  Also move the "
"point to that position unless @var{preserve-point} is non-@code{nil}."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6854
#, no-wrap
msgid "c-langelem-2nd-pos langelem"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6855
#, no-wrap
msgid "langelem-2nd-pos @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6858
msgid ""
"Return the secondary position in @var{langelem}, or @code{nil} if there is "
"none."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:6863
msgid ""
"Note that the return value of this function is always @code{nil} if "
"@var{langelem} is in the old cons cell form.  Thus this function is only "
"meaningful when used on syntactic elements taken from "
"@code{c-syntactic-element} or @code{c-syntactic-context}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6869
msgid ""
"Sometimes you may need to use the syntactic context of a line other than the "
"one being indented.  You can determine this by (temporarily)  moving point "
"onto this line and calling @code{c-guess-basic-syntax} (@pxref{Syntactic "
"Analysis})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6873
msgid ""
"Custom line-up functions can be as simple or as complex as you like, and any "
"syntactic symbol that appears in @code{c-offsets-alist} can have a custom "
"line-up function associated with it."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:6877
#, no-wrap
msgid "Other Special Indentations"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6882
msgid ""
"To configure macros which you invoke without a terminating @samp{;}, "
"@pxref{Macros with ;}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6884
msgid "Here are the remaining odds and ends regarding indentation:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6885
#, no-wrap
msgid "c-label-minimum-indentation"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6886
#, no-wrap
msgid "label-minimum-indentation @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6890
msgid ""
"In @samp{gnu} style (@pxref{Built-in Styles}), a minimum indentation is "
"imposed on lines inside code blocks.  This minimum indentation is controlled "
"by this style variable.  The default value is 1."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6891
#, no-wrap
msgid "c-gnu-impose-minimum"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:6892
#, no-wrap
msgid "gnu-impose-minimum @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6896
msgid ""
"It's the function @code{c-gnu-impose-minimum} that enforces this minimum "
"indentation.  It must be present on @code{c-special-indent-hook} to work."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6899
#, no-wrap
msgid "special-indent-hook @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6909
msgid ""
"This style variable is a standard hook variable that is called after every "
"line is indented by @ccmode{}.  It is called only if "
"@code{c-syntactic-indentation} is non-@code{nil} (which it is by default "
"(@pxref{Indentation Engine Basics})).  You can put a function on this hook "
"to do any special indentation or ad hoc line adjustments your style "
"dictates, such as adding extra indentation to constructors or destructor "
"declarations in a class definition, etc.  Sometimes it is better to write a "
"custom Line-up Function instead (@pxref{Custom Line-Up})."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6919
msgid ""
"When the indentation engine calls this hook, the variable "
"@code{c-syntactic-context} is bound to the current syntactic context (i.e., "
"what you would get by typing @kbd{C-c C-s} on the source line.  @xref{Custom "
"Braces}.).  Note that you should not change point or mark inside a "
"@code{c-special-indent-hook} function, i.e., you'll probably want to wrap "
"your function in a @code{save-excursion}@footnote{The numerical value "
"returned by @code{point} will change if you change the indentation of the "
"line within a @code{save-excursion} form, but point itself will still be "
"over the same piece of text.}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6923
msgid ""
"Setting @code{c-special-indent-hook} in style definitions is handled "
"slightly differently from other variables---A style can only add functions "
"to this hook, not remove them.  @xref{Style Variables}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:6927 ../../../../../doc/misc/cc-mode.texi:7134 ../../../../../doc/misc/cc-mode.texi:7136 ../../../../../doc/misc/cc-mode.texi:7178
#, no-wrap
msgid "Odds and Ends"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:6930
#, no-wrap
msgid "macros"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:6931
#, no-wrap
msgid "preprocessor directives"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6940
msgid ""
"Preprocessor macros in C, C++, and Objective C (introduced by "
"@code{#define}) have a syntax different from the main language---for "
"example, a macro declaration is not terminated by a semicolon, and if it is "
"more than a line long, line breaks in it must be escaped with backslashes.  "
"@ccmode{} has some commands to manipulate these, see @ref{Macro "
"Backslashes}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6944
msgid ""
"Normally, the lines in a multi-line macro are indented relative to each "
"other as though they were code.  You can suppress this behavior by setting "
"the following user option:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6945
#, no-wrap
msgid "c-syntactic-indentation-in-macros"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6946
#, no-wrap
msgid "syntactic-indentation-in-macros @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6950
msgid ""
"Enable syntactic analysis inside macros, which is the default.  If this is "
"@code{nil}, all lines inside macro definitions are analyzed as "
"@code{cpp-macro-cont}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6962
msgid ""
"Because a macro can expand into anything at all, near where one is invoked "
"@ccmode{} can only indent and fontify code heuristically.  Sometimes it gets "
"it wrong.  Usually you should try to design your macros so that they ``look "
"like ordinary code'' when you invoke them.  However, two situations are so "
"common that @ccmode{} handles them specially: that is when certain macros "
"needn't (or mustn't) be followed by a @samp{;}, and when certain macros (or "
"compiler directives) expand to nothing.  You need to configure @ccmode{} to "
"handle these macros properly, see @ref{Macros with ;} and @ref{Noise "
"Macros}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:6971 ../../../../../doc/misc/cc-mode.texi:7019
#, no-wrap
msgid "Macro Backslashes"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:6971 ../../../../../doc/misc/cc-mode.texi:7019 ../../../../../doc/misc/cc-mode.texi:7077
#, no-wrap
msgid "Macros with ;"
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:6973
#, no-wrap
msgid "Customizing Macro Backslashes"
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/cc-mode.texi:6974
#, no-wrap
msgid "#define"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:6980
msgid ""
"@ccmode{} provides some tools to help keep the line continuation backslashes "
"in macros neat and tidy.  Their precise action is customized with these "
"variables:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6981
#, no-wrap
msgid "c-backslash-column"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6982
#, no-wrap
msgid "backslash-column @r{(c-)}"
msgstr ""

#. type: defoptx
#: ../../../../../doc/misc/cc-mode.texi:6983
#, no-wrap
msgid "c-backslash-max-column"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:6984
#, no-wrap
msgid "backslash-max-column @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6989
msgid ""
"These variables control the alignment columns for line continuation "
"backslashes in multiline macros.  They are used by the functions that "
"automatically insert or align such backslashes, e.g., "
"@code{c-backslash-region} and @code{c-context-line-break}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:6998
msgid ""
"@code{c-backslash-column} specifies the minimum column for the backslashes.  "
"If any line in the macro goes past this column, then the next tab stop "
"(i.e., next multiple of @code{tab-width}) in that line is used as the "
"alignment column for all the backslashes, so that they remain in a single "
"column.  However, if any lines go past @code{c-backslash-max-column} then "
"the backslashes in the rest of the macro will be kept at that column, so "
"that the lines which are too long ``stick out'' instead."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7002
msgid ""
"Don't ever set these variables to @code{nil}.  If you want to disable the "
"automatic alignment of backslashes, use @code{c-auto-align-backslashes}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7004
#, no-wrap
msgid "c-auto-align-backslashes"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7005
#, no-wrap
msgid "auto-align-backslashes @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7011
msgid ""
"Align automatically inserted line continuation backslashes if "
"non-@code{nil}.  When line continuation backslashes are inserted "
"automatically for line breaks in multiline macros, e.g., by "
"@code{c-context-line-break}, they are aligned with the other backslashes in "
"the same macro if this flag is set."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7016
msgid ""
"If @code{c-auto-align-backslashes} is @code{nil}, automatically inserted "
"backslashes are preceded by a single space, and backslashes get aligned only "
"when you explicitly invoke the command @code{c-backslash-region} (@kbd{C-c "
"C-\\})."
msgstr ""

#. type: section
#: ../../../../../doc/misc/cc-mode.texi:7021
#, no-wrap
msgid "Macros with semicolons"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7022
#, no-wrap
msgid "macros with semicolons"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7031
msgid ""
"Macros which needn't (or mustn't) be followed by a semicolon when you invoke "
"them, @dfn{macros with semicolons}, are very common.  These can cause "
"@ccmode{} to parse the next line wrongly as a @code{statement-cont} "
"(@pxref{Function Symbols}) and thus mis-indent it.  At the top level, a "
"macro invocation before a defun start can cause, for example, "
"@code{c-beginning-of-defun} (@kbd{C-M-a}) not to find the correct start of "
"the current function."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7034
msgid ""
"You can prevent these by specifying which macros have semicolons.  It "
"doesn't matter whether or not such a macro has a parameter list:"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7035
#, no-wrap
msgid "c-macro-names-with-semicolon"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7036
#, no-wrap
msgid "macro-names-with-semicolon @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7041
msgid ""
"This buffer-local variable specifies which macros have semicolons.  After "
"setting its value, you need to call @code{c-make-macro-with-semi-re} for it "
"to take effect.  It should be set to one of these values:"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:7045
msgid "There are no macros with semicolons."
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:7045
#, no-wrap
msgid "a list of strings"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:7049
msgid ""
"Each string is the name of a macro with a semicolon.  Only valid "
"@code{#define} names are allowed here.  For example, to set the default "
"value, you could write the following into your @file{.emacs}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7053
#, no-wrap
msgid ""
"(setq c-macro-names-with-semicolon\n"
"      '(\"Q_OBJECT\" \"Q_PROPERTY\" \"Q_DECLARE\" \"Q_ENUMS\"))\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/cc-mode.texi:7055
#, no-wrap
msgid "a regular expression"
msgstr ""

#. type: table
#: ../../../../../doc/misc/cc-mode.texi:7059
msgid ""
"This matches each symbol which is a macro with a semicolon.  It must not "
"match any string which isn't a valid @code{#define} name.  For example:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7063
#, no-wrap
msgid ""
"(setq c-macro-names-with-semicolon\n"
"      \"\\\\<\\\\(CLEAN_UP_AND_RETURN\\\\|Q_[[:upper:]]+\\\\)\\\\>\")\n"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:7067
#, no-wrap
msgid "c-make-macro-with-semi-re"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7068
#, no-wrap
msgid "make-macro-with-semi-re @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:7074
msgid ""
"Call this (non-interactive) function, which sets internal variables, each "
"time you change the value of @code{c-macro-names-with-semicolon} after the "
"major mode function has run.  It takes no arguments, and its return value "
"has no meaning.  This function is called by @ccmode{}'s initialization code, "
"after the mode hooks have run."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7080
#, no-wrap
msgid "noise macros"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7088
msgid ""
"In @ccmode{}, @dfn{noise macros} are macros which expand to nothing, or "
"compiler directives (such as GCC's @code{__attribute__}) which play no part "
"in the syntax of the C (etc.) language.  Some noise macros are followed by "
"arguments in parentheses (possibly optionally), others are not."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7093
msgid ""
"Noise macros can easily confuse @ccmode{}'s analysis of function headers, "
"causing them to be mis-fontified, or even mis-indented.  You can prevent "
"this confusion by specifying the identifiers which constitute noise macros."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7094
#, no-wrap
msgid "c-noise-macro-names"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7095
#, no-wrap
msgid "noise-macro-names @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7102
msgid ""
"This variable is a list of names of noise macros which never have "
"parenthesized arguments.  Each element is a string, and must be a valid "
"identifier.  Alternatively, the variable may be a regular expression which "
"matches the names of such macros.  Such a noise macro is treated as "
"whitespace by @ccmode{}.  It must not also be in, or be matched by "
"@code{c-noise-macro-with-parens-names}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7104
#, no-wrap
msgid "c-noise-macro-with-parens-names"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7105
#, no-wrap
msgid "noise-macro-with-parens-names @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7116
msgid ""
"This variable is a list of names of noise macros which optionally have "
"arguments in parentheses.  Each element of the list is a string, and must be "
"a valid identifier.  Alternatively, the variable may be a regular expression "
"which matches the names of such macros.  Such a noise macro must not also be "
"in, or be matched by @code{c-noise-macro-names}.  For performance reasons, "
"such a noise macro, including any parenthesized arguments, is specially "
"handled, but it is only handled when used in declaration "
"contexts@footnote{If this restriction causes your project difficulties, "
"please get in touch with @email{bug-cc-mode@@gnu.org}.}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7122
msgid ""
"The two compiler directives @code{__attribute__} and @code{__declspec} have "
"traditionally been handled specially in @ccmode{}; for example they are "
"fontified with font-lock-keyword-face.  You don't need to include these "
"directives in @code{c-noise-macro-with-parens-names}, but doing so is OK."
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:7124
#, no-wrap
msgid "c-make-noise-macro-regexps"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7125
#, no-wrap
msgid "make-noise-macro-regexps @r{(c-)}"
msgstr ""

#. type: defun
#: ../../../../../doc/misc/cc-mode.texi:7131
msgid ""
"Call this (non-interactive) function, which sets internal variables, on "
"changing the value of @code{c-noise-macro-names} or "
"@code{c-noise-macro-with-parens-names} after the major mode's function has "
"run.  This function is called by @ccmode{}'s initialization code, after the "
"mode hooks have run."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7134 ../../../../../doc/misc/cc-mode.texi:7178 ../../../../../doc/misc/cc-mode.texi:7180 ../../../../../doc/misc/cc-mode.texi:7237
#, no-wrap
msgid "Sample Init File"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7140
msgid "The stuff that didn't fit in anywhere else is documented here."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7141
#, no-wrap
msgid "c-require-final-newline"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7142
#, no-wrap
msgid "require-final-newline @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7149
msgid ""
"Controls whether a final newline is enforced when the file is saved.  The "
"value is an association list that for each language mode specifies the value "
"to give to @code{require-final-newline} (@pxref{Saving Buffers,,,@lispref{}, "
"@lispreftitle{}}) at mode initialization.  If a language isn't present on "
"the association list, CC Mode won't touch @code{require-final-newline} in "
"buffers for that language."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7153
msgid ""
"The default is to set @code{require-final-newline} to @code{t} in the "
"languages that mandate that source files should end with newlines.  These "
"are C, C++ and Objective-C."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7155
#, no-wrap
msgid "c-echo-syntactic-information-p"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7156
#, no-wrap
msgid "echo-syntactic-information-p @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7162
msgid ""
"If non-@code{nil}, the syntactic analysis for the current line is shown in "
"the echo area when it's indented (unless @code{c-syntactic-indentation} is "
"@code{nil}).  That's useful when finding out which syntactic symbols to "
"modify to get the indentation you want."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7164
#, no-wrap
msgid "c-report-syntactic-errors"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7165
#, no-wrap
msgid "report-syntactic-errors @r{(c-)}"
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7169
msgid ""
"If non-@code{nil}, certain syntactic errors are reported with a ding and a "
"message, for example when an @code{else} is indented for which there is no "
"corresponding @code{if}."
msgstr ""

#. type: defopt
#: ../../../../../doc/misc/cc-mode.texi:7174
msgid ""
"Note however that @ccmode{} doesn't make any special effort to check for "
"syntactic errors; that's the job of the compiler.  The reason it can report "
"cases like the one above is that it can't find the correct anchoring "
"position to indent the line in that case."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7178 ../../../../../doc/misc/cc-mode.texi:7237 ../../../../../doc/misc/cc-mode.texi:7239 ../../../../../doc/misc/cc-mode.texi:7346
#, no-wrap
msgid "Performance Issues"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7186
msgid ""
"Here's a sample .emacs file fragment that might help you along the way.  "
"Just copy this region and paste it into your .emacs file.  You might want to "
"change some of the actual values."
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/cc-mode.texi:7194
#, no-wrap
msgid ""
";; Make a non-standard key binding.  We can put this in\n"
";; c-mode-base-map because c-mode-map, c++-mode-map, and so on,\n"
";; inherit from it.\n"
"(defun my-c-initialization-hook ()\n"
"  (define-key c-mode-base-map \"\\C-m\" 'c-context-line-break))\n"
"(add-hook 'c-initialization-hook 'my-c-initialization-hook)\n"
"\n"
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/cc-mode.texi:7199
#, no-wrap
msgid ""
";; offset customizations not in my-c-style\n"
";; This will take precedence over any setting of the syntactic symbol\n"
";; made by a style.\n"
"(setq c-offsets-alist '((member-init-intro . ++)))\n"
"\n"
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/cc-mode.texi:7222
#, no-wrap
msgid ""
";; Create my personal style.\n"
"(defconst my-c-style\n"
"  '((c-tab-always-indent        . t)\n"
"    (c-comment-only-line-offset . 4)\n"
"    (c-hanging-braces-alist     . ((substatement-open after)\n"
"                                   (brace-list-open)))\n"
"    (c-hanging-colons-alist     . ((member-init-intro before)\n"
"                                   (inher-intro)\n"
"                                   (case-label after)\n"
"                                   (label after)\n"
"                                   (access-label after)))\n"
"    (c-cleanup-list             . (scope-operator\n"
"                                   empty-defun-braces\n"
"                                   defun-close-semi))\n"
"    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)\n"
"                                   (substatement-open . 0)\n"
"                                   (case-label        . 4)\n"
"                                   (block-open        . 0)\n"
"                                   (knr-argdecl-intro . -)))\n"
"    (c-echo-syntactic-information-p . t))\n"
"  \"My C Programming Style\")\n"
"(c-add-style \"PERSONAL\" my-c-style)\n"
"\n"
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/cc-mode.texi:7234
#, no-wrap
msgid ""
";; Customizations for all modes in CC Mode.\n"
"(defun my-c-mode-common-hook ()\n"
"  ;; set my personal style for the current buffer\n"
"  (c-set-style \"PERSONAL\")\n"
"  ;; other customizations\n"
"  (setq tab-width 8\n"
"        ;; this will make sure spaces are used instead of tabs\n"
"        indent-tabs-mode nil)\n"
"  ;; we like auto-newline, but not hungry-delete\n"
"  (c-toggle-auto-newline 1))\n"
"(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)\n"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7237 ../../../../../doc/misc/cc-mode.texi:7346 ../../../../../doc/misc/cc-mode.texi:7348 ../../../../../doc/misc/cc-mode.texi:7412
#, no-wrap
msgid "Limitations and Known Bugs"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7240
#, no-wrap
msgid "performance"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7251
msgid ""
"C and its derivative languages are highly complex creatures.  Often, "
"ambiguous code situations arise that require @ccmode{} to scan large "
"portions of the buffer to determine syntactic context.  Such pathological "
"code can cause @ccmode{} to perform fairly badly.  This section gives some "
"insight in how @ccmode{} operates, how that interacts with some coding "
"styles, and what you can use to improve performance."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7261
msgid ""
"The overall goal is that @ccmode{} shouldn't be overly slow (i.e., take more "
"than a fraction of a second) in any interactive operation.  I.e., it's tuned "
"to limit the maximum response time in single operations, which is sometimes "
"at the expense of batch-like operations like reindenting whole blocks.  If "
"you find that @ccmode{} gradually gets slower and slower in certain "
"situations, perhaps as the file grows in size or as the macro or comment "
"you're editing gets bigger, then chances are that something isn't working "
"right.  You should consider reporting it, unless it's something that's "
"mentioned in this section."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7269
msgid ""
"Because @ccmode{} has to scan the buffer backwards from the current "
"insertion point, and because C's syntax is fairly difficult to parse in the "
"backwards direction, @ccmode{} often tries to find the nearest position "
"higher up in the buffer from which to begin a forward scan (it's typically "
"an opening or closing parenthesis of some kind).  The farther this position "
"is from the current insertion point, the slower it gets."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7270
#, no-wrap
msgid "beginning-of-defun"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7279
msgid ""
"In earlier versions of @ccmode{}, we used to recommend putting the opening "
"brace of a top-level construct@footnote{E.g., a function in C, or outermost "
"class definition in C++ or Java.} into the leftmost column.  Earlier still, "
"this used to be a rigid Emacs constraint, as embodied in the "
"@code{beginning-of-defun} function.  @ccmode now caches syntactic "
"information much better, so that the delay caused by searching for such a "
"brace when it's not in column 0 is minimal, except perhaps when you've just "
"moved a long way inside the file."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7280
#, no-wrap
msgid "defun-prompt-regexp"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7281
#, no-wrap
msgid "c-Java-defun-prompt-regexp"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7282
#, no-wrap
msgid "Java-defun-prompt-regexp @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7296
msgid ""
"A special note about @code{defun-prompt-regexp} in Java mode: The common "
"style is to hang the opening braces of functions and classes on the right "
"side of the line, and that doesn't work well with the Emacs approach.  "
"@ccmode{} comes with a constant @code{c-Java-defun-prompt-regexp} which "
"tries to define a regular expression usable for this style, but there are "
"problems with it.  In some cases it can cause @code{beginning-of-defun} to "
"hang@footnote{This has been observed in Emacs 19.34 and XEmacs 19.15.}.  For "
"this reason, it is not used by default, but if you feel adventurous, you can "
"set @code{defun-prompt-regexp} to it in your mode hook.  In any event, "
"setting and relying on @code{defun-prompt-regexp} will definitely slow "
"things down because (X)Emacs will be doing regular expression searches a "
"lot, so you'll probably be taking a hit either way!"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7306
msgid ""
"@ccmode{} maintains a cache of the opening parentheses of the blocks "
"surrounding the point, and it adapts that cache as the point is moved "
"around.  That means that in bad cases it can take noticeable time to indent "
"a line in a new surrounding, but after that it gets fast as long as the "
"point isn't moved far off.  The farther the point is moved, the less useful "
"is the cache.  Since editing typically is done in ``chunks'' rather than on "
"single lines far apart from each other, the cache typically gives good "
"performance even when the code doesn't fit the Emacs approach to finding the "
"defun starts."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7307
#, no-wrap
msgid "c-enable-xemacs-performance-kludge-p"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/cc-mode.texi:7308
#, no-wrap
msgid "enable-xemacs-performance-kludge-p @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7323
msgid ""
"XEmacs users can set the variable "
"@code{c-enable-xemacs-performance-kludge-p} to non-@code{nil}.  This tells "
"@ccmode{} to use XEmacs-specific built-in functions which, in some "
"circumstances, can locate the top-most opening brace much more quickly than "
"@code{beginning-of-defun}.  Preliminary testing has shown that for styles "
"where these braces are hung (e.g., most JDK-derived Java styles), this hack "
"can improve performance of the core syntax parsing routines from 3 to 60 "
"times.  However, for styles which @emph{do} conform to Emacs's recommended "
"style of putting top-level braces in column zero, this hack can degrade "
"performance by about as much.  Thus this variable is set to @code{nil} by "
"default, since the Emacs-friendly styles should be more common (and "
"encouraged!).  Note that this variable has no effect in Emacs since the "
"necessary built-in functions don't exist (in Emacs 22.1 as of this writing "
"in February 2007)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7329
msgid ""
"Text properties are used to speed up skipping over syntactic whitespace, "
"i.e., comments and preprocessor directives.  Indenting a line after a huge "
"macro definition can be slow the first time, but after that the text "
"properties are in place and it should be fast (even after you've edited "
"other parts of the file and then moved back)."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7337
msgid ""
"Font locking can be a CPU hog, especially the font locking done on "
"decoration level 3 which tries to be very accurate.  Note that that level is "
"designed to be used with a font lock support mode that only fontifies the "
"text that's actually shown, i.e., Lazy Lock or Just-in-time Lock mode, so "
"make sure you use one of them.  Fontification of a whole buffer with some "
"thousand lines can often take over a minute.  That is a known weakness; the "
"idea is that it never should happen."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7343
msgid ""
"The most effective way to speed up font locking is to reduce the decoration "
"level to 2 by setting @code{font-lock-maximum-decoration} appropriately.  "
"That level is designed to be as pretty as possible without sacrificing "
"performance.  @xref{Font Locking Preliminaries}, for more info."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7346 ../../../../../doc/misc/cc-mode.texi:7412 ../../../../../doc/misc/cc-mode.texi:7541
#, no-wrap
msgid "FAQ"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7349
#, no-wrap
msgid "limitations"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7350
#, no-wrap
msgid "bugs"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7359
msgid ""
"@ccmode{} doesn't support trigraphs.  (These are character sequences such as "
"@samp{??(}, which represents @samp{[}.  They date from a time when some "
"character sets didn't have all the characters that C needs, and are now "
"utterly obsolete.)"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7364
msgid ""
"There is no way to apply auto newline settings (@pxref{Auto-newlines})  on "
"already typed lines.  That's only a feature to ease interactive editing."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7370
msgid ""
"To generalize this issue a bit: @ccmode{} is not intended to be used as a "
"reformatter for old code in some more or less batch-like way.  With the "
"exception of some functions like @code{c-indent-region}, it's only geared to "
"be used interactively to edit new code.  There's currently no intention to "
"change this goal."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7375
msgid ""
"If you want to reformat old code, you're probably better off using some "
"other tool instead, e.g., @ref{Top, , GNU indent, indent, The `indent' "
"Manual}, which has more powerful reformatting capabilities than @ccmode{}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7382
msgid ""
"The support for C++ templates (in angle brackets) is not yet complete.  When "
"a non-nested template is used in a declaration, @ccmode{} indents it and "
"font-locks it OK@.  Templates used in expressions, and nested templates do "
"not fare so well.  Sometimes a workaround is to refontify the expression "
"after typing the closing @samp{>}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7390
msgid ""
"In a @dfn{k&r region} (the part of an old-fashioned C function declaration "
"which specifies the types of its parameters, coming between the parameter "
"list and the opening brace), there should be at most 20 top-level "
"parenthesis and bracket pairs.  This limit has been imposed for performance "
"reasons.  If it is violated, the source file might be incorrectly indented "
"or fontified."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7393
msgid "On loading @ccmode{}, sometimes this error message appears:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7396
#, no-wrap
msgid "File mode specification error: (void-variable c-font-lock-keywords-3)\n"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7403
msgid ""
"This is due to a bug in the function @code{eval-after-load} in some versions "
"of (X)Emacs.  It can manifest itself when there is a symbolic link in the "
"path of the directory which contains (X)Emacs.  As a workaround, put the "
"following into your @file{.emacs} file, fairly early on:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7408
#, no-wrap
msgid ""
"(defun my-load-cc-fonts ()\n"
"  (require \"cc-fonts\"))\n"
"(add-hook 'c-initialization-hook 'my-load-cc-fonts)\n"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7412 ../../../../../doc/misc/cc-mode.texi:7541 ../../../../../doc/misc/cc-mode.texi:7561
#, no-wrap
msgid "Updating CC Mode"
msgstr ""

#. type: appendix
#: ../../../../../doc/misc/cc-mode.texi:7414
#, no-wrap
msgid "Frequently Asked Questions"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7420
msgid "How can I change the indent level from 4 spaces to 2 spaces?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7422
msgid "Set the variable @code{c-basic-offset}.  @xref{Getting Started}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:7424
#, no-wrap
msgid "RET"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:7425
#, no-wrap
msgid "C-j"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7427
msgid "Why does/doesn't the @kbd{@key{RET}} key indent the new line?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7431
msgid ""
"Emacs's convention used to be that @kbd{RET} just adds a newline, and that "
"@kbd{C-j} adds a newline and indents it.  In Emacs-24.4, this convention was "
"reversed."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7434
msgid ""
"If you use an older Emacs and you want @kbd{@key{RET}} do this too, add this "
"to your @code{c-initialization-hook}:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7437
#, no-wrap
msgid "(define-key c-mode-base-map \"\\C-m\" 'c-context-line-break)\n"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7440
msgid "@xref{Getting Started}.  This was a very common question."
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7443
msgid "How do I get block comments in my C++ files?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7446
msgid ""
"Interactively, change the comment style with @kbd{C-c C-k}.  @xref{Minor "
"Modes}."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7449
msgid ""
"To configure this setting, say, for files within the gdb project, you could "
"amend your C++ Mode hook like this:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7455
#, no-wrap
msgid ""
"(defun my-c++-mode-hook ()\n"
"  (if (string-match \"/gdb/\" (buffer-file-name))\n"
"      (c-toggle-comment-style 1)))\n"
"(add-hook 'c++-mode-hook 'my-c++-mode-hook)\n"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7460
msgid ""
"How do I stop my C++ lambda expressions being indented way over to the "
"right?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7467
msgid ""
"This is now the default, so you don't need to do anything.  To restore the "
"previous default, indenting lambda expressions to the right of the "
"constructs which introduce them, change the offset associated with "
"@code{inlambda} from 0 to @code{c-lineup-inexpr-block}.  For example, if you "
"are setting offsets in a hook function you might include the following line:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7470
#, no-wrap
msgid "(c-set-offset 'inlambda 'c-lineup-inexpr-block)\n"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7474
msgid ""
"For details of the different ways you can make this setting, @ref{Config "
"Basics}."
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7477
msgid "How do I stop my code jumping all over the place when I type?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7480
msgid ""
"Deactivate ``electric minor mode'' with @kbd{C-c C-l}.  @xref{Getting "
"Started}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:7482
#, no-wrap
msgid "C-x h"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7485
msgid "How do I reindent the whole file?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7488
msgid ""
"Visit the file and hit @kbd{C-x h} to mark the whole buffer. Then hit "
"@kbd{C-M-\\}.  @xref{Indentation Commands}."
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:7491
#, no-wrap
msgid "C-M-u"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7493
msgid "How do I reindent the current block?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7497
msgid ""
"First move to the brace which opens the block with @kbd{C-M-u}, then "
"reindent that expression with @kbd{C-M-q}.  @xref{Indentation Commands}."
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7502
msgid ""
"I put @code{(c-set-offset 'substatement-open 0)} in my @file{.emacs} file "
"but I get an error saying that @code{c-set-offset}'s function definition is "
"void.  What's wrong?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7509
msgid ""
"This means that @ccmode{} hasn't yet been loaded into your Emacs session by "
"the time the @code{c-set-offset} call is reached, most likely because "
"@ccmode{} is being autoloaded.  Instead of putting the @code{c-set-offset} "
"line in your top-level @file{.emacs} file, put it in your "
"@code{c-initialization-hook} (@pxref{CC Hooks}), or simply modify "
"@code{c-offsets-alist} directly:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/cc-mode.texi:7512
#, no-wrap
msgid "(setq c-offsets-alist '((substatement-open . 0)))\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7515
#, no-wrap
msgid "open paren in column zero"
msgstr ""

#. type: emph{#1}
#: ../../../../../doc/misc/cc-mode.texi:7519
msgid ""
"I have an open paren character at column zero inside a comment or multiline "
"string literal, and it causes the fontification and/or indentation to go "
"haywire.  What gives?"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7523
msgid ""
"It's due to the ad-hoc rule in (X)Emacs that such open parens always start "
"defuns (which translates to functions, classes, namespaces or any other "
"top-level block constructs in the @ccmode{} languages)."
msgstr ""

#. type: ifset
#: ../../../../../doc/misc/cc-mode.texi:7525
msgid "@xref{Defuns,,, xemacs, XEmacs User's Manual}, for details."
msgstr ""

#. type: ifclear
#: ../../../../../doc/misc/cc-mode.texi:7529
msgid ""
"@xref{Left Margin Paren,,, emacs, GNU Emacs Manual}, for details "
"(@xref{Defuns,,, emacs, GNU Emacs Manual}, in the Emacs 20 manual)."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/cc-mode.texi:7536
msgid ""
"This heuristic is built into the core syntax analysis routines in (X)Emacs, "
"so it's not really a @ccmode{} issue.  However, in Emacs 21.1 it became "
"possible to turn it off@footnote{Using the variable "
"@code{open-paren-in-column-0-is-defun-start}.} and @ccmode{} does so there "
"since it's got its own system to keep track of blocks."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7541 ../../../../../doc/misc/cc-mode.texi:7561 ../../../../../doc/misc/cc-mode.texi:7605
#, no-wrap
msgid "Mailing Lists and Bug Reports"
msgstr ""

#. type: appendix
#: ../../../../../doc/misc/cc-mode.texi:7543
#, no-wrap
msgid "Getting the Latest CC Mode Release"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7548
msgid ""
"@ccmode{} has been standard with all versions of Emacs since 19.34 and of "
"XEmacs since 19.16."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7549
#, no-wrap
msgid "web site"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7554
msgid ""
"Due to release schedule skew, it is likely that all of these Emacsen have "
"old versions of @ccmode{} and so should be upgraded.  Access to the "
"@ccmode{} source code, as well as more detailed information on Emacsen "
"compatibility, etc.@: are all available on the web site:"
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/cc-mode.texi:7557
msgid "@uref{http://cc-mode.sourceforge.net/}"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7561 ../../../../../doc/misc/cc-mode.texi:7605 ../../../../../doc/misc/cc-mode.texi:7606 ../../../../../doc/misc/cc-mode.texi:7612
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: appendix
#: ../../../../../doc/misc/cc-mode.texi:7563
#, no-wrap
msgid "Mailing Lists and Submitting Bug Reports"
msgstr ""

#. type: kindex
#: ../../../../../doc/misc/cc-mode.texi:7566
#, no-wrap
msgid "C-c C-b"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7567
#, no-wrap
msgid "c-submit-bug-report"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/cc-mode.texi:7568
#, no-wrap
msgid "submit-bug-report @r{(c-)}"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7577
msgid ""
"To report bugs, use the @kbd{C-c C-b} (bound to @code{c-submit-bug-report}) "
"command.  This provides vital information we need to reproduce your "
"problem.  Make sure you include a concise, but complete code example.  "
"Please try to boil your example down to just the essential code needed to "
"reproduce the problem, and include an exact recipe of steps needed to expose "
"the bug.  Be especially sure to include any code that appears @emph{before} "
"your bug example, if you think it might affect our ability to reproduce it."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7584
msgid ""
"Please try to produce the problem in an Emacs instance without any "
"customizations loaded (i.e., start it with the @samp{-q --no-site-file} "
"arguments).  If it works correctly there, the problem might be caused by "
"faulty customizations in either your own or your site configuration.  In "
"that case, we'd appreciate it if you isolate the Emacs Lisp code that "
"triggers the bug and include it in your report."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7585
#, no-wrap
msgid "bug report mailing list"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7592
msgid ""
"Reporting a bug using @code{c-submit-bug-report} files it in the GNU Bug "
"Tracker at @url{https://debbugs.gnu.org}, then sends it on to "
"@email{bug-cc-mode@@gnu.org}.  You can also send reports, other questions, "
"and suggestions (kudos?@: @t{;-)} to that address.  It's a mailing list "
"which you can join or browse an archive of; see the web site at "
"@uref{http://cc-mode.sourceforge.net/} for further details."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/cc-mode.texi:7593
#, no-wrap
msgid "announcement mailing list"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7603
msgid ""
"If you want to get announcements of new @ccmode{} releases, send the word "
"@emph{subscribe} in the body of a message to "
"@email{cc-mode-announce-request@@lists.sourceforge.net}.  It's possible to "
"subscribe from the web site too.  Announcements will also be posted to the "
"Usenet newsgroups @code{gnu.emacs.sources}, @code{comp.emacs}, "
"@code{comp.emacs.xemacs}, @code{comp.lang.c}, @code{comp.lang.c++}, "
"@code{comp.lang.objective-c}, @code{comp.lang.java.softwaretools}, "
"@code{comp.lang.idl}, and @code{comp.lang.awk}."
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7605 ../../../../../doc/misc/cc-mode.texi:7612 ../../../../../doc/misc/cc-mode.texi:7614 ../../../../../doc/misc/cc-mode.texi:7627
#, no-wrap
msgid "Command and Function Index"
msgstr ""

#. type: include
#: ../../../../../doc/misc/cc-mode.texi:7607
#, no-wrap
msgid "doclicense.texi"
msgstr ""

#. type: node
#: ../../../../../doc/misc/cc-mode.texi:7612 ../../../../../doc/misc/cc-mode.texi:7627 ../../../../../doc/misc/cc-mode.texi:7629 ../../../../../doc/misc/cc-mode.texi:7642
#, no-wrap
msgid "Variable Index"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7620
msgid ""
"Since most @ccmode{} commands are prepended with the string @samp{c-}, each "
"appears under its @code{c-@var{thing}} name and its @code{@var{thing} (c-)} "
"name."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/cc-mode.texi:7635
msgid ""
"Since most @ccmode{} variables are prepended with the string @samp{c-}, each "
"appears under its @code{c-@var{thing}} name and its @code{@var{thing} (c-)} "
"name."
msgstr ""

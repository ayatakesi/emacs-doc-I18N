# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-17 05:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: settitle
#: ../../../../../doc/misc/flymake.texi:6
#, no-wrap
msgid "GNU Flymake @value{VERSION}"
msgstr ""

#. type: include
#: ../../../../../doc/misc/flymake.texi:7
#, no-wrap
msgid "docstyle.texi"
msgstr ""

#. type: copying
#: ../../../../../doc/misc/flymake.texi:16
msgid "This manual is for GNU Flymake (version @value{VERSION}, @value{UPDATED}), which is a universal on-the-fly syntax checker for GNU Emacs."
msgstr ""

#. type: copying
#: ../../../../../doc/misc/flymake.texi:18
msgid "Copyright @copyright{} 2004--2021 Free Software Foundation, Inc."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/flymake.texi:26
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: quotation
#: ../../../../../doc/misc/flymake.texi:29
msgid "(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify this GNU manual.''"
msgstr ""

#. type: dircategory
#: ../../../../../doc/misc/flymake.texi:32
#, no-wrap
msgid "Emacs misc features"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:35
msgid "Flymake: (flymake)"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:35
msgid "A universal on-the-fly syntax checker."
msgstr ""

#. type: top
#: ../../../../../doc/misc/flymake.texi:38
#: ../../../../../doc/misc/flymake.texi:50
#, no-wrap
msgid "GNU Flymake"
msgstr ""

#. type: subtitle
#: ../../../../../doc/misc/flymake.texi:39
#, no-wrap
msgid "for version @value{VERSION}, @value{UPDATED}"
msgstr ""

#. type: author
#: ../../../../../doc/misc/flymake.texi:40
#, no-wrap
msgid "João Távora and Pavel Kobiakov(@email{pk_at_work@@yahoo.com})."
msgstr ""

#. type: node
#: ../../../../../doc/misc/flymake.texi:49
#, no-wrap
msgid "Top"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:60
msgid "Using Flymake::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:60
msgid "Extending Flymake::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:60
msgid "The legacy Proc backend::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:60
msgid "GNU Free Documentation License::"
msgstr ""

#. type: unnumbered
#: ../../../../../doc/misc/flymake.texi:60
#: ../../../../../doc/misc/flymake.texi:1154
#: ../../../../../doc/misc/flymake.texi:1155
#, no-wrap
msgid "Index"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/flymake.texi:62
#: ../../../../../doc/misc/flymake.texi:63
#, no-wrap
msgid "Using Flymake"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:64
#, no-wrap
msgid "overview of flymake"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:65
#, no-wrap
msgid "using flymake"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:70
msgid "Flymake is a universal on-the-fly buffer checker implemented as an Emacs minor mode.  To use Flymake, you must first activate @code{flymake-mode} by using the command @kbd{flymake-mode}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:75
msgid "When enabled, Flymake collects information about problems in the buffer, called @dfn{diagnostics}, from one or more different sources, or @dfn{backends}, and then visually annotates the buffer by highlighting problematic buffer regions with a special face."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:78
msgid "It also displays an overall buffer status in the mode line containing totals for different types of diagnostics."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:80
msgid "Syntax check is done ``on-the-fly''.  It is started whenever"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:85
msgid "@code{flymake-mode} is started, unless @code{flymake-start-on-flymake-mode} is nil;"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:89
msgid "the buffer is saved, unless @code{flymake-start-on-save-buffer} is nil;"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:93
msgid "some changes were made to the buffer more than @code{0.5} seconds ago (the delay is configurable in @code{flymake-no-changes-timeout})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:97
msgid "Syntax check can also be started manually by typing the @kbd{M-x flymake-start @key{RET}} command."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:103
msgid "If the check detected errors or warnings, the respective buffer regions are highlighted.  You can place point on those regions and use @kbd{C-h .} (@code{display-local-help}) to see what the specific problem was.  Alternatively, hovering the mouse on those regions should also display a tool-tip with the same information."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:108
msgid "@code{flymake-goto-next-error} and @code{flymake-goto-prev-error} are commands that allow easy navigation to the next/previous erroneous regions, respectively.  It might be a good idea to map them to @kbd{M-n} and @kbd{M-p} in @code{flymake-mode}, by adding to your init file:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:112
#, no-wrap
msgid ""
"(define-key flymake-mode-map (kbd \"M-n\") 'flymake-goto-next-error)\n"
"(define-key flymake-mode-map (kbd \"M-p\") 'flymake-goto-prev-error)\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:116
msgid "Flymake is a universal syntax checker in the sense that it's easily extended to support new backends (@pxref{Extending Flymake})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:119
msgid "Historically, Flymake used to accept diagnostics from a single backend, albeit a reasonably flexible one."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:127
msgid "This backend isn't (yet) obsolete, and so is still available as a fallback and active by default (@pxref{The legacy Proc backend}).  It works by selecting a syntax check tool from a preconfigured list (compiler for C@t{++} files, @command{perl} for Perl files, etc.), and executing it in the background, passing it a temporary file which is a copy of the current buffer, and parsing the output for known error/warning message patterns."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:132
msgid "Syntax check statuses::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:132
msgid "Backend exceptions::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:132
#: ../../../../../doc/misc/flymake.texi:207
#: ../../../../../doc/misc/flymake.texi:208
#, no-wrap
msgid "Customizable variables"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:134
#: ../../../../../doc/misc/flymake.texi:135
#: ../../../../../doc/misc/flymake.texi:136
#, no-wrap
msgid "Syntax check statuses"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:142
msgid "When enabled, Flymake displays its status in the mode line, which provides a visual summary of diagnostic collection.  It may also hint at certain exceptional situations encountered when communicating with backends."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:144
msgid "The following statuses are defined:"
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:146
#, no-wrap
msgid "[@var{nerrors} @var{nwarnings} ...]"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/flymake.texi:151
msgid "Normal operation. @var{nerrors} and @var{nwarnings} are, respectively, the total number of errors and warnings found during the last buffer check, for all backends. They may be followed by other totals for other types of diagnostics (@pxref{Flymake error types})."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/flymake.texi:152
#, no-wrap
msgid "Wait"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/flymake.texi:156
msgid "Some Flymake backends haven't reported since the last time they where questioned.  It is reasonable to assume that this is a temporary delay and Flymake will resume normal operation soon."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/flymake.texi:157
#, no-wrap
msgid "!"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/flymake.texi:161
msgid "All the configured Flymake backends have disabled themselves: Flymake cannot annotate the buffer and action from the user is needed to investigate and remedy the situation (@pxref{Backend exceptions})."
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/flymake.texi:162
#, no-wrap
msgid "?"
msgstr ""

#. type: multitable
#: ../../../../../doc/misc/flymake.texi:166
msgid "There are no applicable Flymake backends for this buffer, thus Flymake cannot annotate it.  To fix this, a user may look to extending Flymake and add a new backend (@pxref{Extending Flymake})."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:169
#: ../../../../../doc/misc/flymake.texi:170
#, no-wrap
msgid "Backend exceptions"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:171
#, no-wrap
msgid "backend exceptions"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:173
#, no-wrap
msgid "disabled backends"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:174
#, no-wrap
msgid "backends, disabled"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:180
msgid "Some backends may take longer than others to respond or complete, and some may decide to @emph{disable} themselves if they are not suitable for the current buffer or encounter some unavoidable problem.  A disabled backend is not tried again for future checks of the current buffer."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:181
#, no-wrap
msgid "flymake-reporting-backends"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:182
#, no-wrap
msgid "flymake-running-backends"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:183
#, no-wrap
msgid "flymake-disabled-backends"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:187
msgid "The commands @code{flymake-reporting-backends}, @code{flymake-running-backends} and @code{flymake-disabled-backends} show the backends currently used and those which are disabled."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:188
#, no-wrap
msgid "reset disabled backends"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:192
msgid "Toggling @code{flymake-mode} off and on again, or invoking @code{flymake-start} with a prefix argument is one way to reset the disabled backend list, so that they will be tried again in the next check."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:193
#, no-wrap
msgid "logging"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:194
#, no-wrap
msgid "flymake logging"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:201
msgid "Flymake also uses a simple logging facility for indicating important points in the control flow.  The logging facility sends logging messages to the @file{*Flymake log*} buffer.  The information logged can be used for resolving various problems related to Flymake.  For convenience, a shortcut to this buffer can be found in Flymake's menu, accessible from the top menu bar or just left of the status indicator."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:202
#, no-wrap
msgid "warning-minimum-log-level"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:203
#, no-wrap
msgid "warning-minimum-level"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:206
msgid "Logging output is controlled by the Emacs @code{warning-minimum-log-level} and @code{warning-minimum-level} variables."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:209
#, no-wrap
msgid "customizable variables"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:210
#, no-wrap
msgid "variables for customizing flymake"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:214
msgid "This section summarizes customization variables used for the configuration of the Flymake user interface."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:216
#: ../../../../../doc/misc/flymake.texi:732
msgid "@vtable @code"
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:216
#, no-wrap
msgid "flymake-no-changes-timeout"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:220
msgid "If any changes are made to the buffer, syntax check is automatically started after this many seconds, unless the user makes another change, which resets the timer."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:221
#, no-wrap
msgid "flymake-start-on-flymake-mode"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:224
msgid "A boolean flag indicating whether to start syntax check immediately after enabling @code{flymake-mode}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:225
#, no-wrap
msgid "flymake-start-on-save-buffer"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:228
msgid "A boolean flag indicating whether to start syntax check after saving the buffer."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:229
#: ../../../../../doc/misc/flymake.texi:351
#, no-wrap
msgid "flymake-error"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:232
msgid "A custom face for highlighting regions for which an error has been reported."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:233
#: ../../../../../doc/misc/flymake.texi:352
#, no-wrap
msgid "flymake-warning"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:236
msgid "A custom face for highlighting regions for which a warning has been reported."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:237
#: ../../../../../doc/misc/flymake.texi:353
#, no-wrap
msgid "flymake-note"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:240
msgid "A custom face for highlighting regions for which a note has been reported."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:241
#, no-wrap
msgid "flymake-error-bitmap"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:244
msgid "A bitmap used in the fringe to mark lines for which an error has been reported."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:245
#, no-wrap
msgid "flymake-warning-bitmap"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:248
msgid "A bitmap used in the fringe to mark lines for which a warning has been reported."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:249
#, no-wrap
msgid "flymake-fringe-indicator-position"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:251
msgid "Which fringe (if any) should show the warning/error bitmaps."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:252
#, no-wrap
msgid "flymake-wrap-around"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:255
msgid "If non-nil, moving to errors with @code{flymake-goto-next-error} and @code{flymake-goto-prev-error} wraps around buffer boundaries."
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/flymake.texi:257
#: ../../../../../doc/misc/flymake.texi:258
#, no-wrap
msgid "Extending Flymake"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:259
#, no-wrap
msgid "extending flymake"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:262
msgid "Flymake can primarily be extended in one of two ways:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/flymake.texi:267
msgid "By changing the look and feel of the annotations produced by the different backends."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/flymake.texi:270
msgid "By adding a new buffer-checking backend."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:273
msgid "The following sections discuss each approach in detail."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:277
msgid "Flymake error types::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:277
#: ../../../../../doc/misc/flymake.texi:420
#: ../../../../../doc/misc/flymake.texi:421
#, no-wrap
msgid "Backend functions"
msgstr ""

#. type: node
#: ../../../../../doc/misc/flymake.texi:279
#, no-wrap
msgid "Flymake error types"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:280
#, no-wrap
msgid "Customizing Flymake error types"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:281
#, no-wrap
msgid "customizing error types"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:282
#, no-wrap
msgid "error types, customization"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:288
msgid "To customize the appearance of error types, set properties on the symbols associated with each diagnostic type.  The standard diagnostic symbols are @code{:error}, @code{:warning} and @code{:note} (though the backend may define more, @pxref{Backend functions})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:290
msgid "The following properties can be set:"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:294
#, no-wrap
msgid "bitmap of diagnostic"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:300
msgid "@code{flymake-bitmap}, an image displayed in the fringe according to @code{flymake-fringe-indicator-position}.  The value actually follows the syntax of @code{flymake-error-bitmap} (@pxref{Customizable variables}).  It is overridden by any @code{before-string} overlay property."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:308
msgid "@code{flymake-overlay-control}, an alist ((@var{OVPROP} . @var{VALUE})  @var{...}) of further properties used to affect the appearance of Flymake annotations.  With the exception of @code{category} and @code{evaporate}, these properties are applied directly to the created overlay (@pxref{Overlay Properties,,, elisp, The Emacs Lisp Reference Manual})."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:311
msgid "As an example, here's how to make diagnostics of the type @code{:note} stand out more prominently:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:314
#, no-wrap
msgid "(push '(face . highlight) (get :note 'flymake-overlay-control))\n"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:319
msgid "If you push another alist entry in front, it overrides the previous one.  So this effectively removes the face from @code{:note} diagnostics:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:322
#, no-wrap
msgid "(push '(face . nil) (get :note 'flymake-overlay-control))\n"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:326
msgid "To restore the original look for @code{:note} types, empty or remove its @code{flymake-overlay-control} property:"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:329
#, no-wrap
msgid "(put :note 'flymake-overlay-control '())\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:332
#, no-wrap
msgid "severity of diagnostic"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:338
msgid "@code{flymake-severity} is a non-negative integer specifying the diagnostic's severity.  The higher the value, the more serious is the error.  If the overlay property @code{priority} is not specified in @code{flymake-overlay-control}, @code{flymake-severity} is used to set it and help sort overlapping overlays."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:340
#, no-wrap
msgid "flymake-type-name"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:343
msgid "@code{flymake-type-name} is a string used to succinctly name the error type, in case the name of the symbol associated with it is very long."
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:345
#, no-wrap
msgid "flymake-category"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:348
msgid "@code{flymake-category} is a symbol whose property list is considered the default for missing values of any other properties."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:350
#, no-wrap
msgid "predefined diagnostic types"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:359
msgid "Three default diagnostic types are predefined: @code{:error}, @code{:warning}, and @code{:note}.  By default, each one of them has a @code{flymake-category} property whose value is, respectively, the category symbol @code{flymake-error}, @code{flymake-warning} and @code{flymake-note}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:364
msgid "These category symbols' plist is where the values of customizable variables and faces (such as @code{flymake-error-bitmap}) are found.  Thus, if you change their plists, Flymake may stop honoring these user customizations."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:369
msgid "The @code{flymake-category} special property is especially useful for backends which create diagnostics objects with non-default types that differ from an existing type by only a few properties (@pxref{Flymake utility functions})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:373
msgid "As an example, consider configuring a new diagnostic type @code{:low-priority-note} that behaves much like @code{:note}, but without an overlay face."
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:377
#, no-wrap
msgid ""
"(put :low-priority-note 'flymake-overlay-control '((face . nil)))\n"
"(put :low-priority-note 'flymake-category 'flymake-note)\n"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:379
#, no-wrap
msgid "flymake-diagnostics"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:380
#, no-wrap
msgid "flymake-diagnostic-backend"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:381
#, no-wrap
msgid "flymake-diagnostic-buffer"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:382
#, no-wrap
msgid "flymake-diagnostic-text"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:383
#, no-wrap
msgid "flymake-diagnostic-beg"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:384
#, no-wrap
msgid "flymake-diagnostic-end"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:391
msgid "As you might have guessed, Flymake's annotations are implemented as overlays (@pxref{Overlays,,, elisp, The Emacs Lisp Reference Manual}).  Along with the properties that you specify for the specific type of diagnostic, Flymake adds the property @code{flymake-diagnostic} to these overlays, and sets it to the object that the backend created with @code{flymake-make-diagnostic}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:398
msgid "Since overlays also support arbitrary keymaps, you can use this along with the functions @code{flymake-diagnostics} and @code{flymake-diagnostic-text} (@pxref{Flymake utility functions}) to create interactive annotations, such as in the following example of binding a @code{mouse-3} event (middle mouse button click) to an Internet search for the text of a @code{:warning} or @code{:error}."
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:410
#, no-wrap
msgid ""
"(defun my-search-for-message (event)\n"
"  (interactive \"e\")\n"
"  (let* ((diags (flymake-diagnostics (posn-point (event-start event))))\n"
"         (topmost-diag (car diags)))\n"
"    (eww-browse-url\n"
"       (concat\n"
"        \"https://duckduckgo.com/?q=\"\n"
"        (replace-regexp-in-string\n"
"          \" \" \"+\" (flymake-diagnostic-text topmost-diag)))\n"
"       t)))\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:418
#, no-wrap
msgid ""
"(dolist (type '(:warning :error))\n"
"  (push '(mouse-face . highlight) (get type 'flymake-overlay-control))\n"
"  (push `(keymap . ,(let ((map (make-sparse-keymap)))\n"
"                      (define-key map [mouse-2]\n"
"                        'my-search-for-message)\n"
"                      map))\n"
"        (get type 'flymake-overlay-control)))\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:422
#, no-wrap
msgid "backend functions"
msgstr ""

#. type: vindex
#: ../../../../../doc/misc/flymake.texi:424
#, no-wrap
msgid "flymake-diagnostic-functions"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:427
msgid "Flymake backends are Lisp functions placed in the special hook @code{flymake-diagnostic-functions}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:435
msgid "A backend's responsibility is to diagnose the contents of a buffer for problems, registering the problem's positions, type, and summary description.  This information is collected in the form of diagnostic objects created by the function @code{flymake-make-diagnostic} (@pxref{Flymake utility functions}), and then handed over to Flymake, which proceeds to annotate the buffer."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:442
msgid "A request for a buffer check, and the subsequent delivery of diagnostics, are two key events of the interaction between Flymake and backend.  Each such event corresponds to a well-defined function calling convention: one for calls made by Flymake into the backend via the backend function, the other in the reverse direction via a callback.  To be usable, backends must adhere to both."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:448
msgid "The first argument passed to a backend function is always @var{report-fn}, a callback function detailed below.  Beyond it, functions must be prepared to accept (and possibly ignore) an arbitrary number of keyword-value pairs of the form @w{@code{(@var{:key} @var{value} @var{:key2} @var{value2}...)}}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:451
msgid "Currently, Flymake may pass the following keywords and values to the backend function:"
msgstr ""

#. type: code{#1}
#: ../../../../../doc/misc/flymake.texi:454
#, no-wrap
msgid ":recent-changes"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:461
msgid "The value is a list recent changes since the last time the backend function was called for the buffer.  If the list is empty, this indicates that no changes have been recorded.  If it is the first time that this backend function is called for this activation of @code{flymake-mode}, then this argument isn't provided at all (i.e. it's not merely nil)."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:466
msgid "Each element is in the form (@var{beg} @var{end} @var{text}) where @var{beg} and @var{end} are buffer positions, and @var{text} is a string containing the text contained between those positions (if any), after the change was performed."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:467
#, no-wrap
msgid "@code{:changes-start} and @code{:changes-end}"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:471
msgid "The value is, respectively, the minimum and maximum buffer positions touched by the recent changes.  These are provided for convenience and only if @code{:recent-changes} is also provided."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:482
msgid "Whenever Flymake or the user decide to re-check the buffer, backend functions are called as detailed above, and are expected to initiate this check, but aren't in any way required to complete it before exiting: if the computation involved is expensive, as is often the case with large buffers, that slower task should be scheduled for the future using asynchronous sub-processes (@pxref{Asynchronous Processes,,, elisp, The Emacs Lisp reference manual}) or other asynchronous mechanisms."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:486
msgid "In any case, backend functions are expected to return quickly or signal an error, in which case the backend is disabled (@pxref{Backend exceptions})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:494
msgid "If the function returns, Flymake considers the backend to be @dfn{running}.  If it has not done so already, the backend is expected to call the function @var{report-fn} passed to it, at which point Flymake considers the backend to be @dfn{reporting}.  Backends call @var{report-fn} by passing it a single argument @var{report-action} followed by an optional list of keyword-value pairs of the form @w{@code{(@var{:report-key} @var{value} @var{:report-key2} @var{value2}...)}}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:496
msgid "Currently accepted values for @var{report-action} are:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:502
msgid "A (possibly empty) list of diagnostic objects created by @code{flymake-make-diagnostic}, causing Flymake to annotate the buffer with this information."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:510
msgid "A backend may call @var{report-fn} repeatedly in this manner, but only until Flymake considers that the most recently requested buffer check is now obsolete, because, say, buffer contents have changed in the meantime.  The backend is only given notice of this via a renewed call to the backend function.  Thus, to prevent making obsolete reports and wasting resources, backend functions should first cancel any ongoing processing from previous calls."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:514
msgid "The symbol @code{:panic}, signaling that the backend has encountered an exceptional situation and should be disabled."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:517
msgid "Currently accepted @var{report-key} arguments are:"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:522
msgid "@code{:explanation}, whose value should give user-readable details of the situation encountered, if any."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:527
msgid "@code{:force}, whose value should be a boolean suggesting that Flymake consider the report even if it was somehow unexpected."
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:532
msgid "@code{:region}, a cons (@var{beg} . @var{end}) of buffer positions indicating that the report applies to that region and that previous reports targeting other parts of the buffer remain valid."
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:537
msgid "Flymake utility functions::"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/flymake.texi:537
#: ../../../../../doc/misc/flymake.texi:599
#: ../../../../../doc/misc/flymake.texi:600
#, no-wrap
msgid "An annotated example backend"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/flymake.texi:539
#: ../../../../../doc/misc/flymake.texi:540
#, no-wrap
msgid "Flymake utility functions"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:541
#, no-wrap
msgid "utility functions"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:543
#, no-wrap
msgid "create diagnostic object"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:546
msgid "Before delivering them to Flymake, backends create diagnostic objects by calling the function @code{flymake-make-diagnostic}."
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:547
#, no-wrap
msgid "Function flymake-make-diagnostic buffer beg end type text"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:554
msgid "Make a Flymake diagnostic for @var{buffer}'s region from @var{beg} to @var{end}.  @var{type} is a diagnostic symbol (@pxref{Flymake error types}), and @var{text} is a description of the problem detected in this region.  Currently, it is unspecified behavior to make diagnostics for buffers other than the buffer that the Flymake backend is responsible for."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:556
#, no-wrap
msgid "access diagnostic object"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:561
msgid "These objects' properties can be accessed with the functions @code{flymake-diagnostic-backend}, @code{flymake-diagnostic-buffer}, @code{flymake-diagnostic-text}, @code{flymake-diagnostic-beg}, @code{flymake-diagnostic-end} and @code{flymake-diagnostic-type}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:564
msgid "Additionally, the function @code{flymake-diagnostics} will collect such objects in the region you specify."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:565
#, no-wrap
msgid "collect diagnostic objects"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:566
#, no-wrap
msgid "Function flymake-diagnostics beg end"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:572
msgid "Get a list of Flymake diagnostics in the region determined by @var{beg} and @var{end}.  If neither @var{beg} or @var{end} is supplied, use the whole buffer, otherwise if @var{beg} is non-@code{nil} and @var{end} is @code{nil}, consider only diagnostics at @var{beg}."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:574
#, no-wrap
msgid "buffer position from line and column number"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:579
msgid "It is often the case with external syntax tools that a diagnostic's position is reported in terms of a line number, and sometimes a column number.  To convert this information into a buffer position, backends can use the following function:"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:580
#, no-wrap
msgid "Function flymake-diag-region buffer line &optional col"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:585
msgid "Compute @var{buffer}'s region (@var{beg} .  @var{end}) corresponding to @var{line} and @var{col}.  If @var{col} is @code{nil}, return a region just for @var{line}.  Return @code{nil} if the region is invalid."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:587
#, no-wrap
msgid "add a log message"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:591
msgid "For troubleshooting purposes, backends may record arbitrary exceptional or erroneous situations into the Flymake log buffer (@pxref{Backend exceptions}):"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:592
#, no-wrap
msgid "Macro flymake-log level msg &optional args"
msgstr ""

#. type: deffn
#: ../../../../../doc/misc/flymake.texi:597
msgid "Log, at level @var{level}, the message @var{msg} formatted with @var{args}.  @var{level} is passed to @code{display-warning} (@pxref{Warning Basics,,, elisp, The Emacs Lisp reference Manual}), which is used to display the warning in Flymake's log buffer."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:601
#, no-wrap
msgid "example of backend"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:602
#, no-wrap
msgid "backend, annotated example"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:607
msgid "This section presents an annotated example of a complete working Flymake backend.  The example illustrates the process of writing a backend as outlined above."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:612
msgid "The backend in question is used for checking Ruby source files.  It uses asynchronous sub-processes (@pxref{Asynchronous Processes,,, elisp, The Emacs Lisp Reference Manual}), a common technique for performing parallel processing in Emacs."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:615
msgid "The following code needs lexical binding (@pxref{Using Lexical Binding,,, elisp, The Emacs Lisp Reference Manual}) to be active."
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:619
#, no-wrap
msgid ""
";;; ruby-flymake.el --- A ruby Flymake backend  -*- lexical-binding: t; -*-\n"
"(defvar-local ruby--flymake-proc nil)\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:633
#, no-wrap
msgid ""
"(defun ruby-flymake (report-fn &rest _args)\n"
"  ;; Not having a ruby interpreter is a serious problem which should cause\n"
"  ;; the backend to disable itself, so an @code{error} is signaled.\n"
"  ;;\n"
"  (unless (executable-find\n"
"           \"ruby\") (error \"Cannot find a suitable ruby\"))\n"
"  ;; If a live process launched in an earlier check was found, that\n"
"  ;; process is killed.  When that process's sentinel eventually runs,\n"
"  ;; it will notice its obsoletion, since it have since reset\n"
"  ;; `ruby-flymake-proc' to a different value\n"
"  ;;\n"
"  (when (process-live-p ruby--flymake-proc)\n"
"    (kill-process ruby--flymake-proc))\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:698
#, no-wrap
msgid ""
"  ;; Save the current buffer, the narrowing restriction, remove any\n"
"  ;; narrowing restriction.\n"
"  ;;\n"
"  (let ((source (current-buffer)))\n"
"    (save-restriction\n"
"      (widen)\n"
"      ;; Reset the `ruby--flymake-proc' process to a new process\n"
"      ;; calling the ruby tool.\n"
"      ;;\n"
"      (setq\n"
"       ruby--flymake-proc\n"
"       (make-process\n"
"        :name \"ruby-flymake\" :noquery t :connection-type 'pipe\n"
"        ;; Make output go to a temporary buffer.\n"
"        ;;\n"
"        :buffer (generate-new-buffer \" *ruby-flymake*\")\n"
"        :command '(\"ruby\" \"-w\" \"-c\")\n"
"        :sentinel\n"
"        (lambda (proc _event)\n"
"          ;; Check that the process has indeed exited, as it might\n"
"          ;; be simply suspended.\n"
"          ;;\n"
"          (when (eq 'exit (process-status proc))\n"
"            (unwind-protect\n"
"                ;; Only proceed if `proc' is the same as\n"
"                ;; `ruby--flymake-proc', which indicates that\n"
"                ;; `proc' is not an obsolete process.\n"
"                ;;\n"
"                (if (with-current-buffer source (eq proc ruby--flymake-proc))\n"
"                    (with-current-buffer (process-buffer proc)\n"
"                      (goto-char (point-min))\n"
"                      ;; Parse the output buffer for diagnostic's\n"
"                      ;; messages and locations, collect them in a list\n"
"                      ;; of objects, and call `report-fn'.\n"
"                      ;;\n"
"                      (cl-loop\n"
"                       while (search-forward-regexp\n"
"                              \"^\\\\(?:.*.rb\\\\|-\\\\):\\\\([0-9]+\\\\): \\\\(.*\\\\)$\"\n"
"                              nil t)\n"
"                       for msg = (match-string 2)\n"
"                       for (beg . end) = (flymake-diag-region\n"
"                                          source\n"
"                                          (string-to-number (match-string 1)))\n"
"                       for type = (if (string-match \"^warning\" msg)\n"
"                                      :warning\n"
"                                    :error)\n"
"                       collect (flymake-make-diagnostic source\n"
"                                                        beg\n"
"                                                        end\n"
"                                                        type\n"
"                                                        msg)\n"
"                       into diags\n"
"                       finally (funcall report-fn diags)))\n"
"                  (flymake-log :warning \"Canceling obsolete check %s\"\n"
"                               proc))\n"
"              ;; Cleanup the temporary buffer used to hold the\n"
"              ;; check's output.\n"
"              ;;\n"
"              (kill-buffer (process-buffer proc)))))))\n"
"      ;; Send the buffer contents to the process's stdin, followed by\n"
"      ;; an EOF.\n"
"      ;;\n"
"      (process-send-region ruby--flymake-proc (point-min) (point-max))\n"
"      (process-send-eof ruby--flymake-proc))))\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:701
#, no-wrap
msgid ""
"(defun ruby-setup-flymake-backend ()\n"
"  (add-hook 'flymake-diagnostic-functions 'ruby-flymake nil t))\n"
"\n"
msgstr ""

#. type: example
#: ../../../../../doc/misc/flymake.texi:703
#, no-wrap
msgid "(add-hook 'ruby-mode-hook 'ruby-setup-flymake-backend)\n"
msgstr ""

#. type: node
#: ../../../../../doc/misc/flymake.texi:705
#, no-wrap
msgid "The legacy Proc backend"
msgstr ""

#. type: chapter
#: ../../../../../doc/misc/flymake.texi:706
#, no-wrap
msgid "The legacy ``Proc'' backend"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:707
#, no-wrap
msgid "legacy proc backend"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Proc customization variables::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Adding support for a new syntax check tool::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Implementation overview::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Making a temporary copy::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Locating a master file::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Getting the include directories::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Locating the buildfile::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Starting the syntax check process::"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:720
msgid "Parsing the output::"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:720
#: ../../../../../doc/misc/flymake.texi:1128
#: ../../../../../doc/misc/flymake.texi:1129
#, no-wrap
msgid "Interaction with other modes"
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:722
#, no-wrap
msgid "flymake-proc-legacy-backend"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:726
msgid "The backend @code{flymake-proc-legacy-backend} was originally designed to be extended for supporting new syntax check tools and error message patterns.  It is also controlled by its own set of customization variables"
msgstr ""

#. type: node
#: ../../../../../doc/misc/flymake.texi:727
#, no-wrap
msgid "Proc customization variables"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:728
#, no-wrap
msgid "Customization variables for the Proc backend"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:729
#, no-wrap
msgid "proc backend customization variables"
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:732
#, no-wrap
msgid "flymake-proc-allowed-file-name-masks"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:736
msgid "A list of @code{(filename-regexp, init-function, cleanup-function getfname-function)} for configuring syntax check tools.  @xref{Adding support for a new syntax check tool}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:737
#, no-wrap
msgid "flymake-proc-master-file-dirs"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:740
msgid "A list of directories for searching a master file.  @xref{Locating a master file}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:741
#, no-wrap
msgid "flymake-proc-get-project-include-dirs-function"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:744
msgid "A function used for obtaining a list of project include dirs (C/C++ specific).  @xref{Getting the include directories}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:745
#, no-wrap
msgid "flymake-proc-master-file-count-limit"
msgstr ""

#. type: itemx
#: ../../../../../doc/misc/flymake.texi:746
#, no-wrap
msgid "flymake-proc-check-file-limit"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:748
msgid "Used when looking for a master file.  @xref{Locating a master file}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:749
#, no-wrap
msgid "flymake-proc-err-line-patterns"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:752
msgid "Patterns for error/warning messages in the form @code{(regexp file-idx line-idx col-idx err-text-idx)}.  @xref{Parsing the output}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:753
#, no-wrap
msgid "flymake-proc-diagnostic-type-pred"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:761
msgid "A function to classify a diagnostic text as particular type of error.  Should be a function taking an error text and returning a diagnostic symbol (@pxref{Flymake error types}).  If non-nil is returned but there is no such symbol in that table, a warning is assumed.  If nil is returned, an error is assumed.  Can also be a regular expression that should match only warnings.  This variable replaces the old @code{flymake-warning-re} and @code{flymake-warning-predicate}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:762
#, no-wrap
msgid "flymake-proc-compilation-prevents-syntax-check"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:765
msgid "A flag indicating whether compilation and syntax check of the same file cannot be run simultaneously.  @xref{Interaction with other modes}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:767
#: ../../../../../doc/misc/flymake.texi:768
#, no-wrap
msgid "Adding support for a new syntax check tool"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:769
#, no-wrap
msgid "adding support for a new syntax check tool"
msgstr ""

#. type: menuentry
#: ../../../../../doc/misc/flymake.texi:774
msgid "Example---Configuring a tool called directly::"
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/flymake.texi:774
#: ../../../../../doc/misc/flymake.texi:871
#: ../../../../../doc/misc/flymake.texi:872
#, no-wrap
msgid "Example---Configuring a tool called via make"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:779
msgid "Syntax check tools are configured using the @code{flymake-proc-allowed-file-name-masks} list.  Each item of this list has the following format:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:782
#, no-wrap
msgid "(filename-regexp, init-function, cleanup-function, getfname-function)\n"
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:785
#, no-wrap
msgid "filename-regexp"
msgstr ""

#. type: table
#: ../../../../../doc/misc/flymake.texi:791
msgid "This field is used as a key for locating init/cleanup/getfname functions for the buffer.  Items in @code{flymake-proc-allowed-file-name-masks} are searched sequentially.  The first item with @code{filename-regexp} matching buffer filename is selected.  If no match is found, @code{flymake-mode} is switched off."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:792
#, no-wrap
msgid "init-function"
msgstr ""

#. type: table
#: ../../../../../doc/misc/flymake.texi:798
msgid "@code{init-function} is required to initialize the syntax check, usually by creating a temporary copy of the buffer contents.  The function must return @code{(list cmd-name arg-list)}.  If @code{init-function} returns null, syntax check is aborted, but @code{flymake-mode} is not switched off."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:799
#, no-wrap
msgid "cleanup-function"
msgstr ""

#. type: table
#: ../../../../../doc/misc/flymake.texi:803
msgid "@code{cleanup-function} is called after the syntax check process is complete and should take care of proper deinitialization, which is usually deleting a temporary copy created by the @code{init-function}."
msgstr ""

#. type: item
#: ../../../../../doc/misc/flymake.texi:804
#, no-wrap
msgid "getfname-function"
msgstr ""

#. type: table
#: ../../../../../doc/misc/flymake.texi:811
msgid "This function is used for translating filenames reported by the syntax check tool into ``real'' filenames.  Filenames reported by the tool will be different from the real ones, as actually the tool works with the temporary copy.  In most cases, the default implementation provided by Flymake, @code{flymake-proc-get-real-file-name}, can be used as @code{getfname-function}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:818
msgid "To add support for a new syntax check tool, write the corresponding @code{init-function} and, optionally, @code{cleanup-function} and @code{getfname-function}.  If the format of error messages reported by the new tool is not yet supported by Flymake, add a new entry to the @code{flymake-proc-err-line-patterns} list."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:821
msgid "The following sections contain some examples of configuring Flymake support for various syntax check tools."
msgstr ""

#. type: subsection
#: ../../../../../doc/misc/flymake.texi:822
#: ../../../../../doc/misc/flymake.texi:823
#, no-wrap
msgid "Example---Configuring a tool called directly"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:824
#, no-wrap
msgid "adding support for perl"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:829
msgid "In this example, we will add support for @command{perl} as a syntax check tool.  @command{perl} supports the @option{-c} option which does syntax checking."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:831
msgid "First, we write the @code{init-function}:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:840
#, no-wrap
msgid ""
"(defun flymake-proc-perl-init ()\n"
"  (let* ((temp-file (flymake-proc-init-create-temp-buffer-copy\n"
"                     'flymake-proc-create-temp-inplace))\n"
"         (local-file (file-relative-name\n"
"                      temp-file\n"
"                      (file-name-directory buffer-file-name))))\n"
"    (list \"perl\" (list \"-wc \" local-file))))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:846
msgid "@code{flymake-proc-perl-init} creates a temporary copy of the buffer contents with the help of @code{flymake-proc-init-create-temp-buffer-copy}, and builds an appropriate command line."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:849
msgid "Next, we add a new entry to the @code{flymake-proc-allowed-file-name-masks}:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:857
#, no-wrap
msgid ""
"(setq flymake-proc-allowed-file-name-masks\n"
"      (cons '(\".+\\\\.pl$\"\n"
"              flymake-proc-perl-init\n"
"              flymake-proc-simple-cleanup\n"
"              flymake-proc-get-real-file-name)\n"
"            flymake-proc-allowed-file-name-masks))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:861
msgid "Note that we use standard @code{cleanup-function} and @code{getfname-function}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:863
msgid "Finally, we add an entry to @code{flymake-proc-err-line-patterns}:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:869
#, no-wrap
msgid ""
"(setq flymake-proc-err-line-patterns\n"
"      (cons '(\"\\\\(.*\\\\) at \\\\([^ \\n]+\\\\) line \\\\([0-9]+\\\\)[,.\\n]\"\n"
"              2 3 nil 1)\n"
"            flymake-proc-err-line-patterns))\n"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:873
#, no-wrap
msgid "adding support for C (gcc+make)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:877
msgid "In this example we will add support for C files syntax checked by @command{gcc} called via @command{make}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:881
msgid "We're not required to write any new functions, as Flymake already has functions for @command{make}.  We just add a new entry to the @code{flymake-proc-allowed-file-name-masks}:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:889
#, no-wrap
msgid ""
"(setq flymake-proc-allowed-file-name-masks\n"
"      (cons '(\".+\\\\.c$\"\n"
"              flymake-proc-simple-make-init\n"
"              flymake-proc-simple-cleanup\n"
"              flymake-proc-get-real-file-name)\n"
"            flymake-proc-allowed-file-name-masks))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:893
msgid "@code{flymake-proc-simple-make-init} builds the following @command{make} command line:"
msgstr ""

#. type: lisp
#: ../../../../../doc/misc/flymake.texi:901
#, no-wrap
msgid ""
"(list \"make\"\n"
"      (list \"-s\" \"-C\"\n"
"            base-dir\n"
"            (concat \"CHK_SOURCES=\" source)\n"
"            \"SYNTAX_CHECK_MODE=1\"\n"
"            \"check-syntax\"))\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:905
msgid "@code{base-dir} is a directory containing the @file{Makefile}, see @ref{Locating the buildfile}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:908
msgid "Thus, @file{Makefile} must contain the @code{check-syntax} target.  In our case this target might look like this:"
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/flymake.texi:912
#, no-wrap
msgid ""
"check-syntax:\n"
"\tgcc -o /dev/null -S ${CHK_SOURCES} || true\n"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:920
msgid "The format of error messages reported by @command{gcc} is already supported by Flymake, so we don't have to add a new entry to @code{flymake-err-line-patterns}.  Note that if you are using Automake, you may want to replace @code{gcc} with the standard Automake variable @code{COMPILE}:"
msgstr ""

#. type: verbatim
#: ../../../../../doc/misc/flymake.texi:924
#, no-wrap
msgid ""
"check-syntax:\n"
"\t$(COMPILE) -o /dev/null -S ${CHK_SOURCES} || true\n"
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:926
#: ../../../../../doc/misc/flymake.texi:927
#, no-wrap
msgid "Implementation overview"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:928
#, no-wrap
msgid "syntax check models"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:929
#, no-wrap
msgid "master file"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:939
msgid "@code{flymake-proc-legacy-backend} saves a copy of the buffer in a temporary file in the buffer's directory (or in the system temporary directory, for Java files), creates a syntax check command and launches a process with this command.  The output is parsed using a list of error message patterns, and error information (file name, line number, type and text) is saved.  After the process has finished, Flymake highlights erroneous lines in the buffer using the accumulated error information."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:943
msgid "Syntax check is considered possible if there's an entry in @code{flymake-proc-allowed-file-name-masks} matching buffer's filename and its @code{init-function} returns non-@code{nil} value."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:945
msgid "Two syntax check modes are distinguished:"
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/flymake.texi:953
msgid "Buffer can be syntax checked in a standalone fashion, that is, the file (its temporary copy, in fact) can be passed over to the compiler to do the syntax check.  Examples are C/C@t{++} sources (@file{.c}, @file{.cpp}) and Java (@file{.java})."
msgstr ""

#. type: enumerate
#: ../../../../../doc/misc/flymake.texi:960
msgid "Buffer can be syntax checked, but additional file, called master file, is required to perform this operation.  A master file is a file that includes the current file, so that running a syntax check tool on it will also check syntax in the current file.  Examples are C/C@t{++} headers (@file{.h}, @file{.hpp})."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:965
msgid "These modes are handled inside init/cleanup/getfname functions, see @ref{Adding support for a new syntax check tool}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:970
msgid "The Proc backend contains implementations of all functionality required to support different syntax check modes described above (making temporary copies, finding master files, etc.), as well as some tool-specific (routines for Make, Ant, etc.)@: code."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:972
#: ../../../../../doc/misc/flymake.texi:973
#, no-wrap
msgid "Making a temporary copy"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:974
#, no-wrap
msgid "temporary copy of the buffer"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:981
msgid "After the possibility of the syntax check has been determined, a temporary copy of the current buffer is made so that the most recent unsaved changes could be seen by the syntax check tool.  Making a copy is quite straightforward in a standalone case (mode @code{1}), as it's just saving buffer contents to a temporary file."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:984
msgid "Things get trickier, however, when master file is involved, as it requires to"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:988
msgid "locate a master file"
msgstr ""

#. type: itemize
#: ../../../../../doc/misc/flymake.texi:990
msgid "patch it to include the current file using its new (temporary) name."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:993
msgid "Locating a master file is discussed in the following section."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1002
msgid "Patching just changes all appropriate lines of the master file so that they use the new (temporary) name of the current file.  For example, suppose current file name is @code{file.h}, the master file is @code{file.cpp}, and it includes current file via @code{#include \"file.h\"}.  Current file's copy is saved to file @code{file_flymake.h}, so the include line must be changed to @code{#include \"file_flymake.h\"}.  Finally, patched master file is saved to @code{file_flymake_master.cpp}, and the last one is passed to the syntax check tool."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:1003
#: ../../../../../doc/misc/flymake.texi:1004
#, no-wrap
msgid "Locating a master file"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1005
#, no-wrap
msgid "locating a master file"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1006
#, no-wrap
msgid "master file, locating"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1009
msgid "Master file is located in two steps."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1019
msgid "First, a list of possible master files is built.  A simple name matching is used to find the files.  For a C++ header @file{file.h}, the Proc backend searches for all @file{.cpp} files in the directories whose relative paths are stored in a customizable variable @code{flymake-proc-master-file-dirs}, which usually contains something like @code{(\".\" \"./src\")}.  No more than @code{flymake-proc-master-file-count-limit} entries is added to the master file list.  The list is then sorted to move files with names @file{file.cpp} to the top."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1023
msgid "Next, each master file in a list is checked to contain the appropriate include directives.  No more than @code{flymake-proc-check-file-limit} of each file are parsed."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1029
msgid "For @file{file.h}, the include directives to look for are @code{#include \"file.h\"}, @code{#include \"../file.h\"}, etc.  Each include is checked against a list of include directories (see @ref{Getting the include directories}) to be sure it points to the correct @file{file.h}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1034
msgid "First matching master file found stops the search.  The master file is then patched and saved to disk.  In case no master file is found, syntax check is aborted, and corresponding status (@samp{!}) is reported in the mode line.  @xref{Syntax check statuses}."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:1035
#: ../../../../../doc/misc/flymake.texi:1036
#, no-wrap
msgid "Getting the include directories"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1037
#, no-wrap
msgid "include directories (C/C++ specific)"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1046
msgid "Two sets of include directories are distinguished: system include directories and project include directories.  The former is just the contents of the @code{INCLUDE} environment variable.  The latter is not so easy to obtain, and the way it can be obtained can vary greatly for different projects.  Therefore, a customizable variable @code{flymake-proc-get-project-include-dirs-function} is used to provide the way to implement the desired behavior."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1050
msgid "The default implementation, @code{flymake-proc-get-project-include-dirs-imp}, uses a @command{make} call.  This requires a correct base directory, that is, a directory containing a correct @file{Makefile}, to be determined."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1054
msgid "As obtaining the project include directories might be a costly operation, its return value is cached in the hash table.  The cache is cleared in the beginning of every syntax check attempt."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:1055
#: ../../../../../doc/misc/flymake.texi:1056
#, no-wrap
msgid "Locating the buildfile"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1057
#, no-wrap
msgid "locating the buildfile"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1058
#, no-wrap
msgid "buildfile, locating"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1059
#, no-wrap
msgid "Makefile, locating"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1071
msgid "The Proc backend can be configured to use different tools for performing syntax checks.  For example, it can use direct compiler call to syntax check a perl script or a call to @command{make} for a more complicated case of a C/C@t{++} source.  The general idea is that simple files, like Perl scripts and @acronym{HTML} pages, can be checked by directly invoking a corresponding tool.  Files that are usually more complex and generally used as part of larger projects, might require non-trivial options to be passed to the syntax check tool, like include directories for C@t{++}.  The latter files are syntax checked using some build tool, like Make or Ant."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1075
msgid "All Make configuration data is usually stored in a file called @file{Makefile}.  To allow for future extensions, Flymake uses a notion of buildfile to reference the @dfn{project configuration} file."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:1076
#, no-wrap
msgid "flymake-proc-find-buildfile"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1080
msgid "Special function, @code{flymake-proc-find-buildfile} is provided for locating buildfiles.  Searching for a buildfile is done in a manner similar to that of searching for possible master files."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1086
msgid "In case there's no build file, the syntax check is aborted."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1088
msgid "Buildfile values are also cached."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:1089
#: ../../../../../doc/misc/flymake.texi:1090
#, no-wrap
msgid "Starting the syntax check process"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1091
#, no-wrap
msgid "syntax check process, legacy proc backend"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1099
msgid "The command line (command name and the list of arguments) for launching a process is returned by the initialization function.  The Proc backend then just starts an asynchronous process and configures a process filter and sentinel, which are used for processing the output of the syntax check tool.  When exiting Emacs, running processes will be killed without prompting the user."
msgstr ""

#. type: section
#: ../../../../../doc/misc/flymake.texi:1100
#: ../../../../../doc/misc/flymake.texi:1101
#, no-wrap
msgid "Parsing the output"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1102
#, no-wrap
msgid "parsing the output, legacy proc backend"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1114
msgid "The output generated by the syntax check tool is parsed in the process filter/sentinel using the error message patterns stored in the @code{flymake-proc-err-line-patterns} variable.  This variable contains a list of items of the form @w{@code{(regexp file-idx line-idx err-text-idx)}}, used to determine whether a particular line is an error message and extract file name, line number and error text, respectively.  Error type (error/warning) is also guessed by matching error text with the @samp{^[wW]arning} pattern.  Anything that was not classified as a warning is considered an error.  Type is then used to sort error menu items, which shows error messages first."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1122
msgid "The Proc backend is also able to interpret error message patterns missing err-text-idx information.  This is done by merely taking the rest of the matched line (@code{(substring line (match-end 0))}) as error text.  This trick allows making use of a huge collection of error message line patterns from @file{compile.el}.  All these error patterns are appended to the end of @code{flymake-proc-err-line-patterns}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1127
msgid "The error information obtained is saved in a buffer local variable.  The buffer for which the process output belongs is determined from the process-id@w{}->@w{}buffer mapping updated after every process launch/exit."
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1130
#, no-wrap
msgid "interaction with other modes, legacy proc backend"
msgstr ""

#. type: cindex
#: ../../../../../doc/misc/flymake.texi:1131
#, no-wrap
msgid "interaction with compile mode, legacy proc backend"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1135
msgid "The only mode the Proc backend currently knows about is @code{compile}."
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1144
msgid "The Proc backend can be configured to not start syntax check if it thinks the compilation is in progress, by testing the @code{compilation-in-progress} variable.  The reason why this might be useful is saving CPU time in case both syntax check and compilation are very CPU intensive.  The original reason for adding this feature, though, was working around a locking problem with MS Visual C++ compiler.  The variable in question is @code{flymake-proc-compilation-prevents-syntax-check}."
msgstr ""

#. type: findex
#: ../../../../../doc/misc/flymake.texi:1145
#, no-wrap
msgid "flymake-proc-compile"
msgstr ""

#. type: Plain text
#: ../../../../../doc/misc/flymake.texi:1149
msgid "The Proc backend also provides an alternative command for starting compilation, @code{flymake-proc-compile}.  It just kills all the active syntax check processes before calling @code{compile}."
msgstr ""

#. type: appendix
#: ../../../../../doc/misc/flymake.texi:1150
#: ../../../../../doc/misc/flymake.texi:1151
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: include
#: ../../../../../doc/misc/flymake.texi:1152
#, no-wrap
msgid "doclicense.texi"
msgstr ""
